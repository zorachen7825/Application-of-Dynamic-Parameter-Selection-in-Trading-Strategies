{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":36350,"status":"ok","timestamp":1746631289962,"user":{"displayName":"林家宏","userId":"04041535431236020406"},"user_tz":-480},"id":"7ZYuOhMO1o_y","outputId":"ebb122f9-432c-4083-f96c-5f96188b17e0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.57.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.2.1)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n","Requirement already satisfied: scikit-optimize in /usr/local/lib/python3.11/dist-packages (0.10.2)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.11/dist-packages (from scikit-optimize) (1.4.2)\n","Requirement already satisfied: pyaml>=16.9 in /usr/local/lib/python3.11/dist-packages (from scikit-optimize) (25.1.0)\n","Requirement already satisfied: numpy>=1.20.3 in /usr/local/lib/python3.11/dist-packages (from scikit-optimize) (2.0.2)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-optimize) (1.15.2)\n","Requirement already satisfied: scikit-learn>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from scikit-optimize) (1.6.1)\n","Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.11/dist-packages (from scikit-optimize) (24.2)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.11/dist-packages (from pyaml>=16.9->scikit-optimize) (6.0.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.0.0->scikit-optimize) (3.6.0)\n","Requirement already satisfied: bayesian-optimization in /usr/local/lib/python3.11/dist-packages (2.0.3)\n","Requirement already satisfied: colorama<0.5.0,>=0.4.6 in /usr/local/lib/python3.11/dist-packages (from bayesian-optimization) (0.4.6)\n","Requirement already satisfied: numpy>=1.25 in /usr/local/lib/python3.11/dist-packages (from bayesian-optimization) (2.0.2)\n","Requirement already satisfied: scikit-learn<2.0.0,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from bayesian-optimization) (1.6.1)\n","Requirement already satisfied: scipy<2.0.0,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from bayesian-optimization) (1.15.2)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn<2.0.0,>=1.0.0->bayesian-optimization) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn<2.0.0,>=1.0.0->bayesian-optimization) (3.6.0)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (4.67.1)\n","Requirement already satisfied: xgboost in /usr/local/lib/python3.11/dist-packages (3.0.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from xgboost) (2.0.2)\n","Requirement already satisfied: nvidia-nccl-cu12 in /usr/local/lib/python3.11/dist-packages (from xgboost) (2.21.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from xgboost) (1.15.2)\n"]}],"source":["!pip install pandas numpy matplotlib\n","!pip install scikit-optimize\n","!pip install bayesian-optimization\n","!pip install tqdm\n","!pip install --upgrade xgboost"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IDdbOCGV0bo7"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import time\n","from itertools import product\n","from collections import Counter\n","from tqdm import tqdm\n","from skopt import gp_minimize\n","from skopt.space import Integer, Real\n","from skopt.utils import use_named_args\n","from bayes_opt import BayesianOptimization\n","from xgboost import XGBClassifier\n","from sklearn.utils.class_weight import compute_class_weight\n","from sklearn.metrics import accuracy_score, classification_report\n","import shap"]},{"cell_type":"markdown","metadata":{"id":"ja7NdFbW2oJY"},"source":["# 前處理"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2575,"status":"ok","timestamp":1746631292561,"user":{"displayName":"林家宏","userId":"04041535431236020406"},"user_tz":-480},"id":"l7iFhbpaexxD","outputId":"3ca745b2-115d-4742-ff2d-cae71215c850"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["data = pd.read_csv(\"/content/drive/MyDrive/Colab Notebooks/full_15K .csv\")\n","data['Datetime'] = pd.to_datetime(data['Date'] + ' ' + data['Time'])\n","data = data.sort_values('Datetime')\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"uXi8hiDmRIxm","executionInfo":{"status":"ok","timestamp":1746631292789,"user_tz":-480,"elapsed":227,"user":{"displayName":"林家宏","userId":"04041535431236020406"}},"outputId":"a54c73f0-eb23-4241-b53d-70bad7850bb0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            Date      Time   Open   High    Low  Close            Datetime\n","0      2021/12/1  08:45:00  17350  17384  17342  17356 2021-12-01 08:45:00\n","1      2021/12/1  09:00:00  17357  17419  17333  17419 2021-12-01 09:00:00\n","2      2021/12/1  09:15:00  17419  17425  17365  17375 2021-12-01 09:15:00\n","3      2021/12/1  09:30:00  17375  17441  17367  17441 2021-12-01 09:30:00\n","4      2021/12/1  09:45:00  17441  17457  17431  17435 2021-12-01 09:45:00\n","...          ...       ...    ...    ...    ...    ...                 ...\n","15709   2025/3/7  12:30:00  22543  22554  22523  22553 2025-03-07 12:30:00\n","15710   2025/3/7  12:45:00  22552  22552  22511  22537 2025-03-07 12:45:00\n","15711   2025/3/7  13:00:00  22536  22549  22508  22523 2025-03-07 13:00:00\n","15712   2025/3/7  13:15:00  22521  22552  22510  22550 2025-03-07 13:15:00\n","15713   2025/3/7  13:30:00  22550  22567  22512  22520 2025-03-07 13:30:00\n","\n","[15714 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-dd3fbf98-8559-486d-9f75-538c1d164d3d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Time</th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Datetime</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2021/12/1</td>\n","      <td>08:45:00</td>\n","      <td>17350</td>\n","      <td>17384</td>\n","      <td>17342</td>\n","      <td>17356</td>\n","      <td>2021-12-01 08:45:00</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2021/12/1</td>\n","      <td>09:00:00</td>\n","      <td>17357</td>\n","      <td>17419</td>\n","      <td>17333</td>\n","      <td>17419</td>\n","      <td>2021-12-01 09:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2021/12/1</td>\n","      <td>09:15:00</td>\n","      <td>17419</td>\n","      <td>17425</td>\n","      <td>17365</td>\n","      <td>17375</td>\n","      <td>2021-12-01 09:15:00</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2021/12/1</td>\n","      <td>09:30:00</td>\n","      <td>17375</td>\n","      <td>17441</td>\n","      <td>17367</td>\n","      <td>17441</td>\n","      <td>2021-12-01 09:30:00</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2021/12/1</td>\n","      <td>09:45:00</td>\n","      <td>17441</td>\n","      <td>17457</td>\n","      <td>17431</td>\n","      <td>17435</td>\n","      <td>2021-12-01 09:45:00</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>15709</th>\n","      <td>2025/3/7</td>\n","      <td>12:30:00</td>\n","      <td>22543</td>\n","      <td>22554</td>\n","      <td>22523</td>\n","      <td>22553</td>\n","      <td>2025-03-07 12:30:00</td>\n","    </tr>\n","    <tr>\n","      <th>15710</th>\n","      <td>2025/3/7</td>\n","      <td>12:45:00</td>\n","      <td>22552</td>\n","      <td>22552</td>\n","      <td>22511</td>\n","      <td>22537</td>\n","      <td>2025-03-07 12:45:00</td>\n","    </tr>\n","    <tr>\n","      <th>15711</th>\n","      <td>2025/3/7</td>\n","      <td>13:00:00</td>\n","      <td>22536</td>\n","      <td>22549</td>\n","      <td>22508</td>\n","      <td>22523</td>\n","      <td>2025-03-07 13:00:00</td>\n","    </tr>\n","    <tr>\n","      <th>15712</th>\n","      <td>2025/3/7</td>\n","      <td>13:15:00</td>\n","      <td>22521</td>\n","      <td>22552</td>\n","      <td>22510</td>\n","      <td>22550</td>\n","      <td>2025-03-07 13:15:00</td>\n","    </tr>\n","    <tr>\n","      <th>15713</th>\n","      <td>2025/3/7</td>\n","      <td>13:30:00</td>\n","      <td>22550</td>\n","      <td>22567</td>\n","      <td>22512</td>\n","      <td>22520</td>\n","      <td>2025-03-07 13:30:00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>15714 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dd3fbf98-8559-486d-9f75-538c1d164d3d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-dd3fbf98-8559-486d-9f75-538c1d164d3d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-dd3fbf98-8559-486d-9f75-538c1d164d3d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-cdc01da0-3d41-4fb0-8ef5-454aa91e9710\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cdc01da0-3d41-4fb0-8ef5-454aa91e9710')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-cdc01da0-3d41-4fb0-8ef5-454aa91e9710 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_9dc90fcb-f724-4e43-926b-95b037bd3dd5\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_9dc90fcb-f724-4e43-926b-95b037bd3dd5 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 15714,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 788,\n        \"samples\": [\n          \"2024/4/15\",\n          \"2022/1/26\",\n          \"2022/10/13\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Time\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"08:45:00\",\n          \"13:00:00\",\n          \"12:30:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3085,\n        \"min\": 12672,\n        \"max\": 24397,\n        \"num_unique_values\": 7172,\n        \"samples\": [\n          13396,\n          16587,\n          18096\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3090,\n        \"min\": 12702,\n        \"max\": 24405,\n        \"num_unique_values\": 7105,\n        \"samples\": [\n          22457,\n          23586,\n          20219\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3081,\n        \"min\": 12652,\n        \"max\": 24365,\n        \"num_unique_values\": 7145,\n        \"samples\": [\n          17538,\n          23247,\n          14331\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3086,\n        \"min\": 12672,\n        \"max\": 24397,\n        \"num_unique_values\": 7178,\n        \"samples\": [\n          16389,\n          13062,\n          19872\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Datetime\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2021-12-01 08:45:00\",\n        \"max\": \"2025-03-07 13:30:00\",\n        \"num_unique_values\": 15714,\n        \"samples\": [\n          \"2022-12-16 11:45:00\",\n          \"2023-05-05 09:30:00\",\n          \"2022-11-04 13:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","metadata":{"id":"qB8xkxln2tAZ"},"source":["分割數據"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":51,"status":"ok","timestamp":1746631293177,"user":{"displayName":"林家宏","userId":"04041535431236020406"},"user_tz":-480},"id":"0xP_ckdz2lvT","outputId":"4bad27ba-59df-4759-9e43-315c9407b135"},"outputs":[{"output_type":"stream","name":"stdout","text":["訓練: 9428, 驗證: 3143, 測試: 3143\n"]}],"source":["total_len = len(data)\n","train_end = int(total_len * 0.6)\n","val_end = int(total_len * 0.8)\n","train_data = data[:train_end]\n","val_data = data[train_end:val_end]\n","test_data = data[val_end:]\n","\n","print(f\"訓練: {len(train_data)}, 驗證: {len(val_data)}, 測試: {len(test_data)}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1746631293180,"user":{"displayName":"林家宏","userId":"04041535431236020406"},"user_tz":-480},"id":"0QNaeifpKHzl","outputId":"417e4ed0-1077-4e87-b682-fdebaf9605a4"},"outputs":[{"output_type":"stream","name":"stdout","text":["數據欄位： Index(['Date', 'Time', 'Open', 'High', 'Low', 'Close', 'Datetime'], dtype='object')\n","前幾行數據：\n","        Date      Time   Open   High    Low  Close            Datetime\n","0  2021/12/1  08:45:00  17350  17384  17342  17356 2021-12-01 08:45:00\n","1  2021/12/1  09:00:00  17357  17419  17333  17419 2021-12-01 09:00:00\n","2  2021/12/1  09:15:00  17419  17425  17365  17375 2021-12-01 09:15:00\n","3  2021/12/1  09:30:00  17375  17441  17367  17441 2021-12-01 09:30:00\n","4  2021/12/1  09:45:00  17441  17457  17431  17435 2021-12-01 09:45:00\n"]}],"source":["# 檢查數據欄位\n","print(\"數據欄位：\", data.columns)\n","print(\"前幾行數據：\")\n","print(data.head())"]},{"cell_type":"markdown","metadata":{"id":"no2DiSdE2zAM"},"source":["技術指標"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xfXICYwa2zys"},"outputs":[],"source":["# 技術指標計算\n","def add_indicators(df, ma_short, ma_long, will_period_1, will_period_2):\n","    df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","    df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","\n","    highest_high_buy = df['High'].rolling(window=will_period_1).max()\n","    lowest_low_buy = df['Low'].rolling(window=will_period_1).min()\n","    df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","    df[f\"Williams_1_{will_period_1}\"] = df[f\"Williams_1_{will_period_1}\"].where(highest_high_buy != lowest_low_buy, 0)\n","\n","    highest_high_sell = df['High'].rolling(window=will_period_2).max()\n","    lowest_low_sell = df['Low'].rolling(window=will_period_2).min()\n","    df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","    df[f\"Williams_2_{will_period_2}\"] = df[f\"Williams_2_{will_period_2}\"].where(highest_high_sell != lowest_low_sell, 0)\n","\n","    return df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MaEk1Sn2KUQN"},"outputs":[],"source":["# 評估指標\n","def calculate_win_rate(trades):\n","    if not trades:\n","        return 0.0\n","    wins = sum(1 for trade in trades if trade['profit'] > 0)\n","    return wins / len(trades)\n","\n","def calculate_msr(returns, rf=0.04/240):\n","    if len(returns) < 2:\n","        return 0.0\n","    median_return = np.median(returns)\n","    mad = np.median(np.abs(returns - median_return))\n","    if mad == 0:\n","        return 0.0\n","    return (median_return - rf) / mad\n","\n","def calculate_sharpe_ratio(returns, rf=0.04/240):\n","    if len(returns) < 2:\n","        return 0.0\n","    mean_return = np.mean(returns)\n","    std_return = np.std(returns, ddof=1)\n","    if std_return == 0:\n","        return 0.0\n","    return (mean_return - rf) / std_return\n","\n","# 確保 ma_short < ma_long\n","def is_valid_param_combination(params):\n","    return params['ma_short'] < params['ma_long']\n","\n","# 計算平均交易時長、出場原因統計，以及最短和最長持倉時間的平均\n","def calculate_additional_metrics(trades):\n","    if not trades:\n","        return 0, Counter(), 0, 0\n","\n","    # 計算每筆交易的持倉時間（K 棒數）\n","    durations = [ trade['exit_index'] - trade['entry_index'] for trade in trades ]\n","    avg_duration = np.mean(durations) if durations else 0\n","\n","    # 統計出場原因\n","    exit_reasons = Counter(trade['exit_reason'] for trade in trades)\n","\n","    # 計算 5 筆最短和最長持倉時間的平均\n","    sorted_durations = sorted(durations)\n","    shortest_5_avg = np.mean(sorted_durations[:5]) if len(sorted_durations) >= 5 else 0\n","    longest_5_avg = np.mean(sorted_durations[-5:]) if len(sorted_durations) >= 5 else 0\n","\n","    return avg_duration, exit_reasons, shortest_5_avg, longest_5_avg\n","\n","# 計算回報分佈統計\n","def calculate_returns_stats(returns):\n","    if len(returns) == 0:\n","        return 0, 0, 0, 0\n","    mean_return = np.mean(returns)\n","    std_return = np.std(returns, ddof=1) if len(returns) > 1 else 0\n","    min_return = np.min(returns)\n","    max_return = np.max(returns)\n","    return mean_return, std_return, min_return, max_return\n","\n","# 計算中位數回報和 MAD\n","def calculate_median_and_mad(returns):\n","    if len(returns) == 0:\n","        return 0, 0\n","    median_return = np.median(returns)\n","    mad = np.median(np.abs(returns - median_return))\n","    return median_return, mad"]},{"cell_type":"markdown","metadata":{"id":"GSOtIIy37KkO"},"source":["收益計算"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RUSpVHH57KRH"},"outputs":[],"source":["def execute_trade(trades, capital, entry_price, exit_price, entry_time, exit_time, entry_index, exit_index,\n","                  volume=200, fee_rate=0.00002, exit_reason=''):\n","    entry_fee = entry_price * volume * fee_rate\n","    exit_fee = exit_price * volume * fee_rate\n","\n","    capital -= entry_fee\n","    profit = (exit_price - entry_price) * volume\n","    net_profit = profit - exit_fee\n","    capital += net_profit\n","\n","    trade_record = {\n","        'entry_time': entry_time,\n","        'exit_time': exit_time,\n","        'entry_price': entry_price,\n","        'exit_price': exit_price,\n","        'entry_index': entry_index,\n","        'exit_index': exit_index,\n","        'profit': net_profit,\n","        'capital': capital,\n","        'entry_fee': entry_fee,\n","        'exit_fee': exit_fee,\n","        'exit_reason': exit_reason\n","    }\n","\n","    trades.append(trade_record)\n","\n","    return trades, capital\n"]},{"cell_type":"markdown","metadata":{"id":"UW_Loe0kbI0E"},"source":["# 四項策略"]},{"cell_type":"markdown","metadata":{"id":"lR0F3V-523MZ"},"source":["策略1（均線買 + 均線賣）\n","\n","進場：均線黃金交叉 and 威廉指標超賣。\n","\n","出場：均線死亡交叉 or 威廉指數超買。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sfFhWEWZ23W0"},"outputs":[],"source":["def simulate_strategy_1(df, ma_short, ma_long, will_period_1, will_buy_threshold_1,\n","                        will_period_2, will_sell_threshold_2, stop_loss, initial_capital=1000000):\n","\n","    df = add_indicators(df, ma_short, ma_long, will_period_1, will_period_2)\n","    position = 0\n","    capital = initial_capital\n","    trades = []\n","    entry_price = 0\n","    entry_time = None\n","\n","    for i in range(1, len(df) - 1):\n","        if position == 0 and i >= max(ma_long, will_period_1):\n","            if (df[f\"MA_Short_{ma_short}\"].iloc[i] > df[f\"MA_Long_{ma_long}\"].iloc[i] and\n","                df[f\"MA_Short_{ma_short}\"].iloc[i-1] <= df[f\"MA_Long_{ma_long}\"].iloc[i-1] and\n","                df[f\"Williams_1_{will_period_1}\"].iloc[i] < will_buy_threshold_1):\n","                position = 1\n","                entry_price = df['Open'].iloc[i+1]  # 下一根 K 線的開盤價\n","                entry_time = df['Datetime'].iloc[i+1]\n","                entry_index = i + 1  # 記錄進場索引\n","        elif position == 1:\n","            current_price = df['Close'].iloc[i]\n","            stop_loss_triggered = (entry_price - current_price) / entry_price >= stop_loss\n","            death_cross = df[f\"MA_Short_{ma_short}\"].iloc[i] < df[f\"MA_Long_{ma_long}\"].iloc[i]\n","            williams_overbought = df[f\"Williams_2_{will_period_2}\"].iloc[i] > will_sell_threshold_2\n","\n","            if death_cross or williams_overbought or stop_loss_triggered:\n","                position = 0\n","                exit_price = df['Open'].iloc[i+1]  # 下一根 K 線的開盤價\n","                exit_time = df['Datetime'].iloc[i+1]\n","                exit_index = i + 1\n","                if stop_loss_triggered:\n","                    exit_reason = 'stop_loss'\n","                elif death_cross:\n","                    exit_reason = 'death_cross'\n","                else:\n","                    exit_reason = 'williams_overbought'\n","                trades, capital = execute_trade(trades, capital, entry_price, exit_price, entry_time, exit_time,\n","                                            entry_index, exit_index, exit_reason=exit_reason)\n","\n","    if position == 1 and len(df) > 1:\n","        exit_price = df['Close'].iloc[-1]  # 最後一根 K 線的收盤價\n","        exit_time = df['Datetime'].iloc[-1]\n","        exit_index = len(df) - 1\n","        trades, capital = execute_trade(trades, capital, entry_price, exit_price, entry_time, exit_time,\n","                                    entry_index, exit_index, exit_reason='end_of_data')\n","\n","    if not trades:\n","        return trades, pd.Series([], dtype=float), capital\n","\n","    returns = pd.Series([t['profit'] for t in trades], index=[t['exit_time'] for t in trades])\n","    return trades, returns, capital"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uXwmQLc6tG76"},"outputs":[],"source":["#-------------------------------------------\n","# 策略1（三筆K棒版本） – 以跨窗口持倉方式\n","# 進場：若無持倉，當 signal_bar 上：\n","#        - features[5] (ma_short) > features[6] (ma_long)\n","#        - 且前一筆 (prev_bar) 的 features[5] <= features[6]\n","#        - 且 signal_bar 的 features[7] (Williams_1) < features[9] (will_buy_threshold_1)\n","#      則以下一筆 (execution_bar) 的 Open 價進場\n","# 出場：若已有持倉，則在 signal_bar 判斷：\n","#        - 停損： (entry_price - signal_bar['Close'])/entry_price >= features[11] (stop_loss)\n","#        - 死叉： features[5] < features[6]\n","#        - 或 Williams 超買： features[8] > features[10]\n","#-------------------------------------------\n","def simulate_strategy_1_3bars(df, features, initial_capital=1000000, open_position=None ,param_id=61):\n","    if len(df) != 3:\n","        raise ValueError(\"DataFrame 必須剛好包含三筆 K 棒資料。\")\n","    prev_bar = df.iloc[0]\n","    signal_bar = df.iloc[1]\n","    execution_bar = df.iloc[2]\n","    capital = initial_capital\n","    trades = []\n","    will_buy_threshold_1 = int(features[9].split('_')[4])\n","    will_sell_threshold_2 = int(features[10].split('_')[4])\n","    stop_loss = float(features[11].split('_')[2])\n","\n","    current_position = open_position if open_position is not None else prev_bar.get('position', None)\n","    if current_position is None:\n","        if (signal_bar[features[5]] > signal_bar[features[6]] and\n","            prev_bar[features[5]] <= prev_bar[features[6]] and\n","            signal_bar[features[7]] < will_buy_threshold_1):\n","            new_position = {'entry_time': execution_bar[features[4]], 'entry_price': execution_bar[features[0]],\n","                            'entry_id': param_id, 'exit_index': 1}\n","        else:\n","            new_position = None\n","    else:\n","        entry_price = current_position['entry_price']\n","        entry_time = current_position['entry_time']\n","        exit_index = current_position['exit_index']\n","        current_price = signal_bar[features[3]]\n","        stop_loss_triggered = (entry_price - current_price) / entry_price >= stop_loss\n","        death_cross = signal_bar[features[5]] < signal_bar[features[6]]\n","        williams_overbought = signal_bar[features[8]] > will_sell_threshold_2\n","        if stop_loss_triggered or death_cross or williams_overbought:\n","            exit_price = execution_bar[features[0]]\n","            exit_time = execution_bar[features[4]]\n","            if stop_loss_triggered:\n","                exit_reason = 'stop_loss'\n","            elif death_cross:\n","                exit_reason = 'death_cross'\n","            else:\n","                exit_reason = 'williams_overbought'\n","            trades, capital = execute_trade(trades, capital, entry_price, exit_price, entry_time, exit_time,\n","                                          0, exit_index, exit_reason=exit_reason)\n","            new_position = None\n","        else:\n","            new_position = current_position\n","            new_position['exit_index'] = exit_index + 1\n","    returns = pd.Series([t['profit'] for t in trades],\n","                        index=[t['exit_time'] for t in trades]) if trades else pd.Series([], dtype=float)\n","    return trades, returns, capital, new_position"]},{"cell_type":"markdown","metadata":{"id":"K7QHDCFY9Ch1"},"source":["策略2（均線買 + 價格賣）\n","\n","進場：短期均線上穿長期均線 and 威廉指數超賣\n","\n","出場：價格跌破長期均線 or 威廉指標超買"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"g9B0zWt_9CWB"},"outputs":[],"source":["def simulate_strategy_2(df, ma_short, ma_long, will_period_1, will_buy_threshold_1,\n","                        will_period_2, will_sell_threshold_2, stop_loss, initial_capital=1000000):\n","    df = add_indicators(df, ma_short, ma_long, will_period_1, will_period_2)\n","    position = 0\n","    capital = initial_capital\n","    trades = []\n","    entry_price = 0\n","    entry_time = None\n","\n","    for i in range(1, len(df) - 1):\n","        if position == 0 and i >= max(ma_long, will_period_1):\n","            # 進場條件：短期均線上穿長期均線且威廉指標超賣\n","            if (df[f\"MA_Short_{ma_short}\"].iloc[i] > df[f\"MA_Long_{ma_long}\"].iloc[i] and\n","                df[f\"MA_Short_{ma_short}\"].iloc[i-1] <= df[f\"MA_Long_{ma_long}\"].iloc[i-1] and\n","                df[f\"Williams_1_{will_period_1}\"].iloc[i] < will_buy_threshold_1):\n","                position = 1\n","                entry_price = df['Open'].iloc[i+1]\n","                entry_time = df['Datetime'].iloc[i+1]\n","                entry_index = i + 1  # 記錄進場索引\n","        elif position == 1:\n","            current_price = df['Close'].iloc[i]\n","            stop_loss_triggered = (entry_price - current_price) / entry_price >= stop_loss\n","            price_below_long_ma = current_price < df[f\"MA_Long_{ma_long}\"].iloc[i]\n","            williams_overbought = df[f\"Williams_2_{will_period_2}\"].iloc[i] > will_sell_threshold_2\n","\n","            if price_below_long_ma or williams_overbought or stop_loss_triggered:\n","                position = 0\n","                exit_price = df['Open'].iloc[i+1]\n","                exit_time = df['Datetime'].iloc[i+1]\n","                exit_index = i + 1\n","                if stop_loss_triggered:\n","                    exit_reason = 'stop_loss'\n","                elif price_below_long_ma:\n","                    exit_reason = 'price_below_long_ma'\n","                else:\n","                    exit_reason = 'williams_overbought'\n","                trades, capital = execute_trade(trades, capital, entry_price, exit_price, entry_time, exit_time,\n","                                              entry_index, exit_index, exit_reason=exit_reason)\n","\n","    if position == 1 and len(df) > 1:\n","        exit_price = df['Close'].iloc[-1]\n","        exit_time = df['Datetime'].iloc[-1]\n","        exit_index = len(df) - 1\n","        trades, capital = execute_trade(trades, capital, entry_price, exit_price, entry_time, exit_time,\n","                                      entry_index, exit_index, exit_reason='end_of_data')\n","\n","    if not trades:\n","        return trades, pd.Series([], dtype=float), capital\n","\n","    returns = pd.Series([t['profit'] for t in trades], index=[t['exit_time'] for t in trades])\n","    return trades, returns, capital"]},{"cell_type":"code","source":["#-------------------------------------------\n","# 策略2（三筆K棒版本）\n","# 進場條件同策略1，\n","# 出場條件改：若 signal_bar['Close'] < features[6] (ma_long) 或其他條件觸發\n","#-------------------------------------------\n","def simulate_strategy_2_3bars(df, features, initial_capital=1000000, open_position=None, param_id=61):\n","    if len(df) != 3:\n","        raise ValueError(\"DataFrame 必須剛好包含三筆 K 棒資料。\")\n","    prev_bar = df.iloc[0]\n","    signal_bar = df.iloc[1]\n","    execution_bar = df.iloc[2]\n","    capital = initial_capital\n","    trades = []\n","    will_buy_threshold_1 = int(features[9].split('_')[4])\n","    will_sell_threshold_2 = int(features[10].split('_')[4])\n","    stop_loss = float(features[11].split('_')[2])\n","\n","    current_position = open_position if open_position is not None else prev_bar.get('position', None)\n","    if current_position is None:\n","        if (signal_bar[features[5]] > signal_bar[features[6]] and\n","            prev_bar[features[5]] <= prev_bar[features[6]] and\n","            signal_bar[features[7]] < will_buy_threshold_1):\n","            new_position = {'entry_time': execution_bar[features[4]], 'entry_price': execution_bar[features[0]],\n","                            'entry_id': param_id, 'exit_index': 1}\n","        else:\n","            new_position = None\n","    else:\n","        entry_price = current_position['entry_price']\n","        entry_time = current_position['entry_time']\n","        exit_index = current_position['exit_index']\n","        current_price = signal_bar[features[3]]\n","        stop_loss_triggered = (entry_price - current_price) / entry_price >= stop_loss\n","        price_below_long_ma = current_price < signal_bar[features[6]]\n","        williams_overbought = signal_bar[features[8]] > will_sell_threshold_2\n","        if stop_loss_triggered or price_below_long_ma or williams_overbought:\n","            exit_price = execution_bar[features[0]]\n","            exit_time = execution_bar[features[4]]\n","            if stop_loss_triggered:\n","                exit_reason = 'stop_loss'\n","            elif price_below_long_ma:\n","                exit_reason = 'price_below_long_ma'\n","            else:\n","                exit_reason = 'williams_overbought'\n","            trades, capital = execute_trade(trades, capital, entry_price, exit_price, entry_time, exit_time,\n","                                        0, exit_index, exit_reason=exit_reason)\n","            new_position = None\n","        else:\n","            new_position = current_position\n","            new_position['exit_index'] = exit_index + 1\n","    returns = pd.Series([t['profit'] for t in trades],\n","                        index=[t['exit_time'] for t in trades]) if trades else pd.Series([], dtype=float)\n","    return trades, returns, capital, new_position"],"metadata":{"id":"s8p8UpT6MWb7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZfIFdxbp9wIT"},"source":["策略3（價格買 + 均線賣）\n","\n","買進：價格突破短期均線 and 威廉指標超賣\n","\n","賣出：短期均線下穿長期均線 or 威廉指標超買"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JK3WAXnnC39w"},"outputs":[],"source":["def simulate_strategy_3(df, ma_short, ma_long, will_period_1, will_buy_threshold_1,\n","                        will_period_2, will_sell_threshold_2, stop_loss, initial_capital=1000000):\n","    df = add_indicators(df, ma_short, ma_long, will_period_1, will_period_2)\n","    position = 0\n","    capital = initial_capital\n","    trades = []\n","    entry_price = 0\n","    entry_time = None\n","\n","    for i in range(1, len(df) - 1):\n","        if position == 0 and i >= max(ma_long, will_period_1):\n","            # 進場：價格突破短期均線且威廉指標超賣\n","            if (df['Close'].iloc[i] > df[f\"MA_Short_{ma_short}\"].iloc[i] and\n","                df[f\"Williams_1_{will_period_1}\"].iloc[i] < will_buy_threshold_1):\n","                position = 1\n","                entry_price = df['Open'].iloc[i+1]\n","                entry_time = df['Datetime'].iloc[i+1]\n","                entry_index = i + 1  # 記錄進場索引\n","        elif position == 1:\n","            current_price = df['Close'].iloc[i]\n","            stop_loss_triggered = (entry_price - current_price) / entry_price >= stop_loss\n","            death_cross = df[f\"MA_Short_{ma_short}\"].iloc[i] < df[f\"MA_Long_{ma_long}\"].iloc[i]\n","            williams_overbought = df[f\"Williams_2_{will_period_2}\"].iloc[i] > will_sell_threshold_2\n","\n","            if death_cross or williams_overbought or stop_loss_triggered:\n","                position = 0\n","                exit_price = df['Open'].iloc[i+1]\n","                exit_time = df['Datetime'].iloc[i+1]\n","                exit_index = i + 1\n","                if stop_loss_triggered:\n","                    exit_reason = 'stop_loss'\n","                elif death_cross:\n","                    exit_reason = 'death_cross'\n","                else:\n","                    exit_reason = 'williams_overbought'\n","                trades, capital = execute_trade(trades, capital, entry_price, exit_price, entry_time, exit_time,\n","                                              entry_index, exit_index, exit_reason=exit_reason)\n","\n","    if position == 1 and len(df) > 1:\n","        exit_price = df['Close'].iloc[-1]\n","        exit_time = df['Datetime'].iloc[-1]\n","        exit_index = len(df) - 1\n","        trades, capital = execute_trade(trades, capital, entry_price, exit_price, entry_time, exit_time,\n","                                      entry_index, exit_index, exit_reason='end_of_data')\n","\n","    if not trades:\n","        return trades, pd.Series([], dtype=float), capital\n","\n","    returns = pd.Series([t['profit'] for t in trades], index=[t['exit_time'] for t in trades])\n","    return trades, returns, capital"]},{"cell_type":"code","source":["#-------------------------------------------\n","# 策略3（三筆K棒版本）\n","# 進場：若 signal_bar['Close'] > features[5] (ma_short) 且 signal_bar[features[7]] < features[9]\n","# 出場：以停損、死亡交叉或 Williams 超買判斷\n","#-------------------------------------------\n","def simulate_strategy_3_3bars(df, features, initial_capital=1000000, open_position=None, param_id=61):\n","    if len(df) != 3:\n","        raise ValueError(\"DataFrame 必須剛好包含三筆 K 棒資料。\")\n","    prev_bar = df.iloc[0]\n","    signal_bar = df.iloc[1]\n","    execution_bar = df.iloc[2]\n","    capital = initial_capital\n","    trades = []\n","    will_buy_threshold_1 = int(features[9].split('_')[4])\n","    will_sell_threshold_2 = int(features[10].split('_')[4])\n","    stop_loss = float(features[11].split('_')[2])\n","\n","    current_position = open_position if open_position is not None else prev_bar.get('position', None)\n","    if current_position is None:\n","        if (signal_bar[features[3]] > signal_bar[features[5]] and\n","            signal_bar[features[7]] < will_buy_threshold_1):\n","            new_position = {'entry_time': execution_bar[features[4]], 'entry_price': execution_bar[features[0]],\n","                            'entry_id': param_id, 'exit_index': 1}\n","        else:\n","            new_position = None\n","    else:\n","        entry_price = current_position['entry_price']\n","        entry_time = current_position['entry_time']\n","        exit_index = current_position['exit_index']\n","        current_price = signal_bar[features[3]]\n","        stop_loss_triggered = (entry_price - current_price) / entry_price >= stop_loss\n","        death_cross = signal_bar[features[5]] < signal_bar[features[6]]\n","        williams_overbought = signal_bar[features[8]] > will_sell_threshold_2\n","        if stop_loss_triggered or death_cross or williams_overbought:\n","            exit_price = execution_bar[features[0]]\n","            exit_time = execution_bar[features[4]]\n","            if stop_loss_triggered:\n","                exit_reason = 'stop_loss'\n","            elif death_cross:\n","                exit_reason = 'death_cross'\n","            else:\n","                exit_reason = 'williams_overbought'\n","            trades, capital = execute_trade(trades, capital, entry_price, exit_price, entry_time, exit_time,\n","                                       0, exit_index, exit_reason=exit_reason)\n","            new_position = None\n","        else:\n","            new_position = current_position\n","            new_position['exit_index'] = exit_index + 1\n","    returns = pd.Series([t['profit'] for t in trades],\n","                        index=[t['exit_time'] for t in trades]) if trades else pd.Series([], dtype=float)\n","    return trades, returns, capital, new_position"],"metadata":{"id":"7w2J1gX1Mizt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Y6-Hpksi9wgi"},"source":["策略4（價格買 + 價格賣）\n","\n","進場：價格突破短期均線 and 威廉指標超賣。\n","\n","出場：價格跌破長期均線 or 威廉指標超買。"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JMEE7u_iC4Xg"},"outputs":[],"source":["def simulate_strategy_4(df, ma_short, ma_long, will_period_1, will_buy_threshold_1,\n","                        will_period_2, will_sell_threshold_2, stop_loss, initial_capital=1000000):\n","    df = add_indicators(df, ma_short, ma_long, will_period_1, will_period_2)\n","    position = 0\n","    capital = initial_capital\n","    trades = []\n","    entry_price = 0\n","    entry_time = None\n","\n","    for i in range(1, len(df) - 1):\n","        if position == 0 and i >= max(ma_long, will_period_1):\n","            # 進場：價格突破短期均線且威廉指標超賣\n","            if (df['Close'].iloc[i] > df[f\"MA_Short_{ma_short}\"].iloc[i] and\n","                df[f\"Williams_1_{will_period_1}\"].iloc[i] < will_buy_threshold_1):\n","                position = 1\n","                entry_price = df['Open'].iloc[i+1]\n","                entry_time = df['Datetime'].iloc[i+1]\n","                entry_index = i + 1  # 記錄進場索引\n","        elif position == 1:\n","            current_price = df['Close'].iloc[i]\n","            stop_loss_triggered = (entry_price - current_price) / entry_price >= stop_loss\n","            price_below_long_ma = current_price < df[f\"MA_Long_{ma_long}\"].iloc[i]\n","            williams_overbought = df[f\"Williams_2_{will_period_2}\"].iloc[i] > will_sell_threshold_2\n","\n","            if price_below_long_ma or williams_overbought or stop_loss_triggered:\n","                position = 0\n","                exit_price = df['Open'].iloc[i+1]\n","                exit_time = df['Datetime'].iloc[i+1]\n","                exit_index = i + 1\n","                if stop_loss_triggered:\n","                    exit_reason = 'stop_loss'\n","                elif price_below_long_ma:\n","                    exit_reason = 'price_below_long_ma'\n","                else:\n","                    exit_reason = 'williams_overbought'\n","                trades, capital = execute_trade(trades, capital, entry_price, exit_price, entry_time, exit_time,\n","                                              entry_index, exit_index, exit_reason=exit_reason)\n","\n","    if position == 1 and len(df) > 1:\n","        exit_price = df['Close'].iloc[-1]\n","        exit_time = df['Datetime'].iloc[-1]\n","        exit_index = len(df) - 1\n","        trades, capital = execute_trade(trades, capital, entry_price, exit_price, entry_time, exit_time,\n","                                      entry_index, exit_index, exit_reason='end_of_data')\n","\n","    if not trades:\n","        return trades, pd.Series([], dtype=float), capital\n","\n","    returns = pd.Series([t['profit'] for t in trades], index=[t['exit_time'] for t in trades])\n","    return trades, returns, capital"]},{"cell_type":"code","source":["#-------------------------------------------\n","# 策略4（三筆K棒版本）\n","# 進場：同策略3\n","# 出場：條件改為停損、signal_bar['Close'] < features[6] (ma_long) 或 Williams 超買\n","#-------------------------------------------\n","def simulate_strategy_4_3bars(df, features, initial_capital=1000000, open_position=None, param_id=61):\n","    if len(df) != 3:\n","        raise ValueError(\"DataFrame 必須剛好包含三筆 K 棒資料。\")\n","    prev_bar = df.iloc[0]\n","    signal_bar = df.iloc[1]\n","    execution_bar = df.iloc[2]\n","    capital = initial_capital\n","    trades = []\n","    will_buy_threshold_1 = int(features[9].split('_')[4])\n","    will_sell_threshold_2 = int(features[10].split('_')[4])\n","    stop_loss = float(features[11].split('_')[2])\n","\n","    current_position = open_position if open_position is not None else prev_bar.get('position', None)\n","    if current_position is None:\n","        if (signal_bar[features[3]] > signal_bar[features[5]] and\n","            signal_bar[features[7]] < will_buy_threshold_1):\n","            new_position = {'entry_time': execution_bar[features[4]], 'entry_price': execution_bar[features[0]],\n","                            'entry_id': param_id, 'exit_index': 1}\n","        else:\n","            new_position = None\n","    else:\n","        entry_price = current_position['entry_price']\n","        entry_time = current_position['entry_time']\n","        exit_index = current_position['exit_index']\n","        current_price = signal_bar[features[3]]\n","        stop_loss_triggered = (entry_price - current_price) / entry_price >= stop_loss\n","        price_below_long_ma = current_price < signal_bar[features[6]]\n","        williams_overbought = signal_bar[features[8]] > will_sell_threshold_2\n","        if stop_loss_triggered or price_below_long_ma or williams_overbought:\n","            exit_price = execution_bar[features[0]]\n","            exit_time = execution_bar[features[4]]\n","            if stop_loss_triggered:\n","                exit_reason = 'stop_loss'\n","            elif price_below_long_ma:\n","                exit_reason = 'price_below_long_ma'\n","            else:\n","                exit_reason = 'williams_overbought'\n","            trades, capital = execute_trade(trades, capital, entry_price, exit_price, entry_time, exit_time,\n","                                        0, exit_index, exit_reason=exit_reason)\n","            new_position = None\n","        else:\n","            new_position = current_position\n","            new_position['exit_index'] = exit_index + 1\n","    returns = pd.Series([t['profit'] for t in trades],\n","                        index=[t['exit_time'] for t in trades]) if trades else pd.Series([], dtype=float)\n","    return trades, returns, capital, new_position"],"metadata":{"id":"tWBgFWXHMngX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rEBdocdN2TME"},"source":["# 網格搜索"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7771251,"status":"ok","timestamp":1743133243261,"user":{"displayName":"陳昭如","userId":"12388700631515663339"},"user_tz":-480},"id":"ndaQV66pKi6x","outputId":"5deff09a-12b2-4c8e-a97d-7ed051533d42"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","策略 1 - 前 5 筆最佳參數組合（網格搜索，成交次數 > 20, 勝率 > 0.3, 最終資金 > 100 萬, 5 筆最長持倉時間平均 > 3，按穩健夏普比率從高到低排序）：\n"]},{"name":"stderr","output_type":"stream","text":["Grid Search Progress for simulate_strategy_1: 100%|██████████| 30000/30000 [34:52<00:00, 14.34it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","1. 參數組合: {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -50, 'stop_loss': 0.003}\n","   交易次數: 35\n","   最終資金: 1116760.28\n","   勝率: 0.7143\n","   中位數回報 (Median Return): 4317.43\n","   中位數絕對偏差 (MAD): 4211.04\n","   穩健夏普比率 (MSR): 1.0253\n","   夏普比率 (Sharpe Ratio): 0.3870\n","   回報分佈統計:\n","     均值 (Mean): 3413.68\n","     標準差 (Std): 8821.77\n","     最小值 (Min): -15678.10\n","     最大值 (Max): 26119.09\n","   平均交易時長 (K 棒數): 4.06\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 13.60\n","   出場原因統計: {'death_cross': 11, 'williams_overbought': 21, 'stop_loss': 3}\n","\n","2. 參數組合: {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}\n","   交易次數: 35\n","   最終資金: 1108360.44\n","   勝率: 0.7143\n","   中位數回報 (Median Return): 4317.43\n","   中位數絕對偏差 (MAD): 4211.04\n","   穩健夏普比率 (MSR): 1.0253\n","   夏普比率 (Sharpe Ratio): 0.3385\n","   回報分佈統計:\n","     均值 (Mean): 3173.69\n","     標準差 (Std): 9375.13\n","     最小值 (Min): -21285.37\n","     最大值 (Max): 26119.09\n","   平均交易時長 (K 棒數): 4.09\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 13.60\n","   出場原因統計: {'death_cross': 11, 'williams_overbought': 21, 'stop_loss': 3}\n","\n","3. 參數組合: {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -50, 'will_period_2': 40, 'will_sell_threshold_2': -30, 'stop_loss': 0.004}\n","   交易次數: 35\n","   最終資金: 1141559.78\n","   勝率: 0.6286\n","   中位數回報 (Median Return): 5725.20\n","   中位數絕對偏差 (MAD): 5804.15\n","   穩健夏普比率 (MSR): 0.9864\n","   夏普比率 (Sharpe Ratio): 0.2220\n","   回報分佈統計:\n","     均值 (Mean): 4122.24\n","     標準差 (Std): 18567.95\n","     最小值 (Min): -22679.16\n","     最大值 (Max): 90312.53\n","   平均交易時長 (K 棒數): 5.63\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 14.20\n","   出場原因統計: {'death_cross': 13, 'williams_overbought': 17, 'stop_loss': 5}\n","\n","4. 參數組合: {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -50, 'stop_loss': 0.003}\n","   交易次數: 32\n","   最終資金: 1163670.86\n","   勝率: 0.7188\n","   中位數回報 (Median Return): 4617.97\n","   中位數絕對偏差 (MAD): 4704.77\n","   穩健夏普比率 (MSR): 0.9816\n","   夏普比率 (Sharpe Ratio): 0.3567\n","   回報分佈統計:\n","     均值 (Mean): 5191.68\n","     標準差 (Std): 14552.98\n","     最小值 (Min): -15678.10\n","     最大值 (Max): 66320.28\n","   平均交易時長 (K 棒數): 4.91\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 15.40\n","   出場原因統計: {'death_cross': 9, 'williams_overbought': 20, 'stop_loss': 3}\n","\n","5. 參數組合: {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}\n","   交易次數: 32\n","   最終資金: 1155271.03\n","   勝率: 0.7188\n","   中位數回報 (Median Return): 4617.97\n","   中位數絕對偏差 (MAD): 4704.77\n","   穩健夏普比率 (MSR): 0.9816\n","   夏普比率 (Sharpe Ratio): 0.3295\n","   回報分佈統計:\n","     均值 (Mean): 4929.18\n","     標準差 (Std): 14959.63\n","     最小值 (Min): -21285.37\n","     最大值 (Max): 66320.28\n","   平均交易時長 (K 棒數): 4.94\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 15.40\n","   出場原因統計: {'death_cross': 9, 'williams_overbought': 20, 'stop_loss': 3}\n","\n","策略 2 - 前 5 筆最佳參數組合（網格搜索，成交次數 > 20, 勝率 > 0.3, 最終資金 > 100 萬, 5 筆最長持倉時間平均 > 3，按穩健夏普比率從高到低排序）：\n"]},{"name":"stderr","output_type":"stream","text":["Grid Search Progress for simulate_strategy_2: 100%|██████████| 30000/30000 [34:38<00:00, 14.44it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","1. 參數組合: {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 20, 'will_sell_threshold_2': -20, 'stop_loss': 0.002}\n","   交易次數: 30\n","   最終資金: 1034783.83\n","   勝率: 0.6667\n","   中位數回報 (Median Return): 1630.61\n","   中位數絕對偏差 (MAD): 2908.28\n","   穩健夏普比率 (MSR): 0.5607\n","   夏普比率 (Sharpe Ratio): 0.1932\n","   回報分佈統計:\n","     均值 (Mean): 1236.38\n","     標準差 (Std): 6400.81\n","     最小值 (Min): -14270.01\n","     最大值 (Max): 18321.24\n","   平均交易時長 (K 棒數): 2.60\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 7.40\n","   出場原因統計: {'price_below_long_ma': 10, 'williams_overbought': 17, 'stop_loss': 3}\n","\n","2. 參數組合: {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 20, 'will_sell_threshold_2': -20, 'stop_loss': 0.003}\n","   交易次數: 30\n","   最終資金: 1034183.84\n","   勝率: 0.6667\n","   中位數回報 (Median Return): 1630.61\n","   中位數絕對偏差 (MAD): 2908.28\n","   穩健夏普比率 (MSR): 0.5607\n","   夏普比率 (Sharpe Ratio): 0.1888\n","   回報分佈統計:\n","     均值 (Mean): 1216.38\n","     標準差 (Std): 6441.41\n","     最小值 (Min): -14270.01\n","     最大值 (Max): 18321.24\n","   平均交易時長 (K 棒數): 2.63\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 7.40\n","   出場原因統計: {'price_below_long_ma': 11, 'williams_overbought': 17, 'stop_loss': 2}\n","\n","3. 參數組合: {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 20, 'will_sell_threshold_2': -20, 'stop_loss': 0.004}\n","   交易次數: 30\n","   最終資金: 1038383.76\n","   勝率: 0.6667\n","   中位數回報 (Median Return): 1630.61\n","   中位數絕對偏差 (MAD): 2908.28\n","   穩健夏普比率 (MSR): 0.5607\n","   夏普比率 (Sharpe Ratio): 0.2190\n","   回報分佈統計:\n","     均值 (Mean): 1356.38\n","     標準差 (Std): 6192.46\n","     最小值 (Min): -14270.01\n","     最大值 (Max): 18321.24\n","   平均交易時長 (K 棒數): 2.80\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 7.60\n","   出場原因統計: {'price_below_long_ma': 11, 'williams_overbought': 18, 'stop_loss': 1}\n","\n","4. 參數組合: {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 50, 'will_sell_threshold_2': -40, 'stop_loss': 0.004}\n","   交易次數: 29\n","   最終資金: 1204351.76\n","   勝率: 0.6897\n","   中位數回報 (Median Return): 3518.31\n","   中位數絕對偏差 (MAD): 6996.12\n","   穩健夏普比率 (MSR): 0.5029\n","   夏普比率 (Sharpe Ratio): 0.3879\n","   回報分佈統計:\n","     均值 (Mean): 7123.23\n","     標準差 (Std): 18361.79\n","     最小值 (Min): -15678.10\n","     最大值 (Max): 81912.53\n","   平均交易時長 (K 棒數): 5.41\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 13.60\n","   出場原因統計: {'price_below_long_ma': 12, 'williams_overbought': 15, 'stop_loss': 2}\n","\n","5. 參數組合: {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -40, 'stop_loss': 0.004}\n","   交易次數: 32\n","   最終資金: 1180840.71\n","   勝率: 0.6562\n","   中位數回報 (Median Return): 3021.79\n","   中位數絕對偏差 (MAD): 6307.71\n","   穩健夏普比率 (MSR): 0.4791\n","   夏普比率 (Sharpe Ratio): 0.3325\n","   回報分佈統計:\n","     均值 (Mean): 5728.70\n","     標準差 (Std): 17228.91\n","     最小值 (Min): -15678.10\n","     最大值 (Max): 81912.53\n","   平均交易時長 (K 棒數): 5.06\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 15.20\n","   出場原因統計: {'price_below_long_ma': 15, 'williams_overbought': 16, 'stop_loss': 1}\n","\n","策略 3 - 前 5 筆最佳參數組合（網格搜索，成交次數 > 20, 勝率 > 0.3, 最終資金 > 100 萬, 5 筆最長持倉時間平均 > 3，按穩健夏普比率從高到低排序）：\n"]},{"name":"stderr","output_type":"stream","text":["Grid Search Progress for simulate_strategy_3: 100%|██████████| 30000/30000 [29:51<00:00, 16.74it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","1. 參數組合: {'ma_short': 30, 'ma_long': 60, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.003}\n","   交易次數: 52\n","   最終資金: 1065667.39\n","   勝率: 0.7115\n","   中位數回報 (Median Return): 2418.47\n","   中位數絕對偏差 (MAD): 2594.54\n","   穩健夏普比率 (MSR): 0.9321\n","   夏普比率 (Sharpe Ratio): 0.0993\n","   回報分佈統計:\n","     均值 (Mean): 1339.10\n","     標準差 (Std): 13486.04\n","     最小值 (Min): -31469.65\n","     最大值 (Max): 63314.16\n","   平均交易時長 (K 棒數): 2.29\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 8.20\n","   出場原因統計: {'williams_overbought': 23, 'death_cross': 21, 'stop_loss': 8}\n","\n","2. 參數組合: {'ma_short': 30, 'ma_long': 60, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}\n","   交易次數: 52\n","   最終資金: 1062467.46\n","   勝率: 0.7115\n","   中位數回報 (Median Return): 2418.47\n","   中位數絕對偏差 (MAD): 2594.54\n","   穩健夏普比率 (MSR): 0.9321\n","   夏普比率 (Sharpe Ratio): 0.0942\n","   回報分佈統計:\n","     均值 (Mean): 1277.56\n","     標準差 (Std): 13563.00\n","     最小值 (Min): -31469.65\n","     最大值 (Max): 63314.16\n","   平均交易時長 (K 棒數): 2.44\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 9.80\n","   出場原因統計: {'williams_overbought': 23, 'death_cross': 22, 'stop_loss': 7}\n","\n","3. 參數組合: {'ma_short': 30, 'ma_long': 50, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.003}\n","   交易次數: 54\n","   最終資金: 1066525.65\n","   勝率: 0.7037\n","   中位數回報 (Median Return): 2224.96\n","   中位數絕對偏差 (MAD): 2495.03\n","   穩健夏普比率 (MSR): 0.8918\n","   夏普比率 (Sharpe Ratio): 0.0995\n","   回報分佈統計:\n","     均值 (Mean): 1308.56\n","     標準差 (Std): 13145.38\n","     最小值 (Min): -31469.65\n","     最大值 (Max): 63314.16\n","   平均交易時長 (K 棒數): 2.15\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 8.20\n","   出場原因統計: {'williams_overbought': 23, 'death_cross': 23, 'stop_loss': 8}\n","\n","4. 參數組合: {'ma_short': 30, 'ma_long': 50, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}\n","   交易次數: 54\n","   最終資金: 1063325.71\n","   勝率: 0.7037\n","   中位數回報 (Median Return): 2224.96\n","   中位數絕對偏差 (MAD): 2495.03\n","   穩健夏普比率 (MSR): 0.8918\n","   夏普比率 (Sharpe Ratio): 0.0945\n","   回報分佈統計:\n","     均值 (Mean): 1249.30\n","     標準差 (Std): 13221.21\n","     最小值 (Min): -31469.65\n","     最大值 (Max): 63314.16\n","   平均交易時長 (K 棒數): 2.30\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 9.80\n","   出場原因統計: {'williams_overbought': 23, 'death_cross': 24, 'stop_loss': 7}\n","\n","5. 參數組合: {'ma_short': 35, 'ma_long': 40, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}\n","   交易次數: 53\n","   最終資金: 1100772.66\n","   勝率: 0.6415\n","   中位數回報 (Median Return): 2505.66\n","   中位數絕對偏差 (MAD): 2975.89\n","   穩健夏普比率 (MSR): 0.8420\n","   夏普比率 (Sharpe Ratio): 0.1282\n","   回報分佈統計:\n","     均值 (Mean): 1978.97\n","     標準差 (Std): 15434.36\n","     最小值 (Min): -31469.65\n","     最大值 (Max): 63314.16\n","   平均交易時長 (K 棒數): 2.75\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 9.80\n","   出場原因統計: {'williams_overbought': 29, 'death_cross': 17, 'stop_loss': 7}\n","\n","策略 4 - 前 5 筆最佳參數組合（網格搜索，成交次數 > 20, 勝率 > 0.3, 最終資金 > 100 萬, 5 筆最長持倉時間平均 > 3，按穩健夏普比率從高到低排序）：\n"]},{"name":"stderr","output_type":"stream","text":["Grid Search Progress for simulate_strategy_4: 100%|██████████| 30000/30000 [30:08<00:00, 16.59it/s]"]},{"name":"stdout","output_type":"stream","text":["\n","1. 參數組合: {'ma_short': 30, 'ma_long': 60, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.003}\n","   交易次數: 53\n","   最終資金: 1059696.56\n","   勝率: 0.6981\n","   中位數回報 (Median Return): 2319.56\n","   中位數絕對偏差 (MAD): 2401.12\n","   穩健夏普比率 (MSR): 0.9660\n","   夏普比率 (Sharpe Ratio): 0.0902\n","   回報分佈統計:\n","     均值 (Mean): 1202.78\n","     標準差 (Std): 13337.65\n","     最小值 (Min): -31469.65\n","     最大值 (Max): 63314.16\n","   平均交易時長 (K 棒數): 2.23\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 8.20\n","   出場原因統計: {'williams_overbought': 25, 'price_below_long_ma': 20, 'stop_loss': 8}\n","\n","2. 參數組合: {'ma_short': 30, 'ma_long': 60, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}\n","   交易次數: 53\n","   最終資金: 1056496.63\n","   勝率: 0.6981\n","   中位數回報 (Median Return): 2319.56\n","   中位數絕對偏差 (MAD): 2401.12\n","   穩健夏普比率 (MSR): 0.9660\n","   夏普比率 (Sharpe Ratio): 0.0852\n","   回報分佈統計:\n","     均值 (Mean): 1142.41\n","     標準差 (Std): 13413.34\n","     最小值 (Min): -31469.65\n","     最大值 (Max): 63314.16\n","   平均交易時長 (K 棒數): 2.38\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 9.80\n","   出場原因統計: {'williams_overbought': 25, 'price_below_long_ma': 21, 'stop_loss': 7}\n","\n","3. 參數組合: {'ma_short': 30, 'ma_long': 40, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 20, 'will_sell_threshold_2': -40, 'stop_loss': 0.002}\n","   交易次數: 51\n","   最終資金: 1223877.20\n","   勝率: 0.7059\n","   中位數回報 (Median Return): 2328.18\n","   中位數絕對偏差 (MAD): 2801.30\n","   穩健夏普比率 (MSR): 0.8311\n","   夏普比率 (Sharpe Ratio): 0.3400\n","   回報分佈統計:\n","     均值 (Mean): 4465.42\n","     標準差 (Std): 13135.09\n","     最小值 (Min): -20869.86\n","     最大值 (Max): 63129.69\n","   平均交易時長 (K 棒數): 1.41\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 4.80\n","   出場原因統計: {'williams_overbought': 32, 'price_below_long_ma': 18, 'stop_loss': 1}\n","\n","4. 參數組合: {'ma_short': 30, 'ma_long': 40, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 20, 'will_sell_threshold_2': -40, 'stop_loss': 0.003}\n","   交易次數: 51\n","   最終資金: 1223877.20\n","   勝率: 0.7059\n","   中位數回報 (Median Return): 2328.18\n","   中位數絕對偏差 (MAD): 2801.30\n","   穩健夏普比率 (MSR): 0.8311\n","   夏普比率 (Sharpe Ratio): 0.3400\n","   回報分佈統計:\n","     均值 (Mean): 4465.42\n","     標準差 (Std): 13135.09\n","     最小值 (Min): -20869.86\n","     最大值 (Max): 63129.69\n","   平均交易時長 (K 棒數): 1.41\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 4.80\n","   出場原因統計: {'williams_overbought': 32, 'price_below_long_ma': 18, 'stop_loss': 1}\n","\n","5. 參數組合: {'ma_short': 30, 'ma_long': 40, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 20, 'will_sell_threshold_2': -40, 'stop_loss': 0.004}\n","   交易次數: 51\n","   最終資金: 1223877.20\n","   勝率: 0.7059\n","   中位數回報 (Median Return): 2328.18\n","   中位數絕對偏差 (MAD): 2801.30\n","   穩健夏普比率 (MSR): 0.8311\n","   夏普比率 (Sharpe Ratio): 0.3400\n","   回報分佈統計:\n","     均值 (Mean): 4465.42\n","     標準差 (Std): 13135.09\n","     最小值 (Min): -20869.86\n","     最大值 (Max): 63129.69\n","   平均交易時長 (K 棒數): 1.41\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 4.80\n","   出場原因統計: {'williams_overbought': 32, 'price_below_long_ma': 18, 'stop_loss': 1}\n"]},{"name":"stderr","output_type":"stream","text":["\n"]}],"source":["# 定義網格搜索參數範圍\n","param_grid = {\n","    'ma_short': [15, 20, 25, 30, 35],\n","    'ma_long': [20, 30, 40, 50, 60],\n","    'will_period_1': [20, 30, 40, 50, 60],\n","    'will_buy_threshold_1': [-80, -70, -60, -50],\n","    'will_period_2': [20, 30, 40, 50, 60],\n","    'will_sell_threshold_2': [-50, -40, -30, -20],\n","    'stop_loss': [0.002, 0.003, 0.004]\n","}\n","\n","# 網格搜索函數（針對單一策略）\n","def grid_search_strategy(data, param_grid, simulate_func):\n","    # 生成所有參數組合\n","    param_names = list(param_grid.keys())\n","    param_values = list(param_grid.values())\n","    all_combinations = list(product(*param_values))\n","\n","    results = []\n","\n","    # 遍歷每個參數組合\n","    for combo in tqdm(all_combinations, desc=f\"Grid Search Progress for {simulate_func.__name__}\"):\n","        params = dict(zip(param_names, combo))\n","\n","        # 檢查參數組合是否有效\n","        if not is_valid_param_combination(params):\n","            continue\n","\n","        # 模擬策略\n","        trades, returns, final_capital = simulate_func(\n","            data.copy(),\n","            ma_short=params['ma_short'],\n","            ma_long=params['ma_long'],\n","            will_period_1=params['will_period_1'],\n","            will_buy_threshold_1=params['will_buy_threshold_1'],\n","            will_period_2=params['will_period_2'],\n","            will_sell_threshold_2=params['will_sell_threshold_2'],\n","            stop_loss=params['stop_loss']\n","        )\n","\n","        # 計算表現指標\n","        trade_count = len(trades)\n","        win_rate = calculate_win_rate(trades)\n","        msr = calculate_msr(returns)\n","        sharpe = calculate_sharpe_ratio(returns)\n","        avg_duration, exit_reasons, shortest_5_avg, longest_5_avg = calculate_additional_metrics(trades)\n","\n","        # 過濾條件：成交次數 > 20，勝率 > 0.3，最終資金 > 100 萬，5 筆最長持倉時間平均 > 3\n","        if (trade_count <= 20 or\n","            win_rate <= 0.3 or\n","            final_capital <= 1000000 or\n","            longest_5_avg <= 3):\n","            continue\n","\n","        # 儲存結果\n","        results.append({\n","            'params': params,\n","            'trade_count': trade_count,\n","            'final_capital': final_capital,\n","            'win_rate': win_rate,\n","            'msr': msr,\n","            'sharpe': sharpe,\n","            'avg_duration': avg_duration,\n","            'exit_reasons': exit_reasons,\n","            'shortest_5_avg': shortest_5_avg,\n","            'longest_5_avg': longest_5_avg,\n","            'returns': returns  # 儲存 returns 以供後續計算\n","        })\n","\n","    # 按穩健夏普比率從高到低排序\n","    results_sorted = sorted(results, key=lambda x: x['msr'], reverse=True)[:5]  # 僅取前 5 筆\n","\n","    return results_sorted\n","\n","# 執行網格搜索並輸出結果\n","strategy_funcs = [simulate_strategy_1, simulate_strategy_2, simulate_strategy_3, simulate_strategy_4]\n","all_results = []\n","\n","for idx, sim_func in enumerate(strategy_funcs, 1):\n","    strategy = f\"Strategy_{idx}\"\n","    print(f\"\\n策略 {idx} - 前 5 筆最佳參數組合（網格搜索，成交次數 > 20, 勝率 > 0.3, 最終資金 > 100 萬, 5 筆最長持倉時間平均 > 3，按穩健夏普比率從高到低排序）：\")\n","    results = grid_search_strategy(val_data, param_grid, sim_func)\n","\n","    # 儲存結果以供後續使用\n","    for result in results:\n","        result['strategy'] = strategy\n","        all_results.append(result)\n","\n","    # 輸出結果\n","    for i, result in enumerate(results, 1):\n","        # 計算額外指標\n","        returns = result['returns']\n","        median_return, mad = calculate_median_and_mad(returns)\n","        mean_return, std_return, min_return, max_return = calculate_returns_stats(returns)\n","\n","        print(f\"\\n{i}. 參數組合: {result['params']}\")\n","        print(f\"   交易次數: {result['trade_count']}\")\n","        print(f\"   最終資金: {result['final_capital']:.2f}\")\n","        print(f\"   勝率: {result['win_rate']:.4f}\")\n","        print(f\"   中位數回報 (Median Return): {median_return:.2f}\")\n","        print(f\"   中位數絕對偏差 (MAD): {mad:.2f}\")\n","        print(f\"   穩健夏普比率 (MSR): {result['msr']:.4f}\")\n","        print(f\"   夏普比率 (Sharpe Ratio): {result['sharpe']:.4f}\")\n","        print(f\"   回報分佈統計:\")\n","        print(f\"     均值 (Mean): {mean_return:.2f}\")\n","        print(f\"     標準差 (Std): {std_return:.2f}\")\n","        print(f\"     最小值 (Min): {min_return:.2f}\")\n","        print(f\"     最大值 (Max): {max_return:.2f}\")\n","        print(f\"   平均交易時長 (K 棒數): {result['avg_duration']:.2f}\")\n","        print(f\"   5 筆最短持倉時間平均 (K 棒數): {result['shortest_5_avg']:.2f}\")\n","        print(f\"   5 筆最長持倉時間平均 (K 棒數): {result['longest_5_avg']:.2f}\")\n","        print(f\"   出場原因統計: {dict(result['exit_reasons'])}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rfhINswRxswT"},"outputs":[],"source":["# 自訂Encoder處理numpy, pandas Series 和 Counter\n","class CustomEncoder(json.JSONEncoder):\n","    def default(self, obj):\n","        if isinstance(obj, (np.integer, np.int64)):\n","            return int(obj)\n","        elif isinstance(obj, (np.floating, np.float64)):\n","            return float(obj)\n","        elif isinstance(obj, np.ndarray):\n","            return obj.tolist()\n","        elif isinstance(obj, pd.Series):\n","            # 將Timestamp索引轉成str\n","            return {str(k): v for k, v in obj.items()}\n","        elif isinstance(obj, Counter):\n","            return dict(obj)\n","        else:\n","            return super().default(obj)\n","\n","# 輸出為json檔\n","with open('/content/drive/MyDrive/Colab Notebooks/all_results_with_returns.json', 'w', encoding='utf-8') as f:\n","    json.dump(all_results, f, ensure_ascii=False, indent=4, cls=CustomEncoder)"]},{"cell_type":"markdown","metadata":{"id":"wZBZ2NUv3G-1"},"source":["# 貝葉斯優化"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":274790,"status":"ok","timestamp":1746631616204,"user":{"displayName":"林家宏","userId":"04041535431236020406"},"user_tz":-480},"id":"qNEuSyx9KKhq","outputId":"73ea9d13-eab9-49c9-be84-ab80398e76a4"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","策略 1 - 前 5 筆最佳參數組合（貝葉斯優化，成交次數 > 20, 勝率 > 0.3, 最終資金 > 100 萬, 5 筆最長持倉時間平均 > 3，按穩健夏普比率從高到低排序）：\n","|   iter    |  target   |  ma_long  | ma_short  | stop_loss | will_b... | will_p... | will_p... | will_s... |\n","-------------------------------------------------------------------------------------------------------------\n","| \u001b[39m1        \u001b[39m | \u001b[39m0.3528   \u001b[39m | \u001b[39m34.98    \u001b[39m | \u001b[39m34.01    \u001b[39m | \u001b[39m0.003464 \u001b[39m | \u001b[39m-62.04   \u001b[39m | \u001b[39m26.24    \u001b[39m | \u001b[39m26.24    \u001b[39m | \u001b[39m-48.26   \u001b[39m |\n","| \u001b[39m2        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m54.65    \u001b[39m | \u001b[39m27.02    \u001b[39m | \u001b[39m0.003416 \u001b[39m | \u001b[39m-79.38   \u001b[39m | \u001b[39m58.8     \u001b[39m | \u001b[39m53.3     \u001b[39m | \u001b[39m-43.63   \u001b[39m |\n","| \u001b[39m3        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m27.27    \u001b[39m | \u001b[39m18.67    \u001b[39m | \u001b[39m0.002608 \u001b[39m | \u001b[39m-64.26   \u001b[39m | \u001b[39m37.28    \u001b[39m | \u001b[39m31.65    \u001b[39m | \u001b[39m-31.64   \u001b[39m |\n","| \u001b[39m4        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m25.58    \u001b[39m | \u001b[39m20.84    \u001b[39m | \u001b[39m0.002733 \u001b[39m | \u001b[39m-66.32   \u001b[39m | \u001b[39m51.41    \u001b[39m | \u001b[39m27.99    \u001b[39m | \u001b[39m-34.57   \u001b[39m |\n","| \u001b[39m5        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m43.7     \u001b[39m | \u001b[39m15.93    \u001b[39m | \u001b[39m0.003215 \u001b[39m | \u001b[39m-74.88   \u001b[39m | \u001b[39m22.6     \u001b[39m | \u001b[39m57.96    \u001b[39m | \u001b[39m-21.03   \u001b[39m |\n","| \u001b[39m6        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m52.34    \u001b[39m | \u001b[39m21.09    \u001b[39m | \u001b[39m0.002195 \u001b[39m | \u001b[39m-59.47   \u001b[39m | \u001b[39m37.61    \u001b[39m | \u001b[39m24.88    \u001b[39m | \u001b[39m-35.14   \u001b[39m |\n","| \u001b[39m7        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m21.38    \u001b[39m | \u001b[39m33.19    \u001b[39m | \u001b[39m0.002518 \u001b[39m | \u001b[39m-60.12   \u001b[39m | \u001b[39m32.47    \u001b[39m | \u001b[39m40.8     \u001b[39m | \u001b[39m-33.6    \u001b[39m |\n","| \u001b[39m8        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m27.39    \u001b[39m | \u001b[39m34.39    \u001b[39m | \u001b[39m0.00355  \u001b[39m | \u001b[39m-51.82   \u001b[39m | \u001b[39m55.79    \u001b[39m | \u001b[39m43.92    \u001b[39m | \u001b[39m-22.34   \u001b[39m |\n","| \u001b[39m9        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m23.54    \u001b[39m | \u001b[39m18.92    \u001b[39m | \u001b[39m0.00209  \u001b[39m | \u001b[39m-70.24   \u001b[39m | \u001b[39m35.55    \u001b[39m | \u001b[39m30.85    \u001b[39m | \u001b[39m-25.14   \u001b[39m |\n","| \u001b[39m10       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m34.27    \u001b[39m | \u001b[39m20.62    \u001b[39m | \u001b[39m0.003085 \u001b[39m | \u001b[39m-75.77   \u001b[39m | \u001b[39m52.09    \u001b[39m | \u001b[39m22.98    \u001b[39m | \u001b[39m-20.39   \u001b[39m |\n","| \u001b[39m11       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m39.65    \u001b[39m | \u001b[39m33.56    \u001b[39m | \u001b[39m0.002924 \u001b[39m | \u001b[39m-65.87   \u001b[39m | \u001b[39m23.18    \u001b[39m | \u001b[39m28.45    \u001b[39m | \u001b[39m-45.26   \u001b[39m |\n","| \u001b[39m12       \u001b[39m | \u001b[39m0.1004   \u001b[39m | \u001b[39m22.57    \u001b[39m | \u001b[39m17.18    \u001b[39m | \u001b[39m0.003793 \u001b[39m | \u001b[39m-54.5    \u001b[39m | \u001b[39m50.07    \u001b[39m | \u001b[39m31.16    \u001b[39m | \u001b[39m-35.07   \u001b[39m |\n","| \u001b[39m13       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m37.03    \u001b[39m | \u001b[39m21.82    \u001b[39m | \u001b[39m0.00381  \u001b[39m | \u001b[39m-65.82   \u001b[39m | \u001b[39m57.71    \u001b[39m | \u001b[39m31.89    \u001b[39m | \u001b[39m-29.59   \u001b[39m |\n","| \u001b[39m14       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m59.94    \u001b[39m | \u001b[39m16.02    \u001b[39m | \u001b[39m0.003565 \u001b[39m | \u001b[39m-57.73   \u001b[39m | \u001b[39m51.69    \u001b[39m | \u001b[39m33.97    \u001b[39m | \u001b[39m-36.07   \u001b[39m |\n","| \u001b[39m15       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m42.24    \u001b[39m | \u001b[39m33.07    \u001b[39m | \u001b[39m0.003324 \u001b[39m | \u001b[39m-73.08   \u001b[39m | \u001b[39m58.64    \u001b[39m | \u001b[39m35.85    \u001b[39m | \u001b[39m-49.17   \u001b[39m |\n","| \u001b[39m16       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m52.37    \u001b[39m | \u001b[39m18.85    \u001b[39m | \u001b[39m0.003702 \u001b[39m | \u001b[39m-60.47   \u001b[39m | \u001b[39m46.52    \u001b[39m | \u001b[39m22.05    \u001b[39m | \u001b[39m-37.44   \u001b[39m |\n","| \u001b[39m17       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m48.39    \u001b[39m | \u001b[39m27.63    \u001b[39m | \u001b[39m0.003604 \u001b[39m | \u001b[39m-59.78   \u001b[39m | \u001b[39m53.79    \u001b[39m | \u001b[39m28.62    \u001b[39m | \u001b[39m-21.2    \u001b[39m |\n","| \u001b[39m18       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m24.76    \u001b[39m | \u001b[39m34.01    \u001b[39m | \u001b[39m0.003937 \u001b[39m | \u001b[39m-51.4    \u001b[39m | \u001b[39m56.99    \u001b[39m | \u001b[39m29.46    \u001b[39m | \u001b[39m-37.36   \u001b[39m |\n","| \u001b[39m19       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m59.05    \u001b[39m | \u001b[39m29.0     \u001b[39m | \u001b[39m0.003806 \u001b[39m | \u001b[39m-66.66   \u001b[39m | \u001b[39m36.32    \u001b[39m | \u001b[39m29.62    \u001b[39m | \u001b[39m-44.63   \u001b[39m |\n","| \u001b[39m20       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m37.13    \u001b[39m | \u001b[39m21.55    \u001b[39m | \u001b[39m0.003035 \u001b[39m | \u001b[39m-50.56   \u001b[39m | \u001b[39m20.67    \u001b[39m | \u001b[39m55.62    \u001b[39m | \u001b[39m-34.42   \u001b[39m |\n","| \u001b[39m21       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.26    \u001b[39m | \u001b[39m24.66    \u001b[39m | \u001b[39m0.002582 \u001b[39m | \u001b[39m-62.41   \u001b[39m | \u001b[39m40.44    \u001b[39m | \u001b[39m26.39    \u001b[39m | \u001b[39m-21.01   \u001b[39m |\n","| \u001b[39m22       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m51.11    \u001b[39m | \u001b[39m29.29    \u001b[39m | \u001b[39m0.003197 \u001b[39m | \u001b[39m-79.22   \u001b[39m | \u001b[39m37.68    \u001b[39m | \u001b[39m42.78    \u001b[39m | \u001b[39m-29.73   \u001b[39m |\n","| \u001b[39m23       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m33.49    \u001b[39m | \u001b[39m34.32    \u001b[39m | \u001b[39m0.002189 \u001b[39m | \u001b[39m-65.85   \u001b[39m | \u001b[39m58.91    \u001b[39m | \u001b[39m43.3     \u001b[39m | \u001b[39m-26.52   \u001b[39m |\n","| \u001b[39m24       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m39.77    \u001b[39m | \u001b[39m31.15    \u001b[39m | \u001b[39m0.003101 \u001b[39m | \u001b[39m-51.42   \u001b[39m | \u001b[39m38.85    \u001b[39m | \u001b[39m57.62    \u001b[39m | \u001b[39m-40.56   \u001b[39m |\n","| \u001b[39m25       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m49.86    \u001b[39m | \u001b[39m21.77    \u001b[39m | \u001b[39m0.002907 \u001b[39m | \u001b[39m-60.32   \u001b[39m | \u001b[39m45.03    \u001b[39m | \u001b[39m28.2     \u001b[39m | \u001b[39m-27.58   \u001b[39m |\n","| \u001b[39m26       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m57.54    \u001b[39m | \u001b[39m30.81    \u001b[39m | \u001b[39m0.002508 \u001b[39m | \u001b[39m-59.15   \u001b[39m | \u001b[39m28.83    \u001b[39m | \u001b[39m45.94    \u001b[39m | \u001b[39m-27.9    \u001b[39m |\n","| \u001b[39m27       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m46.92    \u001b[39m | \u001b[39m24.94    \u001b[39m | \u001b[39m0.003107 \u001b[39m | \u001b[39m-71.92   \u001b[39m | \u001b[39m36.83    \u001b[39m | \u001b[39m29.8     \u001b[39m | \u001b[39m-20.27   \u001b[39m |\n","| \u001b[39m28       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m41.29    \u001b[39m | \u001b[39m29.92    \u001b[39m | \u001b[39m0.003029 \u001b[39m | \u001b[39m-66.44   \u001b[39m | \u001b[39m42.6     \u001b[39m | \u001b[39m36.26    \u001b[39m | \u001b[39m-49.67   \u001b[39m |\n","| \u001b[39m29       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m53.52    \u001b[39m | \u001b[39m26.85    \u001b[39m | \u001b[39m0.002748 \u001b[39m | \u001b[39m-71.65   \u001b[39m | \u001b[39m59.44    \u001b[39m | \u001b[39m36.71    \u001b[39m | \u001b[39m-27.38   \u001b[39m |\n","| \u001b[39m30       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m33.16    \u001b[39m | \u001b[39m29.47    \u001b[39m | \u001b[39m0.002686 \u001b[39m | \u001b[39m-61.72   \u001b[39m | \u001b[39m49.69    \u001b[39m | \u001b[39m20.92    \u001b[39m | \u001b[39m-44.09   \u001b[39m |\n","| \u001b[39m31       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m36.14    \u001b[39m | \u001b[39m28.34    \u001b[39m | \u001b[39m0.003994 \u001b[39m | \u001b[39m-63.66   \u001b[39m | \u001b[39m28.09    \u001b[39m | \u001b[39m51.46    \u001b[39m | \u001b[39m-40.47   \u001b[39m |\n","| \u001b[39m32       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m43.7     \u001b[39m | \u001b[39m19.37    \u001b[39m | \u001b[39m0.002682 \u001b[39m | \u001b[39m-68.96   \u001b[39m | \u001b[39m37.8     \u001b[39m | \u001b[39m59.83    \u001b[39m | \u001b[39m-32.64   \u001b[39m |\n","| \u001b[39m33       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m22.51    \u001b[39m | \u001b[39m34.69    \u001b[39m | \u001b[39m0.002462 \u001b[39m | \u001b[39m-77.8    \u001b[39m | \u001b[39m59.64    \u001b[39m | \u001b[39m55.11    \u001b[39m | \u001b[39m-23.43   \u001b[39m |\n","| \u001b[39m34       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m43.04    \u001b[39m | \u001b[39m25.52    \u001b[39m | \u001b[39m0.002962 \u001b[39m | \u001b[39m-79.66   \u001b[39m | \u001b[39m39.38    \u001b[39m | \u001b[39m40.15    \u001b[39m | \u001b[39m-49.11   \u001b[39m |\n","| \u001b[39m35       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m52.22    \u001b[39m | \u001b[39m34.79    \u001b[39m | \u001b[39m0.00238  \u001b[39m | \u001b[39m-75.33   \u001b[39m | \u001b[39m32.47    \u001b[39m | \u001b[39m36.32    \u001b[39m | \u001b[39m-37.98   \u001b[39m |\n","| \u001b[39m36       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m57.36    \u001b[39m | \u001b[39m28.77    \u001b[39m | \u001b[39m0.003331 \u001b[39m | \u001b[39m-54.31   \u001b[39m | \u001b[39m33.09    \u001b[39m | \u001b[39m20.07    \u001b[39m | \u001b[39m-30.58   \u001b[39m |\n","| \u001b[39m37       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m28.94    \u001b[39m | \u001b[39m23.32    \u001b[39m | \u001b[39m0.003372 \u001b[39m | \u001b[39m-65.84   \u001b[39m | \u001b[39m41.54    \u001b[39m | \u001b[39m27.56    \u001b[39m | \u001b[39m-26.38   \u001b[39m |\n","| \u001b[39m38       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m41.12    \u001b[39m | \u001b[39m31.25    \u001b[39m | \u001b[39m0.00382  \u001b[39m | \u001b[39m-72.48   \u001b[39m | \u001b[39m50.37    \u001b[39m | \u001b[39m55.68    \u001b[39m | \u001b[39m-44.99   \u001b[39m |\n","| \u001b[39m39       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m39.28    \u001b[39m | \u001b[39m34.59    \u001b[39m | \u001b[39m0.003481 \u001b[39m | \u001b[39m-57.83   \u001b[39m | \u001b[39m57.31    \u001b[39m | \u001b[39m39.12    \u001b[39m | \u001b[39m-24.83   \u001b[39m |\n","| \u001b[39m40       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m46.52    \u001b[39m | \u001b[39m27.86    \u001b[39m | \u001b[39m0.003849 \u001b[39m | \u001b[39m-66.39   \u001b[39m | \u001b[39m46.26    \u001b[39m | \u001b[39m36.78    \u001b[39m | \u001b[39m-24.61   \u001b[39m |\n","| \u001b[39m41       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m30.97    \u001b[39m | \u001b[39m30.83    \u001b[39m | \u001b[39m0.003641 \u001b[39m | \u001b[39m-50.7    \u001b[39m | \u001b[39m25.33    \u001b[39m | \u001b[39m30.89    \u001b[39m | \u001b[39m-37.44   \u001b[39m |\n","| \u001b[39m42       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m54.5     \u001b[39m | \u001b[39m29.14    \u001b[39m | \u001b[39m0.002319 \u001b[39m | \u001b[39m-57.77   \u001b[39m | \u001b[39m46.39    \u001b[39m | \u001b[39m32.94    \u001b[39m | \u001b[39m-48.94   \u001b[39m |\n","| \u001b[39m43       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m21.65    \u001b[39m | \u001b[39m33.44    \u001b[39m | \u001b[39m0.002703 \u001b[39m | \u001b[39m-71.01   \u001b[39m | \u001b[39m34.25    \u001b[39m | \u001b[39m28.08    \u001b[39m | \u001b[39m-25.51   \u001b[39m |\n","| \u001b[39m44       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m47.74    \u001b[39m | \u001b[39m18.82    \u001b[39m | \u001b[39m0.002734 \u001b[39m | \u001b[39m-54.02   \u001b[39m | \u001b[39m22.69    \u001b[39m | \u001b[39m38.84    \u001b[39m | \u001b[39m-44.51   \u001b[39m |\n","| \u001b[39m45       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m21.8     \u001b[39m | \u001b[39m18.07    \u001b[39m | \u001b[39m0.002875 \u001b[39m | \u001b[39m-60.89   \u001b[39m | \u001b[39m24.97    \u001b[39m | \u001b[39m29.84    \u001b[39m | \u001b[39m-48.26   \u001b[39m |\n","| \u001b[39m46       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m24.33    \u001b[39m | \u001b[39m32.51    \u001b[39m | \u001b[39m0.00374  \u001b[39m | \u001b[39m-50.11   \u001b[39m | \u001b[39m32.85    \u001b[39m | \u001b[39m47.45    \u001b[39m | \u001b[39m-37.23   \u001b[39m |\n","| \u001b[39m47       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m44.39    \u001b[39m | \u001b[39m34.31    \u001b[39m | \u001b[39m0.002482 \u001b[39m | \u001b[39m-76.82   \u001b[39m | \u001b[39m28.84    \u001b[39m | \u001b[39m47.55    \u001b[39m | \u001b[39m-34.81   \u001b[39m |\n","| \u001b[39m48       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m58.82    \u001b[39m | \u001b[39m20.1     \u001b[39m | \u001b[39m0.003835 \u001b[39m | \u001b[39m-69.3    \u001b[39m | \u001b[39m31.86    \u001b[39m | \u001b[39m54.08    \u001b[39m | \u001b[39m-44.79   \u001b[39m |\n","| \u001b[39m49       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m38.14    \u001b[39m | \u001b[39m24.82    \u001b[39m | \u001b[39m0.003668 \u001b[39m | \u001b[39m-54.53   \u001b[39m | \u001b[39m34.38    \u001b[39m | \u001b[39m27.53    \u001b[39m | \u001b[39m-23.85   \u001b[39m |\n","| \u001b[39m50       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m57.71    \u001b[39m | \u001b[39m27.9     \u001b[39m | \u001b[39m0.002023 \u001b[39m | \u001b[39m-57.84   \u001b[39m | \u001b[39m57.67    \u001b[39m | \u001b[39m44.27    \u001b[39m | \u001b[39m-32.85   \u001b[39m |\n","| \u001b[39m51       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m38.18    \u001b[39m | \u001b[39m19.25    \u001b[39m | \u001b[39m0.002055 \u001b[39m | \u001b[39m-60.24   \u001b[39m | \u001b[39m31.5     \u001b[39m | \u001b[39m49.39    \u001b[39m | \u001b[39m-22.41   \u001b[39m |\n","| \u001b[39m52       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m34.37    \u001b[39m | \u001b[39m26.6     \u001b[39m | \u001b[39m0.003542 \u001b[39m | \u001b[39m-73.53   \u001b[39m | \u001b[39m58.86    \u001b[39m | \u001b[39m35.68    \u001b[39m | \u001b[39m-30.4    \u001b[39m |\n","| \u001b[39m53       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m55.52    \u001b[39m | \u001b[39m33.6     \u001b[39m | \u001b[39m0.003124 \u001b[39m | \u001b[39m-52.72   \u001b[39m | \u001b[39m48.63    \u001b[39m | \u001b[39m23.12    \u001b[39m | \u001b[39m-44.17   \u001b[39m |\n","| \u001b[39m54       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m55.69    \u001b[39m | \u001b[39m21.59    \u001b[39m | \u001b[39m0.00345  \u001b[39m | \u001b[39m-58.73   \u001b[39m | \u001b[39m27.92    \u001b[39m | \u001b[39m48.61    \u001b[39m | \u001b[39m-48.46   \u001b[39m |\n","| \u001b[39m55       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m48.05    \u001b[39m | \u001b[39m32.44    \u001b[39m | \u001b[39m0.00341  \u001b[39m | \u001b[39m-68.87   \u001b[39m | \u001b[39m42.84    \u001b[39m | \u001b[39m28.78    \u001b[39m | \u001b[39m-43.64   \u001b[39m |\n","| \u001b[39m56       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m41.22    \u001b[39m | \u001b[39m27.61    \u001b[39m | \u001b[39m0.00398  \u001b[39m | \u001b[39m-71.88   \u001b[39m | \u001b[39m46.64    \u001b[39m | \u001b[39m53.09    \u001b[39m | \u001b[39m-32.3    \u001b[39m |\n","| \u001b[39m57       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m48.32    \u001b[39m | \u001b[39m30.69    \u001b[39m | \u001b[39m0.003105 \u001b[39m | \u001b[39m-63.95   \u001b[39m | \u001b[39m42.61    \u001b[39m | \u001b[39m41.61    \u001b[39m | \u001b[39m-28.4    \u001b[39m |\n","| \u001b[39m58       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m57.4     \u001b[39m | \u001b[39m34.13    \u001b[39m | \u001b[39m0.002867 \u001b[39m | \u001b[39m-74.85   \u001b[39m | \u001b[39m56.02    \u001b[39m | \u001b[39m55.57    \u001b[39m | \u001b[39m-34.57   \u001b[39m |\n","| \u001b[39m59       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m49.11    \u001b[39m | \u001b[39m24.93    \u001b[39m | \u001b[39m0.003007 \u001b[39m | \u001b[39m-56.39   \u001b[39m | \u001b[39m27.36    \u001b[39m | \u001b[39m23.77    \u001b[39m | \u001b[39m-41.64   \u001b[39m |\n","| \u001b[39m60       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m30.99    \u001b[39m | \u001b[39m28.4     \u001b[39m | \u001b[39m0.003264 \u001b[39m | \u001b[39m-73.64   \u001b[39m | \u001b[39m32.58    \u001b[39m | \u001b[39m33.26    \u001b[39m | \u001b[39m-41.98   \u001b[39m |\n","| \u001b[39m61       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m23.46    \u001b[39m | \u001b[39m21.67    \u001b[39m | \u001b[39m0.003444 \u001b[39m | \u001b[39m-79.88   \u001b[39m | \u001b[39m22.17    \u001b[39m | \u001b[39m52.67    \u001b[39m | \u001b[39m-33.02   \u001b[39m |\n","| \u001b[39m62       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m33.88    \u001b[39m | \u001b[39m21.14    \u001b[39m | \u001b[39m0.002474 \u001b[39m | \u001b[39m-64.66   \u001b[39m | \u001b[39m32.55    \u001b[39m | \u001b[39m30.07    \u001b[39m | \u001b[39m-49.39   \u001b[39m |\n","| \u001b[39m63       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m40.5     \u001b[39m | \u001b[39m20.07    \u001b[39m | \u001b[39m0.003605 \u001b[39m | \u001b[39m-67.43   \u001b[39m | \u001b[39m26.44    \u001b[39m | \u001b[39m20.95    \u001b[39m | \u001b[39m-43.97   \u001b[39m |\n","| \u001b[39m64       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m56.53    \u001b[39m | \u001b[39m20.47    \u001b[39m | \u001b[39m0.002245 \u001b[39m | \u001b[39m-59.21   \u001b[39m | \u001b[39m53.41    \u001b[39m | \u001b[39m33.04    \u001b[39m | \u001b[39m-23.51   \u001b[39m |\n","| \u001b[39m65       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m54.22    \u001b[39m | \u001b[39m33.87    \u001b[39m | \u001b[39m0.002067 \u001b[39m | \u001b[39m-63.99   \u001b[39m | \u001b[39m38.59    \u001b[39m | \u001b[39m48.6     \u001b[39m | \u001b[39m-23.6    \u001b[39m |\n","| \u001b[39m66       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m24.05    \u001b[39m | \u001b[39m30.67    \u001b[39m | \u001b[39m0.003511 \u001b[39m | \u001b[39m-59.55   \u001b[39m | \u001b[39m28.48    \u001b[39m | \u001b[39m40.13    \u001b[39m | \u001b[39m-22.11   \u001b[39m |\n","| \u001b[39m67       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m49.79    \u001b[39m | \u001b[39m26.69    \u001b[39m | \u001b[39m0.003824 \u001b[39m | \u001b[39m-62.67   \u001b[39m | \u001b[39m44.4     \u001b[39m | \u001b[39m39.45    \u001b[39m | \u001b[39m-22.62   \u001b[39m |\n","| \u001b[39m68       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m36.42    \u001b[39m | \u001b[39m17.25    \u001b[39m | \u001b[39m0.003024 \u001b[39m | \u001b[39m-64.58   \u001b[39m | \u001b[39m28.74    \u001b[39m | \u001b[39m56.08    \u001b[39m | \u001b[39m-38.89   \u001b[39m |\n","| \u001b[39m69       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m34.59    \u001b[39m | \u001b[39m32.0     \u001b[39m | \u001b[39m0.002809 \u001b[39m | \u001b[39m-66.7    \u001b[39m | \u001b[39m27.72    \u001b[39m | \u001b[39m25.36    \u001b[39m | \u001b[39m-47.06   \u001b[39m |\n","| \u001b[39m70       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m58.92    \u001b[39m | \u001b[39m28.49    \u001b[39m | \u001b[39m0.002766 \u001b[39m | \u001b[39m-70.98   \u001b[39m | \u001b[39m35.58    \u001b[39m | \u001b[39m20.81    \u001b[39m | \u001b[39m-49.6    \u001b[39m |\n","| \u001b[39m71       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m36.79    \u001b[39m | \u001b[39m33.67    \u001b[39m | \u001b[39m0.002215 \u001b[39m | \u001b[39m-79.27   \u001b[39m | \u001b[39m27.06    \u001b[39m | \u001b[39m31.62    \u001b[39m | \u001b[39m-20.57   \u001b[39m |\n","| \u001b[39m72       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m27.48    \u001b[39m | \u001b[39m17.42    \u001b[39m | \u001b[39m0.003626 \u001b[39m | \u001b[39m-58.74   \u001b[39m | \u001b[39m58.22    \u001b[39m | \u001b[39m54.06    \u001b[39m | \u001b[39m-27.21   \u001b[39m |\n","| \u001b[39m73       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m58.56    \u001b[39m | \u001b[39m15.51    \u001b[39m | \u001b[39m0.003827 \u001b[39m | \u001b[39m-53.64   \u001b[39m | \u001b[39m55.55    \u001b[39m | \u001b[39m54.66    \u001b[39m | \u001b[39m-29.47   \u001b[39m |\n","| \u001b[39m74       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.42    \u001b[39m | \u001b[39m28.34    \u001b[39m | \u001b[39m0.003979 \u001b[39m | \u001b[39m-69.86   \u001b[39m | \u001b[39m39.98    \u001b[39m | \u001b[39m48.68    \u001b[39m | \u001b[39m-47.14   \u001b[39m |\n","| \u001b[39m75       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m54.99    \u001b[39m | \u001b[39m28.83    \u001b[39m | \u001b[39m0.002086 \u001b[39m | \u001b[39m-73.72   \u001b[39m | \u001b[39m32.91    \u001b[39m | \u001b[39m51.93    \u001b[39m | \u001b[39m-32.54   \u001b[39m |\n","| \u001b[39m76       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m35.47    \u001b[39m | \u001b[39m34.53    \u001b[39m | \u001b[39m0.003071 \u001b[39m | \u001b[39m-60.14   \u001b[39m | \u001b[39m23.25    \u001b[39m | \u001b[39m27.03    \u001b[39m | \u001b[39m-46.62   \u001b[39m |\n","| \u001b[39m77       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m57.11    \u001b[39m | \u001b[39m21.47    \u001b[39m | \u001b[39m0.002954 \u001b[39m | \u001b[39m-79.09   \u001b[39m | \u001b[39m38.09    \u001b[39m | \u001b[39m57.87    \u001b[39m | \u001b[39m-30.32   \u001b[39m |\n","| \u001b[39m78       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m36.46    \u001b[39m | \u001b[39m34.34    \u001b[39m | \u001b[39m0.002524 \u001b[39m | \u001b[39m-76.07   \u001b[39m | \u001b[39m20.11    \u001b[39m | \u001b[39m57.74    \u001b[39m | \u001b[39m-33.98   \u001b[39m |\n","| \u001b[39m79       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m52.44    \u001b[39m | \u001b[39m20.66    \u001b[39m | \u001b[39m0.003369 \u001b[39m | \u001b[39m-67.28   \u001b[39m | \u001b[39m47.27    \u001b[39m | \u001b[39m42.97    \u001b[39m | \u001b[39m-20.84   \u001b[39m |\n","| \u001b[39m80       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m29.35    \u001b[39m | \u001b[39m21.42    \u001b[39m | \u001b[39m0.002688 \u001b[39m | \u001b[39m-71.1    \u001b[39m | \u001b[39m53.61    \u001b[39m | \u001b[39m44.29    \u001b[39m | \u001b[39m-25.0    \u001b[39m |\n","| \u001b[39m81       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m35.73    \u001b[39m | \u001b[39m23.88    \u001b[39m | \u001b[39m0.003531 \u001b[39m | \u001b[39m-70.85   \u001b[39m | \u001b[39m43.76    \u001b[39m | \u001b[39m28.76    \u001b[39m | \u001b[39m-40.46   \u001b[39m |\n","| \u001b[39m82       \u001b[39m | \u001b[39m0.3301   \u001b[39m | \u001b[39m26.0     \u001b[39m | \u001b[39m24.31    \u001b[39m | \u001b[39m0.003667 \u001b[39m | \u001b[39m-59.76   \u001b[39m | \u001b[39m40.9     \u001b[39m | \u001b[39m48.38    \u001b[39m | \u001b[39m-34.76   \u001b[39m |\n","| \u001b[39m83       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m50.56    \u001b[39m | \u001b[39m23.58    \u001b[39m | \u001b[39m0.003038 \u001b[39m | \u001b[39m-73.87   \u001b[39m | \u001b[39m41.93    \u001b[39m | \u001b[39m28.04    \u001b[39m | \u001b[39m-33.82   \u001b[39m |\n","| \u001b[39m84       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m24.95    \u001b[39m | \u001b[39m22.6     \u001b[39m | \u001b[39m0.00265  \u001b[39m | \u001b[39m-78.54   \u001b[39m | \u001b[39m36.04    \u001b[39m | \u001b[39m40.73    \u001b[39m | \u001b[39m-20.62   \u001b[39m |\n","| \u001b[39m85       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m47.94    \u001b[39m | \u001b[39m15.93    \u001b[39m | \u001b[39m0.003242 \u001b[39m | \u001b[39m-77.17   \u001b[39m | \u001b[39m53.72    \u001b[39m | \u001b[39m23.21    \u001b[39m | \u001b[39m-25.93   \u001b[39m |\n","| \u001b[39m86       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m48.99    \u001b[39m | \u001b[39m31.34    \u001b[39m | \u001b[39m0.002036 \u001b[39m | \u001b[39m-54.04   \u001b[39m | \u001b[39m39.78    \u001b[39m | \u001b[39m36.09    \u001b[39m | \u001b[39m-47.42   \u001b[39m |\n","| \u001b[39m87       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m38.21    \u001b[39m | \u001b[39m26.08    \u001b[39m | \u001b[39m0.002495 \u001b[39m | \u001b[39m-52.54   \u001b[39m | \u001b[39m26.36    \u001b[39m | \u001b[39m51.13    \u001b[39m | \u001b[39m-41.51   \u001b[39m |\n","| \u001b[39m88       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m47.01    \u001b[39m | \u001b[39m27.17    \u001b[39m | \u001b[39m0.003348 \u001b[39m | \u001b[39m-58.04   \u001b[39m | \u001b[39m20.24    \u001b[39m | \u001b[39m25.44    \u001b[39m | \u001b[39m-26.02   \u001b[39m |\n","| \u001b[39m89       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m49.68    \u001b[39m | \u001b[39m18.09    \u001b[39m | \u001b[39m0.003473 \u001b[39m | \u001b[39m-67.2    \u001b[39m | \u001b[39m39.14    \u001b[39m | \u001b[39m27.06    \u001b[39m | \u001b[39m-29.04   \u001b[39m |\n","| \u001b[39m90       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m53.1     \u001b[39m | \u001b[39m26.4     \u001b[39m | \u001b[39m0.002516 \u001b[39m | \u001b[39m-76.86   \u001b[39m | \u001b[39m59.0     \u001b[39m | \u001b[39m54.9     \u001b[39m | \u001b[39m-31.81   \u001b[39m |\n","| \u001b[39m91       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m32.04    \u001b[39m | \u001b[39m23.04    \u001b[39m | \u001b[39m0.003899 \u001b[39m | \u001b[39m-67.09   \u001b[39m | \u001b[39m22.37    \u001b[39m | \u001b[39m22.3     \u001b[39m | \u001b[39m-48.08   \u001b[39m |\n","| \u001b[39m92       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m52.17    \u001b[39m | \u001b[39m34.85    \u001b[39m | \u001b[39m0.002595 \u001b[39m | \u001b[39m-79.09   \u001b[39m | \u001b[39m45.5     \u001b[39m | \u001b[39m23.76    \u001b[39m | \u001b[39m-30.1    \u001b[39m |\n","| \u001b[39m93       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m53.26    \u001b[39m | \u001b[39m33.11    \u001b[39m | \u001b[39m0.00339  \u001b[39m | \u001b[39m-51.07   \u001b[39m | \u001b[39m29.69    \u001b[39m | \u001b[39m36.1     \u001b[39m | \u001b[39m-24.72   \u001b[39m |\n","| \u001b[39m94       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m36.45    \u001b[39m | \u001b[39m30.17    \u001b[39m | \u001b[39m0.002243 \u001b[39m | \u001b[39m-52.69   \u001b[39m | \u001b[39m43.95    \u001b[39m | \u001b[39m26.94    \u001b[39m | \u001b[39m-48.02   \u001b[39m |\n","| \u001b[39m95       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m50.73    \u001b[39m | \u001b[39m25.55    \u001b[39m | \u001b[39m0.003452 \u001b[39m | \u001b[39m-61.44   \u001b[39m | \u001b[39m47.26    \u001b[39m | \u001b[39m42.16    \u001b[39m | \u001b[39m-30.84   \u001b[39m |\n","| \u001b[39m96       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m29.39    \u001b[39m | \u001b[39m27.07    \u001b[39m | \u001b[39m0.002854 \u001b[39m | \u001b[39m-67.13   \u001b[39m | \u001b[39m44.55    \u001b[39m | \u001b[39m57.11    \u001b[39m | \u001b[39m-47.8    \u001b[39m |\n","| \u001b[39m97       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m48.32    \u001b[39m | \u001b[39m26.64    \u001b[39m | \u001b[39m0.003802 \u001b[39m | \u001b[39m-67.55   \u001b[39m | \u001b[39m59.84    \u001b[39m | \u001b[39m21.98    \u001b[39m | \u001b[39m-40.57   \u001b[39m |\n","| \u001b[39m98       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m31.2     \u001b[39m | \u001b[39m33.39    \u001b[39m | \u001b[39m0.003032 \u001b[39m | \u001b[39m-63.9    \u001b[39m | \u001b[39m56.33    \u001b[39m | \u001b[39m27.98    \u001b[39m | \u001b[39m-41.43   \u001b[39m |\n","| \u001b[39m99       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m44.89    \u001b[39m | \u001b[39m29.25    \u001b[39m | \u001b[39m0.003046 \u001b[39m | \u001b[39m-75.38   \u001b[39m | \u001b[39m30.54    \u001b[39m | \u001b[39m52.97    \u001b[39m | \u001b[39m-45.98   \u001b[39m |\n","| \u001b[39m100      \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m43.51    \u001b[39m | \u001b[39m30.02    \u001b[39m | \u001b[39m0.002713 \u001b[39m | \u001b[39m-69.34   \u001b[39m | \u001b[39m36.09    \u001b[39m | \u001b[39m43.19    \u001b[39m | \u001b[39m-43.32   \u001b[39m |\n","| \u001b[39m101      \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m51.1     \u001b[39m | \u001b[39m17.66    \u001b[39m | \u001b[39m0.003366 \u001b[39m | \u001b[39m-61.36   \u001b[39m | \u001b[39m34.09    \u001b[39m | \u001b[39m22.57    \u001b[39m | \u001b[39m-31.39   \u001b[39m |\n","| \u001b[39m102      \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.09    \u001b[39m | \u001b[39m24.61    \u001b[39m | \u001b[39m0.002233 \u001b[39m | \u001b[39m-52.97   \u001b[39m | \u001b[39m38.04    \u001b[39m | \u001b[39m33.23    \u001b[39m | \u001b[39m-27.5    \u001b[39m |\n","| \u001b[39m103      \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m32.92    \u001b[39m | \u001b[39m22.73    \u001b[39m | \u001b[39m0.002687 \u001b[39m | \u001b[39m-79.36   \u001b[39m | \u001b[39m48.64    \u001b[39m | \u001b[39m54.03    \u001b[39m | \u001b[39m-23.63   \u001b[39m |\n","| \u001b[39m104      \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m48.81    \u001b[39m | \u001b[39m22.38    \u001b[39m | \u001b[39m0.003109 \u001b[39m | \u001b[39m-50.7    \u001b[39m | \u001b[39m55.6     \u001b[39m | \u001b[39m46.7     \u001b[39m | \u001b[39m-23.0    \u001b[39m |\n","| \u001b[39m105      \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m30.99    \u001b[39m | \u001b[39m16.15    \u001b[39m | \u001b[39m0.003458 \u001b[39m | \u001b[39m-73.36   \u001b[39m | \u001b[39m44.83    \u001b[39m | \u001b[39m44.44    \u001b[39m | \u001b[39m-27.14   \u001b[39m |\n","| \u001b[39m106      \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m43.04    \u001b[39m | \u001b[39m22.28    \u001b[39m | \u001b[39m0.002356 \u001b[39m | \u001b[39m-78.7    \u001b[39m | \u001b[39m36.98    \u001b[39m | \u001b[39m45.77    \u001b[39m | \u001b[39m-46.49   \u001b[39m |\n","| \u001b[39m107      \u001b[39m | \u001b[39m-0.01999 \u001b[39m | \u001b[39m24.0     \u001b[39m | \u001b[39m23.3     \u001b[39m | \u001b[39m0.002601 \u001b[39m | \u001b[39m-51.31   \u001b[39m | \u001b[39m39.34    \u001b[39m | \u001b[39m36.67    \u001b[39m | \u001b[39m-30.5    \u001b[39m |\n","| \u001b[39m108      \u001b[39m | \u001b[39m0.3016   \u001b[39m | \u001b[39m30.01    \u001b[39m | \u001b[39m28.51    \u001b[39m | \u001b[39m0.003602 \u001b[39m | \u001b[39m-52.03   \u001b[39m | \u001b[39m36.77    \u001b[39m | \u001b[39m29.57    \u001b[39m | \u001b[39m-24.9    \u001b[39m |\n","| \u001b[39m109      \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m43.84    \u001b[39m | \u001b[39m17.88    \u001b[39m | \u001b[39m0.003987 \u001b[39m | \u001b[39m-78.82   \u001b[39m | \u001b[39m51.36    \u001b[39m | \u001b[39m50.72    \u001b[39m | \u001b[39m-27.07   \u001b[39m |\n","| \u001b[39m110      \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m51.07    \u001b[39m | \u001b[39m16.72    \u001b[39m | \u001b[39m0.002359 \u001b[39m | \u001b[39m-52.29   \u001b[39m | \u001b[39m32.52    \u001b[39m | \u001b[39m51.38    \u001b[39m | \u001b[39m-47.03   \u001b[39m |\n","=============================================================================================================\n","\n","1. 參數組合: {'ma_short': 34, 'ma_long': 35, 'will_period_1': 26, 'will_buy_threshold_1': -62, 'will_period_2': 26, 'will_sell_threshold_2': -48, 'stop_loss': np.float64(0.0034639878836228103)}\n","   交易次數: 26\n","   最終資金: 1056898.70\n","   勝率: 0.6538\n","   中位數回報 (Median Return): 1514.75\n","   中位數絕對偏差 (MAD): 4292.97\n","   穩健夏普比率 (MSR): 0.3528\n","   夏普比率 (Sharpe Ratio): 0.1743\n","   回報分佈統計:\n","     均值 (Mean): 2267.26\n","     標準差 (Std): 13011.39\n","     最小值 (Min): -22879.00\n","     最大值 (Max): 51717.46\n","   平均交易時長 (K 棒數): 2.31\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 6.00\n","   出場原因統計: {'death_cross': 20, 'williams_overbought': 5, 'stop_loss': 1}\n","\n","2. 參數組合: {'ma_short': 24, 'ma_long': 26, 'will_period_1': 41, 'will_buy_threshold_1': -60, 'will_period_2': 48, 'will_sell_threshold_2': -35, 'stop_loss': np.float64(0.003666984526468434)}\n","   交易次數: 22\n","   最終資金: 1119865.31\n","   勝率: 0.6364\n","   中位數回報 (Median Return): 1219.97\n","   中位數絕對偏差 (MAD): 3696.04\n","   穩健夏普比率 (MSR): 0.3301\n","   夏普比率 (Sharpe Ratio): 0.3354\n","   回報分佈統計:\n","     均值 (Mean): 5524.16\n","     標準差 (Std): 16469.80\n","     最小值 (Min): -9879.11\n","     最大值 (Max): 66329.69\n","   平均交易時長 (K 棒數): 3.14\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 6.40\n","   出場原因統計: {'death_cross': 20, 'williams_overbought': 2}\n","\n","3. 參數組合: {'ma_short': 29, 'ma_long': 30, 'will_period_1': 37, 'will_buy_threshold_1': -52, 'will_period_2': 30, 'will_sell_threshold_2': -25, 'stop_loss': np.float64(0.0036022205550973923)}\n","   交易次數: 37\n","   最終資金: 1177411.77\n","   勝率: 0.6486\n","   中位數回報 (Median Return): 1329.84\n","   中位數絕對偏差 (MAD): 4409.02\n","   穩健夏普比率 (MSR): 0.3016\n","   夏普比率 (Sharpe Ratio): 0.4005\n","   回報分佈統計:\n","     均值 (Mean): 4873.08\n","     標準差 (Std): 12167.32\n","     最小值 (Min): -24291.22\n","     最大值 (Max): 45704.90\n","   平均交易時長 (K 棒數): 2.32\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 7.00\n","   出場原因統計: {'death_cross': 30, 'williams_overbought': 5, 'stop_loss': 2}\n","\n","4. 參數組合: {'ma_short': 17, 'ma_long': 23, 'will_period_1': 50, 'will_buy_threshold_1': -55, 'will_period_2': 31, 'will_sell_threshold_2': -35, 'stop_loss': np.float64(0.0037928241502823822)}\n","   交易次數: 22\n","   最終資金: 1021639.96\n","   勝率: 0.5909\n","   中位數回報 (Median Return): 622.82\n","   中位數絕對偏差 (MAD): 6200.78\n","   穩健夏普比率 (MSR): 0.1004\n","   夏普比率 (Sharpe Ratio): 0.0723\n","   回報分佈統計:\n","     均值 (Mean): 1059.99\n","     標準差 (Std): 14656.25\n","     最小值 (Min): -21491.43\n","     最大值 (Max): 52329.84\n","   平均交易時長 (K 棒數): 3.23\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 7.00\n","   出場原因統計: {'williams_overbought': 10, 'death_cross': 9, 'stop_loss': 3}\n","\n","5. 參數組合: {'ma_short': 23, 'ma_long': 24, 'will_period_1': 39, 'will_buy_threshold_1': -51, 'will_period_2': 37, 'will_sell_threshold_2': -30, 'stop_loss': np.float64(0.0026008786510223407)}\n","   交易次數: 60\n","   最終資金: 1063726.36\n","   勝率: 0.4833\n","   中位數回報 (Median Return): -75.81\n","   中位數絕對偏差 (MAD): 3793.19\n","   穩健夏普比率 (MSR): -0.0200\n","   夏普比率 (Sharpe Ratio): 0.0910\n","   回報分佈統計:\n","     均值 (Mean): 1139.37\n","     標準差 (Std): 12515.62\n","     最小值 (Min): -23477.68\n","     最大值 (Max): 64329.69\n","   平均交易時長 (K 棒數): 2.42\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 8.80\n","   出場原因統計: {'death_cross': 47, 'williams_overbought': 6, 'stop_loss': 7}\n","\n","策略 2 - 前 5 筆最佳參數組合（貝葉斯優化，成交次數 > 20, 勝率 > 0.3, 最終資金 > 100 萬, 5 筆最長持倉時間平均 > 3，按穩健夏普比率從高到低排序）：\n","|   iter    |  target   |  ma_long  | ma_short  | stop_loss | will_b... | will_p... | will_p... | will_s... |\n","-------------------------------------------------------------------------------------------------------------\n","| \u001b[39m1        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m34.98    \u001b[39m | \u001b[39m34.01    \u001b[39m | \u001b[39m0.003464 \u001b[39m | \u001b[39m-62.04   \u001b[39m | \u001b[39m26.24    \u001b[39m | \u001b[39m26.24    \u001b[39m | \u001b[39m-48.26   \u001b[39m |\n","| \u001b[39m2        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m54.65    \u001b[39m | \u001b[39m27.02    \u001b[39m | \u001b[39m0.003416 \u001b[39m | \u001b[39m-79.38   \u001b[39m | \u001b[39m58.8     \u001b[39m | \u001b[39m53.3     \u001b[39m | \u001b[39m-43.63   \u001b[39m |\n","| \u001b[39m3        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m27.27    \u001b[39m | \u001b[39m18.67    \u001b[39m | \u001b[39m0.002608 \u001b[39m | \u001b[39m-64.26   \u001b[39m | \u001b[39m37.28    \u001b[39m | \u001b[39m31.65    \u001b[39m | \u001b[39m-31.64   \u001b[39m |\n","| \u001b[39m4        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m25.58    \u001b[39m | \u001b[39m20.84    \u001b[39m | \u001b[39m0.002733 \u001b[39m | \u001b[39m-66.32   \u001b[39m | \u001b[39m51.41    \u001b[39m | \u001b[39m27.99    \u001b[39m | \u001b[39m-34.57   \u001b[39m |\n","| \u001b[39m5        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m43.7     \u001b[39m | \u001b[39m15.93    \u001b[39m | \u001b[39m0.003215 \u001b[39m | \u001b[39m-74.88   \u001b[39m | \u001b[39m22.6     \u001b[39m | \u001b[39m57.96    \u001b[39m | \u001b[39m-21.03   \u001b[39m |\n","| \u001b[39m6        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m52.34    \u001b[39m | \u001b[39m21.09    \u001b[39m | \u001b[39m0.002195 \u001b[39m | \u001b[39m-59.47   \u001b[39m | \u001b[39m37.61    \u001b[39m | \u001b[39m24.88    \u001b[39m | \u001b[39m-35.14   \u001b[39m |\n","| \u001b[39m7        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m21.38    \u001b[39m | \u001b[39m33.19    \u001b[39m | \u001b[39m0.002518 \u001b[39m | \u001b[39m-60.12   \u001b[39m | \u001b[39m32.47    \u001b[39m | \u001b[39m40.8     \u001b[39m | \u001b[39m-33.6    \u001b[39m |\n","| \u001b[39m8        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m27.39    \u001b[39m | \u001b[39m34.39    \u001b[39m | \u001b[39m0.00355  \u001b[39m | \u001b[39m-51.82   \u001b[39m | \u001b[39m55.79    \u001b[39m | \u001b[39m43.92    \u001b[39m | \u001b[39m-22.34   \u001b[39m |\n","| \u001b[39m9        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m23.54    \u001b[39m | \u001b[39m18.92    \u001b[39m | \u001b[39m0.00209  \u001b[39m | \u001b[39m-70.24   \u001b[39m | \u001b[39m35.55    \u001b[39m | \u001b[39m30.85    \u001b[39m | \u001b[39m-25.14   \u001b[39m |\n","| \u001b[39m10       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m34.27    \u001b[39m | \u001b[39m20.62    \u001b[39m | \u001b[39m0.003085 \u001b[39m | \u001b[39m-75.77   \u001b[39m | \u001b[39m52.09    \u001b[39m | \u001b[39m22.98    \u001b[39m | \u001b[39m-20.39   \u001b[39m |\n","| \u001b[39m11       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m57.87    \u001b[39m | \u001b[39m17.01    \u001b[39m | \u001b[39m0.002311 \u001b[39m | \u001b[39m-51.2    \u001b[39m | \u001b[39m21.51    \u001b[39m | \u001b[39m59.11    \u001b[39m | \u001b[39m-49.86   \u001b[39m |\n","| \u001b[39m12       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m59.99    \u001b[39m | \u001b[39m21.79    \u001b[39m | \u001b[39m0.003748 \u001b[39m | \u001b[39m-54.2    \u001b[39m | \u001b[39m59.33    \u001b[39m | \u001b[39m59.37    \u001b[39m | \u001b[39m-20.24   \u001b[39m |\n","| \u001b[39m13       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.65    \u001b[39m | \u001b[39m34.04    \u001b[39m | \u001b[39m0.003723 \u001b[39m | \u001b[39m-77.4    \u001b[39m | \u001b[39m57.99    \u001b[39m | \u001b[39m59.09    \u001b[39m | \u001b[39m-49.96   \u001b[39m |\n","| \u001b[39m14       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m58.84    \u001b[39m | \u001b[39m32.83    \u001b[39m | \u001b[39m0.002401 \u001b[39m | \u001b[39m-79.19   \u001b[39m | \u001b[39m21.58    \u001b[39m | \u001b[39m20.41    \u001b[39m | \u001b[39m-34.53   \u001b[39m |\n","| \u001b[39m15       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m52.43    \u001b[39m | \u001b[39m16.51    \u001b[39m | \u001b[39m0.002829 \u001b[39m | \u001b[39m-51.03   \u001b[39m | \u001b[39m58.8     \u001b[39m | \u001b[39m21.21    \u001b[39m | \u001b[39m-49.95   \u001b[39m |\n","| \u001b[39m16       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m22.71    \u001b[39m | \u001b[39m32.96    \u001b[39m | \u001b[39m0.003093 \u001b[39m | \u001b[39m-78.14   \u001b[39m | \u001b[39m22.01    \u001b[39m | \u001b[39m58.28    \u001b[39m | \u001b[39m-25.15   \u001b[39m |\n","| \u001b[39m17       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m59.76    \u001b[39m | \u001b[39m31.36    \u001b[39m | \u001b[39m0.00287  \u001b[39m | \u001b[39m-76.52   \u001b[39m | \u001b[39m59.88    \u001b[39m | \u001b[39m22.99    \u001b[39m | \u001b[39m-23.08   \u001b[39m |\n","| \u001b[39m18       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m22.15    \u001b[39m | \u001b[39m33.99    \u001b[39m | \u001b[39m0.002079 \u001b[39m | \u001b[39m-50.32   \u001b[39m | \u001b[39m22.02    \u001b[39m | \u001b[39m57.41    \u001b[39m | \u001b[39m-20.86   \u001b[39m |\n","| \u001b[39m19       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m59.05    \u001b[39m | \u001b[39m29.0     \u001b[39m | \u001b[39m0.003806 \u001b[39m | \u001b[39m-66.66   \u001b[39m | \u001b[39m36.32    \u001b[39m | \u001b[39m29.62    \u001b[39m | \u001b[39m-44.63   \u001b[39m |\n","| \u001b[39m20       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.92    \u001b[39m | \u001b[39m22.45    \u001b[39m | \u001b[39m0.002737 \u001b[39m | \u001b[39m-74.5    \u001b[39m | \u001b[39m57.88    \u001b[39m | \u001b[39m57.9     \u001b[39m | \u001b[39m-48.94   \u001b[39m |\n","| \u001b[39m21       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m59.42    \u001b[39m | \u001b[39m29.33    \u001b[39m | \u001b[39m0.003267 \u001b[39m | \u001b[39m-50.34   \u001b[39m | \u001b[39m57.39    \u001b[39m | \u001b[39m59.35    \u001b[39m | \u001b[39m-46.46   \u001b[39m |\n","| \u001b[39m22       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.79    \u001b[39m | \u001b[39m22.43    \u001b[39m | \u001b[39m0.002419 \u001b[39m | \u001b[39m-51.31   \u001b[39m | \u001b[39m20.82    \u001b[39m | \u001b[39m25.17    \u001b[39m | \u001b[39m-48.76   \u001b[39m |\n","| \u001b[39m23       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m55.45    \u001b[39m | \u001b[39m15.1     \u001b[39m | \u001b[39m0.002319 \u001b[39m | \u001b[39m-50.18   \u001b[39m | \u001b[39m20.2     \u001b[39m | \u001b[39m59.14    \u001b[39m | \u001b[39m-49.02   \u001b[39m |\n","| \u001b[39m24       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m22.99    \u001b[39m | \u001b[39m32.67    \u001b[39m | \u001b[39m0.003164 \u001b[39m | \u001b[39m-51.93   \u001b[39m | \u001b[39m59.28    \u001b[39m | \u001b[39m21.42    \u001b[39m | \u001b[39m-46.9    \u001b[39m |\n","| \u001b[39m25       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.16    \u001b[39m | \u001b[39m16.94    \u001b[39m | \u001b[39m0.002431 \u001b[39m | \u001b[39m-79.16   \u001b[39m | \u001b[39m20.41    \u001b[39m | \u001b[39m23.56    \u001b[39m | \u001b[39m-44.72   \u001b[39m |\n","| \u001b[39m26       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m59.95    \u001b[39m | \u001b[39m34.7     \u001b[39m | \u001b[39m0.002265 \u001b[39m | \u001b[39m-52.76   \u001b[39m | \u001b[39m23.97    \u001b[39m | \u001b[39m21.57    \u001b[39m | \u001b[39m-23.39   \u001b[39m |\n","| \u001b[39m27       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m58.22    \u001b[39m | \u001b[39m32.86    \u001b[39m | \u001b[39m0.002693 \u001b[39m | \u001b[39m-77.69   \u001b[39m | \u001b[39m21.81    \u001b[39m | \u001b[39m56.01    \u001b[39m | \u001b[39m-22.74   \u001b[39m |\n","| \u001b[39m28       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m59.77    \u001b[39m | \u001b[39m19.49    \u001b[39m | \u001b[39m0.003818 \u001b[39m | \u001b[39m-51.11   \u001b[39m | \u001b[39m20.11    \u001b[39m | \u001b[39m22.6     \u001b[39m | \u001b[39m-21.08   \u001b[39m |\n","| \u001b[39m29       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m58.13    \u001b[39m | \u001b[39m16.6     \u001b[39m | \u001b[39m0.003773 \u001b[39m | \u001b[39m-79.26   \u001b[39m | \u001b[39m57.16    \u001b[39m | \u001b[39m21.22    \u001b[39m | \u001b[39m-21.49   \u001b[39m |\n","| \u001b[39m30       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m23.3     \u001b[39m | \u001b[39m16.61    \u001b[39m | \u001b[39m0.002786 \u001b[39m | \u001b[39m-76.85   \u001b[39m | \u001b[39m58.64    \u001b[39m | \u001b[39m57.59    \u001b[39m | \u001b[39m-21.23   \u001b[39m |\n","| \u001b[39m31       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.05    \u001b[39m | \u001b[39m16.3     \u001b[39m | \u001b[39m0.003214 \u001b[39m | \u001b[39m-79.25   \u001b[39m | \u001b[39m21.64    \u001b[39m | \u001b[39m59.76    \u001b[39m | \u001b[39m-43.43   \u001b[39m |\n","| \u001b[39m32       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m54.28    \u001b[39m | \u001b[39m31.53    \u001b[39m | \u001b[39m0.002303 \u001b[39m | \u001b[39m-78.72   \u001b[39m | \u001b[39m20.48    \u001b[39m | \u001b[39m59.77    \u001b[39m | \u001b[39m-49.33   \u001b[39m |\n","| \u001b[39m33       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m22.95    \u001b[39m | \u001b[39m34.69    \u001b[39m | \u001b[39m0.002145 \u001b[39m | \u001b[39m-51.11   \u001b[39m | \u001b[39m20.15    \u001b[39m | \u001b[39m20.23    \u001b[39m | \u001b[39m-21.37   \u001b[39m |\n","| \u001b[39m34       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m56.88    \u001b[39m | \u001b[39m16.41    \u001b[39m | \u001b[39m0.003571 \u001b[39m | \u001b[39m-75.94   \u001b[39m | \u001b[39m59.36    \u001b[39m | \u001b[39m21.91    \u001b[39m | \u001b[39m-48.96   \u001b[39m |\n","| \u001b[39m35       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m50.92    \u001b[39m | \u001b[39m20.92    \u001b[39m | \u001b[39m0.002187 \u001b[39m | \u001b[39m-51.14   \u001b[39m | \u001b[39m59.35    \u001b[39m | \u001b[39m58.26    \u001b[39m | \u001b[39m-20.11   \u001b[39m |\n","| \u001b[39m36       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m58.09    \u001b[39m | \u001b[39m33.05    \u001b[39m | \u001b[39m0.003668 \u001b[39m | \u001b[39m-79.39   \u001b[39m | \u001b[39m21.53    \u001b[39m | \u001b[39m58.18    \u001b[39m | \u001b[39m-46.6    \u001b[39m |\n","| \u001b[39m37       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.24    \u001b[39m | \u001b[39m18.49    \u001b[39m | \u001b[39m0.003563 \u001b[39m | \u001b[39m-79.57   \u001b[39m | \u001b[39m20.03    \u001b[39m | \u001b[39m21.41    \u001b[39m | \u001b[39m-20.11   \u001b[39m |\n","| \u001b[35m38       \u001b[39m | \u001b[35m-0.1029  \u001b[39m | \u001b[35m22.25    \u001b[39m | \u001b[35m16.29    \u001b[39m | \u001b[35m0.002971 \u001b[39m | \u001b[35m-51.04   \u001b[39m | \u001b[35m52.05    \u001b[39m | \u001b[35m57.77    \u001b[39m | \u001b[35m-20.14   \u001b[39m |\n","| \u001b[39m39       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m25.38    \u001b[39m | \u001b[39m17.61    \u001b[39m | \u001b[39m0.003017 \u001b[39m | \u001b[39m-54.35   \u001b[39m | \u001b[39m54.84    \u001b[39m | \u001b[39m55.44    \u001b[39m | \u001b[39m-23.46   \u001b[39m |\n","| \u001b[35m40       \u001b[39m | \u001b[35m-0.09565 \u001b[39m | \u001b[35m22.47    \u001b[39m | \u001b[35m15.42    \u001b[39m | \u001b[35m0.002764 \u001b[39m | \u001b[35m-50.07   \u001b[39m | \u001b[35m49.64    \u001b[39m | \u001b[35m58.89    \u001b[39m | \u001b[35m-24.01   \u001b[39m |\n","| \u001b[35m41       \u001b[39m | \u001b[35m-0.03197 \u001b[39m | \u001b[35m20.79    \u001b[39m | \u001b[35m16.76    \u001b[39m | \u001b[35m0.002788 \u001b[39m | \u001b[35m-53.83   \u001b[39m | \u001b[35m42.73    \u001b[39m | \u001b[35m57.96    \u001b[39m | \u001b[35m-23.85   \u001b[39m |\n","| \u001b[39m42       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.36    \u001b[39m | \u001b[39m19.55    \u001b[39m | \u001b[39m0.00218  \u001b[39m | \u001b[39m-51.23   \u001b[39m | \u001b[39m40.61    \u001b[39m | \u001b[39m58.58    \u001b[39m | \u001b[39m-23.22   \u001b[39m |\n","| \u001b[39m43       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m22.52    \u001b[39m | \u001b[39m15.06    \u001b[39m | \u001b[39m0.002959 \u001b[39m | \u001b[39m-52.13   \u001b[39m | \u001b[39m41.14    \u001b[39m | \u001b[39m55.67    \u001b[39m | \u001b[39m-23.29   \u001b[39m |\n","| \u001b[39m44       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m25.47    \u001b[39m | \u001b[39m16.4     \u001b[39m | \u001b[39m0.002714 \u001b[39m | \u001b[39m-53.73   \u001b[39m | \u001b[39m47.53    \u001b[39m | \u001b[39m55.95    \u001b[39m | \u001b[39m-25.75   \u001b[39m |\n","| \u001b[39m45       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m24.56    \u001b[39m | \u001b[39m18.57    \u001b[39m | \u001b[39m0.003167 \u001b[39m | \u001b[39m-53.47   \u001b[39m | \u001b[39m43.0     \u001b[39m | \u001b[39m59.23    \u001b[39m | \u001b[39m-22.36   \u001b[39m |\n","| \u001b[35m46       \u001b[39m | \u001b[35m0.1158   \u001b[39m | \u001b[35m22.43    \u001b[39m | \u001b[35m16.71    \u001b[39m | \u001b[35m0.002826 \u001b[39m | \u001b[35m-52.17   \u001b[39m | \u001b[35m44.09    \u001b[39m | \u001b[35m59.7     \u001b[39m | \u001b[35m-26.18   \u001b[39m |\n","| \u001b[39m47       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m22.79    \u001b[39m | \u001b[39m17.12    \u001b[39m | \u001b[39m0.002384 \u001b[39m | \u001b[39m-53.75   \u001b[39m | \u001b[39m42.92    \u001b[39m | \u001b[39m58.48    \u001b[39m | \u001b[39m-28.85   \u001b[39m |\n","| \u001b[39m48       \u001b[39m | \u001b[39m0.01127  \u001b[39m | \u001b[39m22.95    \u001b[39m | \u001b[39m15.1     \u001b[39m | \u001b[39m0.003841 \u001b[39m | \u001b[39m-50.97   \u001b[39m | \u001b[39m50.26    \u001b[39m | \u001b[39m58.99    \u001b[39m | \u001b[39m-29.99   \u001b[39m |\n","| \u001b[39m49       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.69    \u001b[39m | \u001b[39m25.14    \u001b[39m | \u001b[39m0.002572 \u001b[39m | \u001b[39m-51.45   \u001b[39m | \u001b[39m47.92    \u001b[39m | \u001b[39m56.09    \u001b[39m | \u001b[39m-26.11   \u001b[39m |\n","| \u001b[39m50       \u001b[39m | \u001b[39m-0.122   \u001b[39m | \u001b[39m20.41    \u001b[39m | \u001b[39m15.52    \u001b[39m | \u001b[39m0.00274  \u001b[39m | \u001b[39m-51.14   \u001b[39m | \u001b[39m42.77    \u001b[39m | \u001b[39m55.15    \u001b[39m | \u001b[39m-24.92   \u001b[39m |\n","| \u001b[39m51       \u001b[39m | \u001b[39m-0.2251  \u001b[39m | \u001b[39m21.12    \u001b[39m | \u001b[39m16.37    \u001b[39m | \u001b[39m0.00348  \u001b[39m | \u001b[39m-50.86   \u001b[39m | \u001b[39m44.03    \u001b[39m | \u001b[39m54.06    \u001b[39m | \u001b[39m-23.38   \u001b[39m |\n","| \u001b[39m52       \u001b[39m | \u001b[39m-0.05207 \u001b[39m | \u001b[39m22.28    \u001b[39m | \u001b[39m20.17    \u001b[39m | \u001b[39m0.003419 \u001b[39m | \u001b[39m-52.38   \u001b[39m | \u001b[39m41.52    \u001b[39m | \u001b[39m54.43    \u001b[39m | \u001b[39m-25.45   \u001b[39m |\n","| \u001b[39m53       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m26.45    \u001b[39m | \u001b[39m18.27    \u001b[39m | \u001b[39m0.002392 \u001b[39m | \u001b[39m-50.41   \u001b[39m | \u001b[39m48.16    \u001b[39m | \u001b[39m58.95    \u001b[39m | \u001b[39m-29.7    \u001b[39m |\n","| \u001b[39m54       \u001b[39m | \u001b[39m0.06957  \u001b[39m | \u001b[39m22.18    \u001b[39m | \u001b[39m16.26    \u001b[39m | \u001b[39m0.002895 \u001b[39m | \u001b[39m-50.74   \u001b[39m | \u001b[39m41.18    \u001b[39m | \u001b[39m52.13    \u001b[39m | \u001b[39m-26.46   \u001b[39m |\n","| \u001b[39m55       \u001b[39m | \u001b[39m-0.08227 \u001b[39m | \u001b[39m21.48    \u001b[39m | \u001b[39m19.98    \u001b[39m | \u001b[39m0.002394 \u001b[39m | \u001b[39m-53.19   \u001b[39m | \u001b[39m46.79    \u001b[39m | \u001b[39m54.96    \u001b[39m | \u001b[39m-20.61   \u001b[39m |\n","| \u001b[39m56       \u001b[39m | \u001b[39m-0.01254 \u001b[39m | \u001b[39m22.73    \u001b[39m | \u001b[39m17.0     \u001b[39m | \u001b[39m0.002978 \u001b[39m | \u001b[39m-50.33   \u001b[39m | \u001b[39m52.04    \u001b[39m | \u001b[39m59.86    \u001b[39m | \u001b[39m-28.08   \u001b[39m |\n","| \u001b[39m57       \u001b[39m | \u001b[39m-0.2777  \u001b[39m | \u001b[39m23.34    \u001b[39m | \u001b[39m22.04    \u001b[39m | \u001b[39m0.002112 \u001b[39m | \u001b[39m-53.41   \u001b[39m | \u001b[39m44.61    \u001b[39m | \u001b[39m54.88    \u001b[39m | \u001b[39m-22.77   \u001b[39m |\n","| \u001b[39m58       \u001b[39m | \u001b[39m-0.04204 \u001b[39m | \u001b[39m20.77    \u001b[39m | \u001b[39m18.85    \u001b[39m | \u001b[39m0.003999 \u001b[39m | \u001b[39m-52.03   \u001b[39m | \u001b[39m45.9     \u001b[39m | \u001b[39m54.27    \u001b[39m | \u001b[39m-20.04   \u001b[39m |\n","| \u001b[39m59       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m21.99    \u001b[39m | \u001b[39m24.77    \u001b[39m | \u001b[39m0.002804 \u001b[39m | \u001b[39m-54.42   \u001b[39m | \u001b[39m42.02    \u001b[39m | \u001b[39m54.54    \u001b[39m | \u001b[39m-20.24   \u001b[39m |\n","| \u001b[39m60       \u001b[39m | \u001b[39m-0.00948 \u001b[39m | \u001b[39m21.5     \u001b[39m | \u001b[39m16.36    \u001b[39m | \u001b[39m0.003803 \u001b[39m | \u001b[39m-51.75   \u001b[39m | \u001b[39m54.16    \u001b[39m | \u001b[39m56.17    \u001b[39m | \u001b[39m-23.22   \u001b[39m |\n","| \u001b[39m61       \u001b[39m | \u001b[39m-0.1532  \u001b[39m | \u001b[39m20.85    \u001b[39m | \u001b[39m16.41    \u001b[39m | \u001b[39m0.002834 \u001b[39m | \u001b[39m-50.13   \u001b[39m | \u001b[39m45.55    \u001b[39m | \u001b[39m56.02    \u001b[39m | \u001b[39m-27.76   \u001b[39m |\n","| \u001b[39m62       \u001b[39m | \u001b[39m-0.175   \u001b[39m | \u001b[39m21.33    \u001b[39m | \u001b[39m16.97    \u001b[39m | \u001b[39m0.003178 \u001b[39m | \u001b[39m-53.75   \u001b[39m | \u001b[39m44.99    \u001b[39m | \u001b[39m55.47    \u001b[39m | \u001b[39m-22.4    \u001b[39m |\n","| \u001b[39m63       \u001b[39m | \u001b[39m0.04998  \u001b[39m | \u001b[39m22.59    \u001b[39m | \u001b[39m17.2     \u001b[39m | \u001b[39m0.003519 \u001b[39m | \u001b[39m-53.8    \u001b[39m | \u001b[39m51.28    \u001b[39m | \u001b[39m57.19    \u001b[39m | \u001b[39m-23.49   \u001b[39m |\n","| \u001b[39m64       \u001b[39m | \u001b[39m-0.103   \u001b[39m | \u001b[39m24.26    \u001b[39m | \u001b[39m22.26    \u001b[39m | \u001b[39m0.00374  \u001b[39m | \u001b[39m-54.49   \u001b[39m | \u001b[39m44.87    \u001b[39m | \u001b[39m53.16    \u001b[39m | \u001b[39m-25.55   \u001b[39m |\n","| \u001b[39m65       \u001b[39m | \u001b[39m-0.07954 \u001b[39m | \u001b[39m20.26    \u001b[39m | \u001b[39m16.1     \u001b[39m | \u001b[39m0.002991 \u001b[39m | \u001b[39m-51.23   \u001b[39m | \u001b[39m47.24    \u001b[39m | \u001b[39m51.05    \u001b[39m | \u001b[39m-24.24   \u001b[39m |\n","| \u001b[39m66       \u001b[39m | \u001b[39m0.02182  \u001b[39m | \u001b[39m20.46    \u001b[39m | \u001b[39m18.52    \u001b[39m | \u001b[39m0.003242 \u001b[39m | \u001b[39m-54.53   \u001b[39m | \u001b[39m42.04    \u001b[39m | \u001b[39m51.04    \u001b[39m | \u001b[39m-26.81   \u001b[39m |\n","| \u001b[39m67       \u001b[39m | \u001b[39m-0.0407  \u001b[39m | \u001b[39m23.64    \u001b[39m | \u001b[39m19.79    \u001b[39m | \u001b[39m0.002606 \u001b[39m | \u001b[39m-55.4    \u001b[39m | \u001b[39m43.45    \u001b[39m | \u001b[39m47.56    \u001b[39m | \u001b[39m-21.05   \u001b[39m |\n","| \u001b[39m68       \u001b[39m | \u001b[39m-0.1932  \u001b[39m | \u001b[39m20.51    \u001b[39m | \u001b[39m15.38    \u001b[39m | \u001b[39m0.002159 \u001b[39m | \u001b[39m-53.98   \u001b[39m | \u001b[39m50.3     \u001b[39m | \u001b[39m56.86    \u001b[39m | \u001b[39m-25.65   \u001b[39m |\n","| \u001b[39m69       \u001b[39m | \u001b[39m-0.2291  \u001b[39m | \u001b[39m21.74    \u001b[39m | \u001b[39m21.33    \u001b[39m | \u001b[39m0.003787 \u001b[39m | \u001b[39m-51.7    \u001b[39m | \u001b[39m44.76    \u001b[39m | \u001b[39m45.11    \u001b[39m | \u001b[39m-21.89   \u001b[39m |\n","| \u001b[39m70       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.4     \u001b[39m | \u001b[39m20.86    \u001b[39m | \u001b[39m0.003759 \u001b[39m | \u001b[39m-52.13   \u001b[39m | \u001b[39m50.55    \u001b[39m | \u001b[39m52.97    \u001b[39m | \u001b[39m-20.66   \u001b[39m |\n","| \u001b[39m71       \u001b[39m | \u001b[39m-0.08141 \u001b[39m | \u001b[39m24.11    \u001b[39m | \u001b[39m20.4     \u001b[39m | \u001b[39m0.003622 \u001b[39m | \u001b[39m-51.27   \u001b[39m | \u001b[39m42.47    \u001b[39m | \u001b[39m53.24    \u001b[39m | \u001b[39m-24.35   \u001b[39m |\n","| \u001b[39m72       \u001b[39m | \u001b[39m0.07158  \u001b[39m | \u001b[39m27.36    \u001b[39m | \u001b[39m21.53    \u001b[39m | \u001b[39m0.003218 \u001b[39m | \u001b[39m-51.54   \u001b[39m | \u001b[39m41.77    \u001b[39m | \u001b[39m48.82    \u001b[39m | \u001b[39m-23.49   \u001b[39m |\n","| \u001b[39m73       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m22.21    \u001b[39m | \u001b[39m22.86    \u001b[39m | \u001b[39m0.002673 \u001b[39m | \u001b[39m-51.79   \u001b[39m | \u001b[39m39.96    \u001b[39m | \u001b[39m49.17    \u001b[39m | \u001b[39m-27.11   \u001b[39m |\n","| \u001b[39m74       \u001b[39m | \u001b[39m-0.06806 \u001b[39m | \u001b[39m20.03    \u001b[39m | \u001b[39m18.92    \u001b[39m | \u001b[39m0.003895 \u001b[39m | \u001b[39m-50.1    \u001b[39m | \u001b[39m48.4     \u001b[39m | \u001b[39m55.1     \u001b[39m | \u001b[39m-23.62   \u001b[39m |\n","| \u001b[39m75       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m31.34    \u001b[39m | \u001b[39m22.73    \u001b[39m | \u001b[39m0.003961 \u001b[39m | \u001b[39m-54.84   \u001b[39m | \u001b[39m43.35    \u001b[39m | \u001b[39m50.64    \u001b[39m | \u001b[39m-24.74   \u001b[39m |\n","| \u001b[39m76       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m28.42    \u001b[39m | \u001b[39m17.85    \u001b[39m | \u001b[39m0.003833 \u001b[39m | \u001b[39m-50.93   \u001b[39m | \u001b[39m42.94    \u001b[39m | \u001b[39m47.39    \u001b[39m | \u001b[39m-22.48   \u001b[39m |\n","| \u001b[39m77       \u001b[39m | \u001b[39m0.01913  \u001b[39m | \u001b[39m20.86    \u001b[39m | \u001b[39m18.71    \u001b[39m | \u001b[39m0.002958 \u001b[39m | \u001b[39m-53.26   \u001b[39m | \u001b[39m45.69    \u001b[39m | \u001b[39m45.21    \u001b[39m | \u001b[39m-21.37   \u001b[39m |\n","| \u001b[39m78       \u001b[39m | \u001b[39m-0.06156 \u001b[39m | \u001b[39m22.95    \u001b[39m | \u001b[39m19.1     \u001b[39m | \u001b[39m0.003982 \u001b[39m | \u001b[39m-55.5    \u001b[39m | \u001b[39m47.77    \u001b[39m | \u001b[39m48.16    \u001b[39m | \u001b[39m-22.37   \u001b[39m |\n","| \u001b[39m79       \u001b[39m | \u001b[39m0.07879  \u001b[39m | \u001b[39m22.17    \u001b[39m | \u001b[39m20.47    \u001b[39m | \u001b[39m0.002372 \u001b[39m | \u001b[39m-57.32   \u001b[39m | \u001b[39m46.84    \u001b[39m | \u001b[39m50.99    \u001b[39m | \u001b[39m-24.96   \u001b[39m |\n","| \u001b[39m80       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m22.21    \u001b[39m | \u001b[39m21.88    \u001b[39m | \u001b[39m0.003472 \u001b[39m | \u001b[39m-53.76   \u001b[39m | \u001b[39m46.68    \u001b[39m | \u001b[39m47.95    \u001b[39m | \u001b[39m-26.66   \u001b[39m |\n","| \u001b[39m81       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m24.37    \u001b[39m | \u001b[39m17.29    \u001b[39m | \u001b[39m0.003115 \u001b[39m | \u001b[39m-56.78   \u001b[39m | \u001b[39m48.2     \u001b[39m | \u001b[39m43.3     \u001b[39m | \u001b[39m-21.03   \u001b[39m |\n","| \u001b[39m82       \u001b[39m | \u001b[39m-0.1645  \u001b[39m | \u001b[39m25.44    \u001b[39m | \u001b[39m23.56    \u001b[39m | \u001b[39m0.003096 \u001b[39m | \u001b[39m-54.21   \u001b[39m | \u001b[39m41.33    \u001b[39m | \u001b[39m48.01    \u001b[39m | \u001b[39m-22.33   \u001b[39m |\n","| \u001b[39m83       \u001b[39m | \u001b[39m-0.07714 \u001b[39m | \u001b[39m20.59    \u001b[39m | \u001b[39m18.32    \u001b[39m | \u001b[39m0.002054 \u001b[39m | \u001b[39m-57.92   \u001b[39m | \u001b[39m47.0     \u001b[39m | \u001b[39m53.83    \u001b[39m | \u001b[39m-22.02   \u001b[39m |\n","| \u001b[39m84       \u001b[39m | \u001b[39m0.06598  \u001b[39m | \u001b[39m22.76    \u001b[39m | \u001b[39m18.37    \u001b[39m | \u001b[39m0.002204 \u001b[39m | \u001b[39m-54.38   \u001b[39m | \u001b[39m43.42    \u001b[39m | \u001b[39m51.15    \u001b[39m | \u001b[39m-23.88   \u001b[39m |\n","| \u001b[39m85       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m21.48    \u001b[39m | \u001b[39m21.59    \u001b[39m | \u001b[39m0.00394  \u001b[39m | \u001b[39m-59.85   \u001b[39m | \u001b[39m44.87    \u001b[39m | \u001b[39m51.51    \u001b[39m | \u001b[39m-23.53   \u001b[39m |\n","| \u001b[39m86       \u001b[39m | \u001b[39m-0.03907 \u001b[39m | \u001b[39m21.17    \u001b[39m | \u001b[39m16.41    \u001b[39m | \u001b[39m0.003501 \u001b[39m | \u001b[39m-53.55   \u001b[39m | \u001b[39m52.87    \u001b[39m | \u001b[39m56.13    \u001b[39m | \u001b[39m-28.23   \u001b[39m |\n","| \u001b[39m87       \u001b[39m | \u001b[39m0.08142  \u001b[39m | \u001b[39m25.41    \u001b[39m | \u001b[39m22.6     \u001b[39m | \u001b[39m0.003384 \u001b[39m | \u001b[39m-51.08   \u001b[39m | \u001b[39m38.09    \u001b[39m | \u001b[39m42.66    \u001b[39m | \u001b[39m-22.53   \u001b[39m |\n","| \u001b[39m88       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.82    \u001b[39m | \u001b[39m22.29    \u001b[39m | \u001b[39m0.002617 \u001b[39m | \u001b[39m-55.22   \u001b[39m | \u001b[39m44.54    \u001b[39m | \u001b[39m49.92    \u001b[39m | \u001b[39m-20.87   \u001b[39m |\n","| \u001b[39m89       \u001b[39m | \u001b[39m0.05423  \u001b[39m | \u001b[39m28.35    \u001b[39m | \u001b[39m26.78    \u001b[39m | \u001b[39m0.002364 \u001b[39m | \u001b[39m-50.87   \u001b[39m | \u001b[39m41.96    \u001b[39m | \u001b[39m42.95    \u001b[39m | \u001b[39m-23.45   \u001b[39m |\n","| \u001b[39m90       \u001b[39m | \u001b[39m-0.198   \u001b[39m | \u001b[39m23.13    \u001b[39m | \u001b[39m19.63    \u001b[39m | \u001b[39m0.003029 \u001b[39m | \u001b[39m-56.16   \u001b[39m | \u001b[39m39.81    \u001b[39m | \u001b[39m46.09    \u001b[39m | \u001b[39m-21.38   \u001b[39m |\n","| \u001b[39m91       \u001b[39m | \u001b[39m-0.01377 \u001b[39m | \u001b[39m26.44    \u001b[39m | \u001b[39m24.75    \u001b[39m | \u001b[39m0.003326 \u001b[39m | \u001b[39m-52.25   \u001b[39m | \u001b[39m44.41    \u001b[39m | \u001b[39m48.23    \u001b[39m | \u001b[39m-21.58   \u001b[39m |\n","| \u001b[39m92       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.21    \u001b[39m | \u001b[39m20.93    \u001b[39m | \u001b[39m0.002018 \u001b[39m | \u001b[39m-55.17   \u001b[39m | \u001b[39m45.58    \u001b[39m | \u001b[39m54.45    \u001b[39m | \u001b[39m-23.97   \u001b[39m |\n","| \u001b[35m93       \u001b[39m | \u001b[35m0.1371   \u001b[39m | \u001b[35m25.31    \u001b[39m | \u001b[35m22.78    \u001b[39m | \u001b[35m0.002498 \u001b[39m | \u001b[35m-53.42   \u001b[39m | \u001b[35m42.4     \u001b[39m | \u001b[35m43.86    \u001b[39m | \u001b[35m-23.63   \u001b[39m |\n","| \u001b[39m94       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m24.32    \u001b[39m | \u001b[39m16.45    \u001b[39m | \u001b[39m0.0026   \u001b[39m | \u001b[39m-57.55   \u001b[39m | \u001b[39m45.3     \u001b[39m | \u001b[39m49.42    \u001b[39m | \u001b[39m-23.87   \u001b[39m |\n","| \u001b[39m95       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m24.09    \u001b[39m | \u001b[39m18.09    \u001b[39m | \u001b[39m0.003856 \u001b[39m | \u001b[39m-54.59   \u001b[39m | \u001b[39m39.04    \u001b[39m | \u001b[39m44.4     \u001b[39m | \u001b[39m-22.27   \u001b[39m |\n","| \u001b[39m96       \u001b[39m | \u001b[39m-0.1114  \u001b[39m | \u001b[39m20.41    \u001b[39m | \u001b[39m17.15    \u001b[39m | \u001b[39m0.003639 \u001b[39m | \u001b[39m-50.45   \u001b[39m | \u001b[39m50.03    \u001b[39m | \u001b[39m53.4     \u001b[39m | \u001b[39m-22.27   \u001b[39m |\n","| \u001b[39m97       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m24.17    \u001b[39m | \u001b[39m27.77    \u001b[39m | \u001b[39m0.003029 \u001b[39m | \u001b[39m-53.98   \u001b[39m | \u001b[39m40.64    \u001b[39m | \u001b[39m43.71    \u001b[39m | \u001b[39m-22.48   \u001b[39m |\n","| \u001b[39m98       \u001b[39m | \u001b[39m-0.05244 \u001b[39m | \u001b[39m23.57    \u001b[39m | \u001b[39m23.4     \u001b[39m | \u001b[39m0.003784 \u001b[39m | \u001b[39m-50.28   \u001b[39m | \u001b[39m42.34    \u001b[39m | \u001b[39m44.64    \u001b[39m | \u001b[39m-20.04   \u001b[39m |\n","| \u001b[39m99       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m26.58    \u001b[39m | \u001b[39m22.19    \u001b[39m | \u001b[39m0.003477 \u001b[39m | \u001b[39m-52.75   \u001b[39m | \u001b[39m40.8     \u001b[39m | \u001b[39m50.55    \u001b[39m | \u001b[39m-21.56   \u001b[39m |\n","| \u001b[39m100      \u001b[39m | \u001b[39m0.01753  \u001b[39m | \u001b[39m23.03    \u001b[39m | \u001b[39m17.15    \u001b[39m | \u001b[39m0.003009 \u001b[39m | \u001b[39m-51.71   \u001b[39m | \u001b[39m47.76    \u001b[39m | \u001b[39m56.02    \u001b[39m | \u001b[39m-21.64   \u001b[39m |\n","| \u001b[39m101      \u001b[39m | \u001b[39m0.03625  \u001b[39m | \u001b[39m22.88    \u001b[39m | \u001b[39m17.13    \u001b[39m | \u001b[39m0.003671 \u001b[39m | \u001b[39m-51.49   \u001b[39m | \u001b[39m45.87    \u001b[39m | \u001b[39m53.48    \u001b[39m | \u001b[39m-24.2    \u001b[39m |\n","| \u001b[39m102      \u001b[39m | \u001b[39m-0.2171  \u001b[39m | \u001b[39m23.09    \u001b[39m | \u001b[39m19.37    \u001b[39m | \u001b[39m0.003685 \u001b[39m | \u001b[39m-50.93   \u001b[39m | \u001b[39m47.86    \u001b[39m | \u001b[39m59.02    \u001b[39m | \u001b[39m-20.29   \u001b[39m |\n","| \u001b[39m103      \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m24.6     \u001b[39m | \u001b[39m18.94    \u001b[39m | \u001b[39m0.002804 \u001b[39m | \u001b[39m-50.63   \u001b[39m | \u001b[39m46.9     \u001b[39m | \u001b[39m52.85    \u001b[39m | \u001b[39m-20.57   \u001b[39m |\n","| \u001b[39m104      \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.43    \u001b[39m | \u001b[39m21.65    \u001b[39m | \u001b[39m0.002112 \u001b[39m | \u001b[39m-50.36   \u001b[39m | \u001b[39m45.23    \u001b[39m | \u001b[39m42.85    \u001b[39m | \u001b[39m-24.12   \u001b[39m |\n","| \u001b[39m105      \u001b[39m | \u001b[39m-0.2789  \u001b[39m | \u001b[39m20.99    \u001b[39m | \u001b[39m15.11    \u001b[39m | \u001b[39m0.002372 \u001b[39m | \u001b[39m-52.23   \u001b[39m | \u001b[39m50.47    \u001b[39m | \u001b[39m57.98    \u001b[39m | \u001b[39m-28.67   \u001b[39m |\n","| \u001b[39m106      \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m23.7     \u001b[39m | \u001b[39m23.93    \u001b[39m | \u001b[39m0.00286  \u001b[39m | \u001b[39m-54.44   \u001b[39m | \u001b[39m43.16    \u001b[39m | \u001b[39m46.17    \u001b[39m | \u001b[39m-23.26   \u001b[39m |\n","| \u001b[39m107      \u001b[39m | \u001b[39m0.07149  \u001b[39m | \u001b[39m26.89    \u001b[39m | \u001b[39m21.97    \u001b[39m | \u001b[39m0.002344 \u001b[39m | \u001b[39m-52.45   \u001b[39m | \u001b[39m44.81    \u001b[39m | \u001b[39m46.66    \u001b[39m | \u001b[39m-22.36   \u001b[39m |\n","| \u001b[39m108      \u001b[39m | \u001b[39m-0.1349  \u001b[39m | \u001b[39m24.87    \u001b[39m | \u001b[39m24.46    \u001b[39m | \u001b[39m0.00278  \u001b[39m | \u001b[39m-52.45   \u001b[39m | \u001b[39m42.2     \u001b[39m | \u001b[39m42.34    \u001b[39m | \u001b[39m-20.76   \u001b[39m |\n","| \u001b[39m109      \u001b[39m | \u001b[39m-0.2222  \u001b[39m | \u001b[39m22.51    \u001b[39m | \u001b[39m19.75    \u001b[39m | \u001b[39m0.002563 \u001b[39m | \u001b[39m-55.3    \u001b[39m | \u001b[39m44.31    \u001b[39m | \u001b[39m50.86    \u001b[39m | \u001b[39m-27.23   \u001b[39m |\n","| \u001b[39m110      \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m25.25    \u001b[39m | \u001b[39m19.99    \u001b[39m | \u001b[39m0.00216  \u001b[39m | \u001b[39m-53.36   \u001b[39m | \u001b[39m41.41    \u001b[39m | \u001b[39m45.98    \u001b[39m | \u001b[39m-22.03   \u001b[39m |\n","=============================================================================================================\n","\n","1. 參數組合: {'ma_short': 23, 'ma_long': 25, 'will_period_1': 42, 'will_buy_threshold_1': -53, 'will_period_2': 44, 'will_sell_threshold_2': -24, 'stop_loss': np.float64(0.0024984918912897922)}\n","   交易次數: 37\n","   最終資金: 1255313.38\n","   勝率: 0.5405\n","   中位數回報 (Median Return): 521.10\n","   中位數絕對偏差 (MAD): 3800.38\n","   穩健夏普比率 (MSR): 0.1371\n","   夏普比率 (Sharpe Ratio): 0.3297\n","   回報分佈統計:\n","     均值 (Mean): 6977.14\n","     標準差 (Std): 21161.39\n","     最小值 (Min): -35682.24\n","     最大值 (Max): 90312.53\n","   平均交易時長 (K 棒數): 3.41\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 10.60\n","   出場原因統計: {'price_below_long_ma': 27, 'williams_overbought': 8, 'stop_loss': 2}\n","\n","2. 參數組合: {'ma_short': 17, 'ma_long': 22, 'will_period_1': 44, 'will_buy_threshold_1': -52, 'will_period_2': 60, 'will_sell_threshold_2': -26, 'stop_loss': np.float64(0.0028255511820897985)}\n","   交易次數: 23\n","   最終資金: 1095866.80\n","   勝率: 0.5217\n","   中位數回報 (Median Return): 719.13\n","   中位數絕對偏差 (MAD): 6210.41\n","   穩健夏普比率 (MSR): 0.1158\n","   夏普比率 (Sharpe Ratio): 0.2568\n","   回報分佈統計:\n","     均值 (Mean): 4244.89\n","     標準差 (Std): 16532.56\n","     最小值 (Min): -14270.01\n","     最大值 (Max): 62329.69\n","   平均交易時長 (K 棒數): 5.22\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 14.40\n","   出場原因統計: {'price_below_long_ma': 14, 'stop_loss': 4, 'williams_overbought': 5}\n","\n","3. 參數組合: {'ma_short': 23, 'ma_long': 25, 'will_period_1': 38, 'will_buy_threshold_1': -51, 'will_period_2': 43, 'will_sell_threshold_2': -23, 'stop_loss': np.float64(0.003383692550273637)}\n","   交易次數: 38\n","   最終資金: 1248573.57\n","   勝率: 0.5263\n","   中位數回報 (Median Return): 325.99\n","   中位數絕對偏差 (MAD): 4004.00\n","   穩健夏普比率 (MSR): 0.0814\n","   夏普比率 (Sharpe Ratio): 0.3115\n","   回報分佈統計:\n","     均值 (Mean): 6618.01\n","     標準差 (Std): 21244.20\n","     最小值 (Min): -35682.24\n","     最大值 (Max): 90312.53\n","   平均交易時長 (K 棒數): 3.58\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 11.20\n","   出場原因統計: {'price_below_long_ma': 29, 'williams_overbought': 8, 'stop_loss': 1}\n","\n","4. 參數組合: {'ma_short': 20, 'ma_long': 22, 'will_period_1': 47, 'will_buy_threshold_1': -57, 'will_period_2': 51, 'will_sell_threshold_2': -25, 'stop_loss': np.float64(0.0023715465916692388)}\n","   交易次數: 30\n","   最終資金: 1139228.78\n","   勝率: 0.5333\n","   中位數回報 (Median Return): 425.46\n","   中位數絕對偏差 (MAD): 5399.82\n","   穩健夏普比率 (MSR): 0.0788\n","   夏普比率 (Sharpe Ratio): 0.2305\n","   回報分佈統計:\n","     均值 (Mean): 4717.10\n","     標準差 (Std): 20467.85\n","     最小值 (Min): -14270.01\n","     最大值 (Max): 95112.53\n","   平均交易時長 (K 棒數): 3.77\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 12.80\n","   出場原因統計: {'price_below_long_ma': 21, 'stop_loss': 4, 'williams_overbought': 5}\n","\n","5. 參數組合: {'ma_short': 22, 'ma_long': 27, 'will_period_1': 42, 'will_buy_threshold_1': -52, 'will_period_2': 49, 'will_sell_threshold_2': -23, 'stop_loss': np.float64(0.003217537919217248)}\n","   交易次數: 21\n","   最終資金: 1154799.64\n","   勝率: 0.5238\n","   中位數回報 (Median Return): 328.76\n","   中位數絕對偏差 (MAD): 4593.03\n","   穩健夏普比率 (MSR): 0.0716\n","   夏普比率 (Sharpe Ratio): 0.2582\n","   回報分佈統計:\n","     均值 (Mean): 7447.54\n","     標準差 (Std): 28843.45\n","     最小值 (Min): -37078.15\n","     最大值 (Max): 90312.53\n","   平均交易時長 (K 棒數): 3.43\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 9.80\n","   出場原因統計: {'price_below_long_ma': 12, 'stop_loss': 3, 'williams_overbought': 6}\n","\n","策略 3 - 前 5 筆最佳參數組合（貝葉斯優化，成交次數 > 20, 勝率 > 0.3, 最終資金 > 100 萬, 5 筆最長持倉時間平均 > 3，按穩健夏普比率從高到低排序）：\n","|   iter    |  target   |  ma_long  | ma_short  | stop_loss | will_b... | will_p... | will_p... | will_s... |\n","-------------------------------------------------------------------------------------------------------------\n","| \u001b[39m1        \u001b[39m | \u001b[39m0.444    \u001b[39m | \u001b[39m34.98    \u001b[39m | \u001b[39m34.01    \u001b[39m | \u001b[39m0.003464 \u001b[39m | \u001b[39m-62.04   \u001b[39m | \u001b[39m26.24    \u001b[39m | \u001b[39m26.24    \u001b[39m | \u001b[39m-48.26   \u001b[39m |\n","| \u001b[39m2        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m54.65    \u001b[39m | \u001b[39m27.02    \u001b[39m | \u001b[39m0.003416 \u001b[39m | \u001b[39m-79.38   \u001b[39m | \u001b[39m58.8     \u001b[39m | \u001b[39m53.3     \u001b[39m | \u001b[39m-43.63   \u001b[39m |\n","| \u001b[39m3        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m27.27    \u001b[39m | \u001b[39m18.67    \u001b[39m | \u001b[39m0.002608 \u001b[39m | \u001b[39m-64.26   \u001b[39m | \u001b[39m37.28    \u001b[39m | \u001b[39m31.65    \u001b[39m | \u001b[39m-31.64   \u001b[39m |\n","| \u001b[39m4        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m25.58    \u001b[39m | \u001b[39m20.84    \u001b[39m | \u001b[39m0.002733 \u001b[39m | \u001b[39m-66.32   \u001b[39m | \u001b[39m51.41    \u001b[39m | \u001b[39m27.99    \u001b[39m | \u001b[39m-34.57   \u001b[39m |\n","| \u001b[39m5        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m43.7     \u001b[39m | \u001b[39m15.93    \u001b[39m | \u001b[39m0.003215 \u001b[39m | \u001b[39m-74.88   \u001b[39m | \u001b[39m22.6     \u001b[39m | \u001b[39m57.96    \u001b[39m | \u001b[39m-21.03   \u001b[39m |\n","| \u001b[39m6        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m52.34    \u001b[39m | \u001b[39m21.09    \u001b[39m | \u001b[39m0.002195 \u001b[39m | \u001b[39m-59.47   \u001b[39m | \u001b[39m37.61    \u001b[39m | \u001b[39m24.88    \u001b[39m | \u001b[39m-35.14   \u001b[39m |\n","| \u001b[39m7        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m21.38    \u001b[39m | \u001b[39m33.19    \u001b[39m | \u001b[39m0.002518 \u001b[39m | \u001b[39m-60.12   \u001b[39m | \u001b[39m32.47    \u001b[39m | \u001b[39m40.8     \u001b[39m | \u001b[39m-33.6    \u001b[39m |\n","| \u001b[39m8        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m27.39    \u001b[39m | \u001b[39m34.39    \u001b[39m | \u001b[39m0.00355  \u001b[39m | \u001b[39m-51.82   \u001b[39m | \u001b[39m55.79    \u001b[39m | \u001b[39m43.92    \u001b[39m | \u001b[39m-22.34   \u001b[39m |\n","| \u001b[39m9        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m23.54    \u001b[39m | \u001b[39m18.92    \u001b[39m | \u001b[39m0.00209  \u001b[39m | \u001b[39m-70.24   \u001b[39m | \u001b[39m35.55    \u001b[39m | \u001b[39m30.85    \u001b[39m | \u001b[39m-25.14   \u001b[39m |\n","| \u001b[39m10       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m34.27    \u001b[39m | \u001b[39m20.62    \u001b[39m | \u001b[39m0.003085 \u001b[39m | \u001b[39m-75.77   \u001b[39m | \u001b[39m52.09    \u001b[39m | \u001b[39m22.98    \u001b[39m | \u001b[39m-20.39   \u001b[39m |\n","| \u001b[39m11       \u001b[39m | \u001b[39m0.2843   \u001b[39m | \u001b[39m39.65    \u001b[39m | \u001b[39m33.56    \u001b[39m | \u001b[39m0.002924 \u001b[39m | \u001b[39m-65.87   \u001b[39m | \u001b[39m23.18    \u001b[39m | \u001b[39m28.45    \u001b[39m | \u001b[39m-45.26   \u001b[39m |\n","| \u001b[39m12       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m35.32    \u001b[39m | \u001b[39m34.99    \u001b[39m | \u001b[39m0.003423 \u001b[39m | \u001b[39m-77.53   \u001b[39m | \u001b[39m29.14    \u001b[39m | \u001b[39m26.29    \u001b[39m | \u001b[39m-49.54   \u001b[39m |\n","| \u001b[39m13       \u001b[39m | \u001b[39m-0.1566  \u001b[39m | \u001b[39m36.58    \u001b[39m | \u001b[39m34.17    \u001b[39m | \u001b[39m0.00355  \u001b[39m | \u001b[39m-59.52   \u001b[39m | \u001b[39m26.36    \u001b[39m | \u001b[39m23.37    \u001b[39m | \u001b[39m-42.01   \u001b[39m |\n","| \u001b[39m14       \u001b[39m | \u001b[39m0.2809   \u001b[39m | \u001b[39m40.76    \u001b[39m | \u001b[39m31.47    \u001b[39m | \u001b[39m0.00329  \u001b[39m | \u001b[39m-51.25   \u001b[39m | \u001b[39m23.15    \u001b[39m | \u001b[39m31.04    \u001b[39m | \u001b[39m-49.95   \u001b[39m |\n","| \u001b[39m15       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m40.78    \u001b[39m | \u001b[39m20.67    \u001b[39m | \u001b[39m0.0022   \u001b[39m | \u001b[39m-58.0    \u001b[39m | \u001b[39m20.32    \u001b[39m | \u001b[39m24.46    \u001b[39m | \u001b[39m-46.7    \u001b[39m |\n","| \u001b[39m16       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m36.45    \u001b[39m | \u001b[39m33.56    \u001b[39m | \u001b[39m0.002571 \u001b[39m | \u001b[39m-57.53   \u001b[39m | \u001b[39m30.3     \u001b[39m | \u001b[39m34.1     \u001b[39m | \u001b[39m-47.14   \u001b[39m |\n","| \u001b[39m17       \u001b[39m | \u001b[39m0.3122   \u001b[39m | \u001b[39m38.47    \u001b[39m | \u001b[39m35.0     \u001b[39m | \u001b[39m0.003306 \u001b[39m | \u001b[39m-53.79   \u001b[39m | \u001b[39m22.85    \u001b[39m | \u001b[39m28.39    \u001b[39m | \u001b[39m-44.53   \u001b[39m |\n","| \u001b[39m18       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m28.18    \u001b[39m | \u001b[39m34.41    \u001b[39m | \u001b[39m0.003358 \u001b[39m | \u001b[39m-55.98   \u001b[39m | \u001b[39m22.61    \u001b[39m | \u001b[39m24.14    \u001b[39m | \u001b[39m-45.76   \u001b[39m |\n","| \u001b[39m19       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m41.78    \u001b[39m | \u001b[39m31.29    \u001b[39m | \u001b[39m0.002391 \u001b[39m | \u001b[39m-61.17   \u001b[39m | \u001b[39m27.56    \u001b[39m | \u001b[39m23.41    \u001b[39m | \u001b[39m-44.21   \u001b[39m |\n","| \u001b[35m20       \u001b[39m | \u001b[35m0.5961   \u001b[39m | \u001b[35m37.3     \u001b[39m | \u001b[35m34.95    \u001b[39m | \u001b[35m0.003836 \u001b[39m | \u001b[35m-52.61   \u001b[39m | \u001b[35m24.01    \u001b[39m | \u001b[35m27.1     \u001b[39m | \u001b[35m-45.34   \u001b[39m |\n","| \u001b[39m21       \u001b[39m | \u001b[39m0.01484  \u001b[39m | \u001b[39m36.21    \u001b[39m | \u001b[39m33.85    \u001b[39m | \u001b[39m0.003755 \u001b[39m | \u001b[39m-62.0    \u001b[39m | \u001b[39m23.62    \u001b[39m | \u001b[39m25.24    \u001b[39m | \u001b[39m-44.81   \u001b[39m |\n","| \u001b[39m22       \u001b[39m | \u001b[39m0.2248   \u001b[39m | \u001b[39m35.53    \u001b[39m | \u001b[39m33.61    \u001b[39m | \u001b[39m0.002324 \u001b[39m | \u001b[39m-66.82   \u001b[39m | \u001b[39m22.47    \u001b[39m | \u001b[39m30.17    \u001b[39m | \u001b[39m-49.61   \u001b[39m |\n","| \u001b[39m23       \u001b[39m | \u001b[39m0.3828   \u001b[39m | \u001b[39m38.95    \u001b[39m | \u001b[39m33.81    \u001b[39m | \u001b[39m0.003566 \u001b[39m | \u001b[39m-57.78   \u001b[39m | \u001b[39m21.72    \u001b[39m | \u001b[39m26.34    \u001b[39m | \u001b[39m-47.82   \u001b[39m |\n","| \u001b[39m24       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m37.23    \u001b[39m | \u001b[39m29.2     \u001b[39m | \u001b[39m0.002056 \u001b[39m | \u001b[39m-63.23   \u001b[39m | \u001b[39m20.48    \u001b[39m | \u001b[39m28.77    \u001b[39m | \u001b[39m-49.81   \u001b[39m |\n","| \u001b[39m25       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m34.62    \u001b[39m | \u001b[39m31.52    \u001b[39m | \u001b[39m0.003936 \u001b[39m | \u001b[39m-67.6    \u001b[39m | \u001b[39m25.83    \u001b[39m | \u001b[39m25.25    \u001b[39m | \u001b[39m-46.41   \u001b[39m |\n","| \u001b[39m26       \u001b[39m | \u001b[39m0.2566   \u001b[39m | \u001b[39m36.35    \u001b[39m | \u001b[39m29.18    \u001b[39m | \u001b[39m0.003655 \u001b[39m | \u001b[39m-51.37   \u001b[39m | \u001b[39m21.99    \u001b[39m | \u001b[39m26.54    \u001b[39m | \u001b[39m-48.76   \u001b[39m |\n","| \u001b[39m27       \u001b[39m | \u001b[39m0.2606   \u001b[39m | \u001b[39m37.51    \u001b[39m | \u001b[39m30.99    \u001b[39m | \u001b[39m0.002851 \u001b[39m | \u001b[39m-53.79   \u001b[39m | \u001b[39m23.67    \u001b[39m | \u001b[39m24.65    \u001b[39m | \u001b[39m-45.75   \u001b[39m |\n","| \u001b[39m28       \u001b[39m | \u001b[39m0.5451   \u001b[39m | \u001b[39m39.68    \u001b[39m | \u001b[39m34.36    \u001b[39m | \u001b[39m0.003278 \u001b[39m | \u001b[39m-54.94   \u001b[39m | \u001b[39m23.77    \u001b[39m | \u001b[39m21.78    \u001b[39m | \u001b[39m-47.74   \u001b[39m |\n","| \u001b[39m29       \u001b[39m | \u001b[39m0.2448   \u001b[39m | \u001b[39m44.61    \u001b[39m | \u001b[39m31.3     \u001b[39m | \u001b[39m0.003275 \u001b[39m | \u001b[39m-51.11   \u001b[39m | \u001b[39m24.52    \u001b[39m | \u001b[39m27.99    \u001b[39m | \u001b[39m-43.33   \u001b[39m |\n","| \u001b[39m30       \u001b[39m | \u001b[39m0.3521   \u001b[39m | \u001b[39m37.83    \u001b[39m | \u001b[39m34.67    \u001b[39m | \u001b[39m0.003046 \u001b[39m | \u001b[39m-65.74   \u001b[39m | \u001b[39m21.36    \u001b[39m | \u001b[39m27.88    \u001b[39m | \u001b[39m-36.82   \u001b[39m |\n","| \u001b[39m31       \u001b[39m | \u001b[39m0.02581  \u001b[39m | \u001b[39m41.06    \u001b[39m | \u001b[39m34.78    \u001b[39m | \u001b[39m0.003761 \u001b[39m | \u001b[39m-58.0    \u001b[39m | \u001b[39m20.59    \u001b[39m | \u001b[39m30.78    \u001b[39m | \u001b[39m-36.54   \u001b[39m |\n","| \u001b[39m32       \u001b[39m | \u001b[39m0.2107   \u001b[39m | \u001b[39m36.46    \u001b[39m | \u001b[39m34.87    \u001b[39m | \u001b[39m0.002768 \u001b[39m | \u001b[39m-52.23   \u001b[39m | \u001b[39m22.05    \u001b[39m | \u001b[39m25.87    \u001b[39m | \u001b[39m-36.87   \u001b[39m |\n","| \u001b[39m33       \u001b[39m | \u001b[39m0.02142  \u001b[39m | \u001b[39m35.81    \u001b[39m | \u001b[39m31.99    \u001b[39m | \u001b[39m0.003088 \u001b[39m | \u001b[39m-58.33   \u001b[39m | \u001b[39m21.37    \u001b[39m | \u001b[39m29.98    \u001b[39m | \u001b[39m-30.04   \u001b[39m |\n","| \u001b[39m34       \u001b[39m | \u001b[39m0.1825   \u001b[39m | \u001b[39m40.86    \u001b[39m | \u001b[39m34.94    \u001b[39m | \u001b[39m0.003789 \u001b[39m | \u001b[39m-51.27   \u001b[39m | \u001b[39m21.02    \u001b[39m | \u001b[39m22.43    \u001b[39m | \u001b[39m-30.84   \u001b[39m |\n","| \u001b[39m35       \u001b[39m | \u001b[39m0.1277   \u001b[39m | \u001b[39m34.22    \u001b[39m | \u001b[39m32.26    \u001b[39m | \u001b[39m0.003888 \u001b[39m | \u001b[39m-61.72   \u001b[39m | \u001b[39m23.8     \u001b[39m | \u001b[39m21.61    \u001b[39m | \u001b[39m-27.92   \u001b[39m |\n","| \u001b[39m36       \u001b[39m | \u001b[39m0.1473   \u001b[39m | \u001b[39m41.85    \u001b[39m | \u001b[39m32.86    \u001b[39m | \u001b[39m0.003688 \u001b[39m | \u001b[39m-60.87   \u001b[39m | \u001b[39m20.23    \u001b[39m | \u001b[39m28.49    \u001b[39m | \u001b[39m-24.14   \u001b[39m |\n","| \u001b[39m37       \u001b[39m | \u001b[39m0.14     \u001b[39m | \u001b[39m40.67    \u001b[39m | \u001b[39m28.99    \u001b[39m | \u001b[39m0.003199 \u001b[39m | \u001b[39m-50.82   \u001b[39m | \u001b[39m21.25    \u001b[39m | \u001b[39m30.76    \u001b[39m | \u001b[39m-25.7    \u001b[39m |\n","| \u001b[39m38       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m42.05    \u001b[39m | \u001b[39m25.88    \u001b[39m | \u001b[39m0.002255 \u001b[39m | \u001b[39m-53.43   \u001b[39m | \u001b[39m21.22    \u001b[39m | \u001b[39m21.56    \u001b[39m | \u001b[39m-27.38   \u001b[39m |\n","| \u001b[39m39       \u001b[39m | \u001b[39m0.1728   \u001b[39m | \u001b[39m44.4     \u001b[39m | \u001b[39m32.2     \u001b[39m | \u001b[39m0.003701 \u001b[39m | \u001b[39m-50.73   \u001b[39m | \u001b[39m24.8     \u001b[39m | \u001b[39m36.55    \u001b[39m | \u001b[39m-29.53   \u001b[39m |\n","| \u001b[39m40       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m33.88    \u001b[39m | \u001b[39m34.96    \u001b[39m | \u001b[39m0.002354 \u001b[39m | \u001b[39m-54.96   \u001b[39m | \u001b[39m21.47    \u001b[39m | \u001b[39m27.53    \u001b[39m | \u001b[39m-23.97   \u001b[39m |\n","| \u001b[39m41       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m44.75    \u001b[39m | \u001b[39m32.25    \u001b[39m | \u001b[39m0.003106 \u001b[39m | \u001b[39m-62.45   \u001b[39m | \u001b[39m25.83    \u001b[39m | \u001b[39m32.05    \u001b[39m | \u001b[39m-28.22   \u001b[39m |\n","| \u001b[39m42       \u001b[39m | \u001b[39m0.1883   \u001b[39m | \u001b[39m42.0     \u001b[39m | \u001b[39m34.86    \u001b[39m | \u001b[39m0.002968 \u001b[39m | \u001b[39m-53.34   \u001b[39m | \u001b[39m20.45    \u001b[39m | \u001b[39m26.56    \u001b[39m | \u001b[39m-37.13   \u001b[39m |\n","| \u001b[39m43       \u001b[39m | \u001b[39m0.1245   \u001b[39m | \u001b[39m38.2     \u001b[39m | \u001b[39m34.28    \u001b[39m | \u001b[39m0.003976 \u001b[39m | \u001b[39m-50.13   \u001b[39m | \u001b[39m21.01    \u001b[39m | \u001b[39m36.83    \u001b[39m | \u001b[39m-34.7    \u001b[39m |\n","| \u001b[39m44       \u001b[39m | \u001b[39m0.01139  \u001b[39m | \u001b[39m32.8     \u001b[39m | \u001b[39m30.23    \u001b[39m | \u001b[39m0.002064 \u001b[39m | \u001b[39m-67.47   \u001b[39m | \u001b[39m20.96    \u001b[39m | \u001b[39m26.33    \u001b[39m | \u001b[39m-27.01   \u001b[39m |\n","| \u001b[39m45       \u001b[39m | \u001b[39m0.1165   \u001b[39m | \u001b[39m37.79    \u001b[39m | \u001b[39m34.12    \u001b[39m | \u001b[39m0.003444 \u001b[39m | \u001b[39m-66.39   \u001b[39m | \u001b[39m20.57    \u001b[39m | \u001b[39m23.71    \u001b[39m | \u001b[39m-23.07   \u001b[39m |\n","| \u001b[39m46       \u001b[39m | \u001b[39m0.03414  \u001b[39m | \u001b[39m38.66    \u001b[39m | \u001b[39m26.24    \u001b[39m | \u001b[39m0.002949 \u001b[39m | \u001b[39m-50.36   \u001b[39m | \u001b[39m22.44    \u001b[39m | \u001b[39m33.29    \u001b[39m | \u001b[39m-39.99   \u001b[39m |\n","| \u001b[39m47       \u001b[39m | \u001b[39m0.157    \u001b[39m | \u001b[39m40.46    \u001b[39m | \u001b[39m24.51    \u001b[39m | \u001b[39m0.003798 \u001b[39m | \u001b[39m-53.62   \u001b[39m | \u001b[39m21.19    \u001b[39m | \u001b[39m34.72    \u001b[39m | \u001b[39m-32.19   \u001b[39m |\n","| \u001b[39m48       \u001b[39m | \u001b[39m0.2439   \u001b[39m | \u001b[39m42.81    \u001b[39m | \u001b[39m27.49    \u001b[39m | \u001b[39m0.003069 \u001b[39m | \u001b[39m-51.33   \u001b[39m | \u001b[39m20.17    \u001b[39m | \u001b[39m37.92    \u001b[39m | \u001b[39m-26.81   \u001b[39m |\n","| \u001b[39m49       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m34.78    \u001b[39m | \u001b[39m34.8     \u001b[39m | \u001b[39m0.003969 \u001b[39m | \u001b[39m-64.52   \u001b[39m | \u001b[39m20.09    \u001b[39m | \u001b[39m35.76    \u001b[39m | \u001b[39m-37.74   \u001b[39m |\n","| \u001b[39m50       \u001b[39m | \u001b[39m0.163    \u001b[39m | \u001b[39m47.06    \u001b[39m | \u001b[39m28.12    \u001b[39m | \u001b[39m0.002967 \u001b[39m | \u001b[39m-51.29   \u001b[39m | \u001b[39m22.19    \u001b[39m | \u001b[39m37.71    \u001b[39m | \u001b[39m-34.07   \u001b[39m |\n","| \u001b[39m51       \u001b[39m | \u001b[39m0.1467   \u001b[39m | \u001b[39m41.61    \u001b[39m | \u001b[39m32.85    \u001b[39m | \u001b[39m0.003507 \u001b[39m | \u001b[39m-71.32   \u001b[39m | \u001b[39m20.34    \u001b[39m | \u001b[39m21.49    \u001b[39m | \u001b[39m-27.48   \u001b[39m |\n","| \u001b[39m52       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m33.52    \u001b[39m | \u001b[39m34.79    \u001b[39m | \u001b[39m0.002361 \u001b[39m | \u001b[39m-72.38   \u001b[39m | \u001b[39m21.41    \u001b[39m | \u001b[39m21.47    \u001b[39m | \u001b[39m-28.08   \u001b[39m |\n","| \u001b[39m53       \u001b[39m | \u001b[39m0.1533   \u001b[39m | \u001b[39m45.63    \u001b[39m | \u001b[39m30.78    \u001b[39m | \u001b[39m0.002467 \u001b[39m | \u001b[39m-50.3    \u001b[39m | \u001b[39m20.75    \u001b[39m | \u001b[39m33.68    \u001b[39m | \u001b[39m-33.26   \u001b[39m |\n","| \u001b[39m54       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m44.48    \u001b[39m | \u001b[39m29.51    \u001b[39m | \u001b[39m0.003817 \u001b[39m | \u001b[39m-70.36   \u001b[39m | \u001b[39m21.41    \u001b[39m | \u001b[39m22.95    \u001b[39m | \u001b[39m-20.23   \u001b[39m |\n","| \u001b[39m55       \u001b[39m | \u001b[39m0.1497   \u001b[39m | \u001b[39m37.5     \u001b[39m | \u001b[39m29.07    \u001b[39m | \u001b[39m0.003543 \u001b[39m | \u001b[39m-51.01   \u001b[39m | \u001b[39m21.37    \u001b[39m | \u001b[39m31.94    \u001b[39m | \u001b[39m-32.04   \u001b[39m |\n","| \u001b[39m56       \u001b[39m | \u001b[39m-0.1213  \u001b[39m | \u001b[39m39.75    \u001b[39m | \u001b[39m32.36    \u001b[39m | \u001b[39m0.002058 \u001b[39m | \u001b[39m-60.89   \u001b[39m | \u001b[39m21.83    \u001b[39m | \u001b[39m23.81    \u001b[39m | \u001b[39m-29.13   \u001b[39m |\n","| \u001b[39m57       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m38.54    \u001b[39m | \u001b[39m20.61    \u001b[39m | \u001b[39m0.002579 \u001b[39m | \u001b[39m-52.04   \u001b[39m | \u001b[39m21.56    \u001b[39m | \u001b[39m42.83    \u001b[39m | \u001b[39m-32.39   \u001b[39m |\n","| \u001b[39m58       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m44.19    \u001b[39m | \u001b[39m33.11    \u001b[39m | \u001b[39m0.002437 \u001b[39m | \u001b[39m-51.44   \u001b[39m | \u001b[39m20.16    \u001b[39m | \u001b[39m37.43    \u001b[39m | \u001b[39m-41.19   \u001b[39m |\n","| \u001b[39m59       \u001b[39m | \u001b[39m0.09018  \u001b[39m | \u001b[39m36.91    \u001b[39m | \u001b[39m30.61    \u001b[39m | \u001b[39m0.002703 \u001b[39m | \u001b[39m-59.82   \u001b[39m | \u001b[39m23.69    \u001b[39m | \u001b[39m24.11    \u001b[39m | \u001b[39m-35.42   \u001b[39m |\n","| \u001b[39m60       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m36.0     \u001b[39m | \u001b[39m26.65    \u001b[39m | \u001b[39m0.003653 \u001b[39m | \u001b[39m-64.25   \u001b[39m | \u001b[39m21.3     \u001b[39m | \u001b[39m31.61    \u001b[39m | \u001b[39m-27.28   \u001b[39m |\n","| \u001b[39m61       \u001b[39m | \u001b[39m0.1263   \u001b[39m | \u001b[39m39.7     \u001b[39m | \u001b[39m30.41    \u001b[39m | \u001b[39m0.003256 \u001b[39m | \u001b[39m-53.39   \u001b[39m | \u001b[39m26.94    \u001b[39m | \u001b[39m26.19    \u001b[39m | \u001b[39m-34.77   \u001b[39m |\n","| \u001b[39m62       \u001b[39m | \u001b[39m0.2014   \u001b[39m | \u001b[39m37.93    \u001b[39m | \u001b[39m30.14    \u001b[39m | \u001b[39m0.003143 \u001b[39m | \u001b[39m-55.59   \u001b[39m | \u001b[39m21.39    \u001b[39m | \u001b[39m29.87    \u001b[39m | \u001b[39m-37.39   \u001b[39m |\n","| \u001b[39m63       \u001b[39m | \u001b[39m0.01995  \u001b[39m | \u001b[39m37.58    \u001b[39m | \u001b[39m28.34    \u001b[39m | \u001b[39m0.002903 \u001b[39m | \u001b[39m-50.31   \u001b[39m | \u001b[39m22.05    \u001b[39m | \u001b[39m25.14    \u001b[39m | \u001b[39m-37.42   \u001b[39m |\n","| \u001b[39m64       \u001b[39m | \u001b[39m0.1838   \u001b[39m | \u001b[39m49.7     \u001b[39m | \u001b[39m24.8     \u001b[39m | \u001b[39m0.002075 \u001b[39m | \u001b[39m-52.11   \u001b[39m | \u001b[39m25.06    \u001b[39m | \u001b[39m35.14    \u001b[39m | \u001b[39m-29.02   \u001b[39m |\n","| \u001b[39m65       \u001b[39m | \u001b[39m0.3768   \u001b[39m | \u001b[39m43.94    \u001b[39m | \u001b[39m33.89    \u001b[39m | \u001b[39m0.003936 \u001b[39m | \u001b[39m-52.03   \u001b[39m | \u001b[39m20.39    \u001b[39m | \u001b[39m25.23    \u001b[39m | \u001b[39m-49.0    \u001b[39m |\n","| \u001b[39m66       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m42.33    \u001b[39m | \u001b[39m24.68    \u001b[39m | \u001b[39m0.002111 \u001b[39m | \u001b[39m-50.04   \u001b[39m | \u001b[39m28.26    \u001b[39m | \u001b[39m33.56    \u001b[39m | \u001b[39m-31.29   \u001b[39m |\n","| \u001b[39m67       \u001b[39m | \u001b[39m0.1431   \u001b[39m | \u001b[39m49.3     \u001b[39m | \u001b[39m29.88    \u001b[39m | \u001b[39m0.002274 \u001b[39m | \u001b[39m-52.64   \u001b[39m | \u001b[39m22.13    \u001b[39m | \u001b[39m38.87    \u001b[39m | \u001b[39m-26.38   \u001b[39m |\n","| \u001b[39m68       \u001b[39m | \u001b[39m0.3496   \u001b[39m | \u001b[39m48.22    \u001b[39m | \u001b[39m32.65    \u001b[39m | \u001b[39m0.003625 \u001b[39m | \u001b[39m-52.83   \u001b[39m | \u001b[39m20.07    \u001b[39m | \u001b[39m34.01    \u001b[39m | \u001b[39m-25.09   \u001b[39m |\n","| \u001b[39m69       \u001b[39m | \u001b[39m0.1472   \u001b[39m | \u001b[39m53.14    \u001b[39m | \u001b[39m26.14    \u001b[39m | \u001b[39m0.002317 \u001b[39m | \u001b[39m-53.18   \u001b[39m | \u001b[39m21.38    \u001b[39m | \u001b[39m33.0     \u001b[39m | \u001b[39m-32.33   \u001b[39m |\n","| \u001b[39m70       \u001b[39m | \u001b[39m0.1815   \u001b[39m | \u001b[39m38.99    \u001b[39m | \u001b[39m34.92    \u001b[39m | \u001b[39m0.002668 \u001b[39m | \u001b[39m-51.5    \u001b[39m | \u001b[39m21.82    \u001b[39m | \u001b[39m20.3     \u001b[39m | \u001b[39m-41.68   \u001b[39m |\n","| \u001b[39m71       \u001b[39m | \u001b[39m0.1444   \u001b[39m | \u001b[39m54.69    \u001b[39m | \u001b[39m22.7     \u001b[39m | \u001b[39m0.002433 \u001b[39m | \u001b[39m-53.61   \u001b[39m | \u001b[39m21.12    \u001b[39m | \u001b[39m37.26    \u001b[39m | \u001b[39m-23.77   \u001b[39m |\n","| \u001b[39m72       \u001b[39m | \u001b[39m0.3216   \u001b[39m | \u001b[39m56.55    \u001b[39m | \u001b[39m23.91    \u001b[39m | \u001b[39m0.003837 \u001b[39m | \u001b[39m-50.38   \u001b[39m | \u001b[39m25.26    \u001b[39m | \u001b[39m41.89    \u001b[39m | \u001b[39m-25.66   \u001b[39m |\n","| \u001b[39m73       \u001b[39m | \u001b[39m0.04707  \u001b[39m | \u001b[39m58.58    \u001b[39m | \u001b[39m30.26    \u001b[39m | \u001b[39m0.003888 \u001b[39m | \u001b[39m-51.02   \u001b[39m | \u001b[39m21.18    \u001b[39m | \u001b[39m42.37    \u001b[39m | \u001b[39m-32.09   \u001b[39m |\n","| \u001b[39m74       \u001b[39m | \u001b[39m0.3473   \u001b[39m | \u001b[39m54.49    \u001b[39m | \u001b[39m24.2     \u001b[39m | \u001b[39m0.003251 \u001b[39m | \u001b[39m-55.54   \u001b[39m | \u001b[39m20.77    \u001b[39m | \u001b[39m43.5     \u001b[39m | \u001b[39m-32.74   \u001b[39m |\n","| \u001b[39m75       \u001b[39m | \u001b[39m0.1552   \u001b[39m | \u001b[39m54.45    \u001b[39m | \u001b[39m28.99    \u001b[39m | \u001b[39m0.002017 \u001b[39m | \u001b[39m-53.24   \u001b[39m | \u001b[39m28.65    \u001b[39m | \u001b[39m42.51    \u001b[39m | \u001b[39m-30.56   \u001b[39m |\n","| \u001b[39m76       \u001b[39m | \u001b[39m0.4196   \u001b[39m | \u001b[39m59.44    \u001b[39m | \u001b[39m22.15    \u001b[39m | \u001b[39m0.003277 \u001b[39m | \u001b[39m-52.51   \u001b[39m | \u001b[39m25.62    \u001b[39m | \u001b[39m36.18    \u001b[39m | \u001b[39m-32.48   \u001b[39m |\n","| \u001b[39m77       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m58.38    \u001b[39m | \u001b[39m27.91    \u001b[39m | \u001b[39m0.003726 \u001b[39m | \u001b[39m-59.54   \u001b[39m | \u001b[39m22.45    \u001b[39m | \u001b[39m37.61    \u001b[39m | \u001b[39m-29.92   \u001b[39m |\n","| \u001b[39m78       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m58.37    \u001b[39m | \u001b[39m19.58    \u001b[39m | \u001b[39m0.003558 \u001b[39m | \u001b[39m-51.56   \u001b[39m | \u001b[39m24.25    \u001b[39m | \u001b[39m48.37    \u001b[39m | \u001b[39m-34.37   \u001b[39m |\n","| \u001b[39m79       \u001b[39m | \u001b[39m-0.008852\u001b[39m | \u001b[39m38.02    \u001b[39m | \u001b[39m33.9     \u001b[39m | \u001b[39m0.002679 \u001b[39m | \u001b[39m-58.74   \u001b[39m | \u001b[39m20.06    \u001b[39m | \u001b[39m20.39    \u001b[39m | \u001b[39m-35.63   \u001b[39m |\n","| \u001b[39m80       \u001b[39m | \u001b[39m0.1923   \u001b[39m | \u001b[39m51.33    \u001b[39m | \u001b[39m30.45    \u001b[39m | \u001b[39m0.003435 \u001b[39m | \u001b[39m-53.37   \u001b[39m | \u001b[39m20.56    \u001b[39m | \u001b[39m49.37    \u001b[39m | \u001b[39m-28.56   \u001b[39m |\n","| \u001b[39m81       \u001b[39m | \u001b[39m0.1496   \u001b[39m | \u001b[39m56.3     \u001b[39m | \u001b[39m34.83    \u001b[39m | \u001b[39m0.003018 \u001b[39m | \u001b[39m-50.0    \u001b[39m | \u001b[39m28.23    \u001b[39m | \u001b[39m43.12    \u001b[39m | \u001b[39m-24.51   \u001b[39m |\n","| \u001b[39m82       \u001b[39m | \u001b[39m0.1692   \u001b[39m | \u001b[39m51.58    \u001b[39m | \u001b[39m32.02    \u001b[39m | \u001b[39m0.003021 \u001b[39m | \u001b[39m-52.58   \u001b[39m | \u001b[39m30.37    \u001b[39m | \u001b[39m49.47    \u001b[39m | \u001b[39m-24.47   \u001b[39m |\n","| \u001b[39m83       \u001b[39m | \u001b[39m0.1934   \u001b[39m | \u001b[39m50.73    \u001b[39m | \u001b[39m29.32    \u001b[39m | \u001b[39m0.002246 \u001b[39m | \u001b[39m-52.13   \u001b[39m | \u001b[39m22.64    \u001b[39m | \u001b[39m46.58    \u001b[39m | \u001b[39m-21.52   \u001b[39m |\n","| \u001b[39m84       \u001b[39m | \u001b[39m0.2469   \u001b[39m | \u001b[39m50.49    \u001b[39m | \u001b[39m32.67    \u001b[39m | \u001b[39m0.002843 \u001b[39m | \u001b[39m-50.04   \u001b[39m | \u001b[39m22.85    \u001b[39m | \u001b[39m43.99    \u001b[39m | \u001b[39m-29.72   \u001b[39m |\n","| \u001b[39m85       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m53.41    \u001b[39m | \u001b[39m18.11    \u001b[39m | \u001b[39m0.003291 \u001b[39m | \u001b[39m-51.72   \u001b[39m | \u001b[39m21.06    \u001b[39m | \u001b[39m33.22    \u001b[39m | \u001b[39m-27.18   \u001b[39m |\n","| \u001b[39m86       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m56.38    \u001b[39m | \u001b[39m33.44    \u001b[39m | \u001b[39m0.002075 \u001b[39m | \u001b[39m-58.86   \u001b[39m | \u001b[39m24.67    \u001b[39m | \u001b[39m49.27    \u001b[39m | \u001b[39m-21.02   \u001b[39m |\n","| \u001b[39m87       \u001b[39m | \u001b[39m0.02536  \u001b[39m | \u001b[39m53.28    \u001b[39m | \u001b[39m26.37    \u001b[39m | \u001b[39m0.003443 \u001b[39m | \u001b[39m-50.25   \u001b[39m | \u001b[39m20.08    \u001b[39m | \u001b[39m39.9     \u001b[39m | \u001b[39m-24.67   \u001b[39m |\n","| \u001b[39m88       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m54.29    \u001b[39m | \u001b[39m34.61    \u001b[39m | \u001b[39m0.002996 \u001b[39m | \u001b[39m-50.59   \u001b[39m | \u001b[39m32.77    \u001b[39m | \u001b[39m45.62    \u001b[39m | \u001b[39m-32.15   \u001b[39m |\n","| \u001b[39m89       \u001b[39m | \u001b[39m0.1816   \u001b[39m | \u001b[39m47.32    \u001b[39m | \u001b[39m26.91    \u001b[39m | \u001b[39m0.003356 \u001b[39m | \u001b[39m-53.24   \u001b[39m | \u001b[39m28.39    \u001b[39m | \u001b[39m46.81    \u001b[39m | \u001b[39m-27.63   \u001b[39m |\n","| \u001b[39m90       \u001b[39m | \u001b[39m0.1767   \u001b[39m | \u001b[39m51.12    \u001b[39m | \u001b[39m26.71    \u001b[39m | \u001b[39m0.003041 \u001b[39m | \u001b[39m-51.73   \u001b[39m | \u001b[39m30.66    \u001b[39m | \u001b[39m38.55    \u001b[39m | \u001b[39m-21.34   \u001b[39m |\n","| \u001b[39m91       \u001b[39m | \u001b[39m0.1688   \u001b[39m | \u001b[39m53.63    \u001b[39m | \u001b[39m26.33    \u001b[39m | \u001b[39m0.003685 \u001b[39m | \u001b[39m-52.02   \u001b[39m | \u001b[39m33.2     \u001b[39m | \u001b[39m46.5     \u001b[39m | \u001b[39m-23.44   \u001b[39m |\n","| \u001b[39m92       \u001b[39m | \u001b[39m0.2744   \u001b[39m | \u001b[39m51.67    \u001b[39m | \u001b[39m22.99    \u001b[39m | \u001b[39m0.002421 \u001b[39m | \u001b[39m-54.34   \u001b[39m | \u001b[39m27.14    \u001b[39m | \u001b[39m42.66    \u001b[39m | \u001b[39m-24.75   \u001b[39m |\n","| \u001b[39m93       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m55.2     \u001b[39m | \u001b[39m27.47    \u001b[39m | \u001b[39m0.002061 \u001b[39m | \u001b[39m-50.12   \u001b[39m | \u001b[39m24.07    \u001b[39m | \u001b[39m34.54    \u001b[39m | \u001b[39m-36.54   \u001b[39m |\n","| \u001b[39m94       \u001b[39m | \u001b[39m0.165    \u001b[39m | \u001b[39m48.41    \u001b[39m | \u001b[39m26.26    \u001b[39m | \u001b[39m0.002509 \u001b[39m | \u001b[39m-50.83   \u001b[39m | \u001b[39m30.74    \u001b[39m | \u001b[39m50.8     \u001b[39m | \u001b[39m-21.83   \u001b[39m |\n","| \u001b[39m95       \u001b[39m | \u001b[39m0.4161   \u001b[39m | \u001b[39m43.01    \u001b[39m | \u001b[39m32.98    \u001b[39m | \u001b[39m0.003678 \u001b[39m | \u001b[39m-51.68   \u001b[39m | \u001b[39m26.38    \u001b[39m | \u001b[39m43.97    \u001b[39m | \u001b[39m-23.86   \u001b[39m |\n","| \u001b[39m96       \u001b[39m | \u001b[39m0.1983   \u001b[39m | \u001b[39m50.18    \u001b[39m | \u001b[39m34.64    \u001b[39m | \u001b[39m0.002422 \u001b[39m | \u001b[39m-50.27   \u001b[39m | \u001b[39m27.79    \u001b[39m | \u001b[39m45.79    \u001b[39m | \u001b[39m-21.52   \u001b[39m |\n","| \u001b[39m97       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m44.96    \u001b[39m | \u001b[39m29.12    \u001b[39m | \u001b[39m0.002383 \u001b[39m | \u001b[39m-56.82   \u001b[39m | \u001b[39m33.76    \u001b[39m | \u001b[39m47.64    \u001b[39m | \u001b[39m-21.29   \u001b[39m |\n","| \u001b[39m98       \u001b[39m | \u001b[39m0.4256   \u001b[39m | \u001b[39m57.12    \u001b[39m | \u001b[39m28.53    \u001b[39m | \u001b[39m0.003185 \u001b[39m | \u001b[39m-51.43   \u001b[39m | \u001b[39m29.6     \u001b[39m | \u001b[39m45.08    \u001b[39m | \u001b[39m-20.72   \u001b[39m |\n","| \u001b[39m99       \u001b[39m | \u001b[39m0.2151   \u001b[39m | \u001b[39m52.51    \u001b[39m | \u001b[39m24.89    \u001b[39m | \u001b[39m0.003418 \u001b[39m | \u001b[39m-51.22   \u001b[39m | \u001b[39m25.42    \u001b[39m | \u001b[39m48.75    \u001b[39m | \u001b[39m-25.75   \u001b[39m |\n","| \u001b[39m100      \u001b[39m | \u001b[39m-0.02989 \u001b[39m | \u001b[39m34.19    \u001b[39m | \u001b[39m32.61    \u001b[39m | \u001b[39m0.003597 \u001b[39m | \u001b[39m-54.15   \u001b[39m | \u001b[39m27.64    \u001b[39m | \u001b[39m20.69    \u001b[39m | \u001b[39m-34.36   \u001b[39m |\n","| \u001b[39m101      \u001b[39m | \u001b[39m0.3093   \u001b[39m | \u001b[39m57.07    \u001b[39m | \u001b[39m28.88    \u001b[39m | \u001b[39m0.003827 \u001b[39m | \u001b[39m-50.1    \u001b[39m | \u001b[39m28.79    \u001b[39m | \u001b[39m36.97    \u001b[39m | \u001b[39m-26.38   \u001b[39m |\n","| \u001b[39m102      \u001b[39m | \u001b[39m0.03616  \u001b[39m | \u001b[39m43.33    \u001b[39m | \u001b[39m34.64    \u001b[39m | \u001b[39m0.002005 \u001b[39m | \u001b[39m-50.49   \u001b[39m | \u001b[39m20.91    \u001b[39m | \u001b[39m43.55    \u001b[39m | \u001b[39m-29.48   \u001b[39m |\n","| \u001b[39m103      \u001b[39m | \u001b[39m0.3986   \u001b[39m | \u001b[39m44.1     \u001b[39m | \u001b[39m34.64    \u001b[39m | \u001b[39m0.002711 \u001b[39m | \u001b[39m-51.86   \u001b[39m | \u001b[39m24.26    \u001b[39m | \u001b[39m55.92    \u001b[39m | \u001b[39m-27.21   \u001b[39m |\n","| \u001b[39m104      \u001b[39m | \u001b[39m0.1734   \u001b[39m | \u001b[39m52.79    \u001b[39m | \u001b[39m26.47    \u001b[39m | \u001b[39m0.003607 \u001b[39m | \u001b[39m-50.26   \u001b[39m | \u001b[39m25.58    \u001b[39m | \u001b[39m56.98    \u001b[39m | \u001b[39m-26.39   \u001b[39m |\n","| \u001b[39m105      \u001b[39m | \u001b[39m0.2372   \u001b[39m | \u001b[39m46.53    \u001b[39m | \u001b[39m31.36    \u001b[39m | \u001b[39m0.002252 \u001b[39m | \u001b[39m-55.28   \u001b[39m | \u001b[39m22.65    \u001b[39m | \u001b[39m59.45    \u001b[39m | \u001b[39m-22.82   \u001b[39m |\n","| \u001b[39m106      \u001b[39m | \u001b[39m0.08386  \u001b[39m | \u001b[39m39.23    \u001b[39m | \u001b[39m32.27    \u001b[39m | \u001b[39m0.003187 \u001b[39m | \u001b[39m-50.91   \u001b[39m | \u001b[39m20.06    \u001b[39m | \u001b[39m59.45    \u001b[39m | \u001b[39m-21.65   \u001b[39m |\n","| \u001b[39m107      \u001b[39m | \u001b[39m0.1225   \u001b[39m | \u001b[39m46.61    \u001b[39m | \u001b[39m29.34    \u001b[39m | \u001b[39m0.003398 \u001b[39m | \u001b[39m-53.01   \u001b[39m | \u001b[39m29.84    \u001b[39m | \u001b[39m57.57    \u001b[39m | \u001b[39m-27.82   \u001b[39m |\n","| \u001b[39m108      \u001b[39m | \u001b[39m0.1787   \u001b[39m | \u001b[39m46.02    \u001b[39m | \u001b[39m21.64    \u001b[39m | \u001b[39m0.003057 \u001b[39m | \u001b[39m-54.12   \u001b[39m | \u001b[39m21.26    \u001b[39m | \u001b[39m55.25    \u001b[39m | \u001b[39m-22.2    \u001b[39m |\n","| \u001b[39m109      \u001b[39m | \u001b[39m0.224    \u001b[39m | \u001b[39m41.54    \u001b[39m | \u001b[39m23.95    \u001b[39m | \u001b[39m0.002933 \u001b[39m | \u001b[39m-50.89   \u001b[39m | \u001b[39m22.99    \u001b[39m | \u001b[39m57.95    \u001b[39m | \u001b[39m-25.2    \u001b[39m |\n","| \u001b[39m110      \u001b[39m | \u001b[39m0.07332  \u001b[39m | \u001b[39m41.79    \u001b[39m | \u001b[39m27.18    \u001b[39m | \u001b[39m0.002002 \u001b[39m | \u001b[39m-51.31   \u001b[39m | \u001b[39m20.8     \u001b[39m | \u001b[39m54.19    \u001b[39m | \u001b[39m-20.25   \u001b[39m |\n","=============================================================================================================\n","\n","1. 參數組合: {'ma_short': 35, 'ma_long': 37, 'will_period_1': 24, 'will_buy_threshold_1': -53, 'will_period_2': 27, 'will_sell_threshold_2': -45, 'stop_loss': np.float64(0.0038355950678861392)}\n","   交易次數: 68\n","   最終資金: 1193980.82\n","   勝率: 0.6912\n","   中位數回報 (Median Return): 2917.04\n","   中位數絕對偏差 (MAD): 4893.51\n","   穩健夏普比率 (MSR): 0.5961\n","   夏普比率 (Sharpe Ratio): 0.1974\n","   回報分佈統計:\n","     均值 (Mean): 2930.71\n","     標準差 (Std): 14845.09\n","     最小值 (Min): -26069.19\n","     最大值 (Max): 63314.16\n","   平均交易時長 (K 棒數): 3.51\n","   5 筆最短持倉時間平均 (K 棒數): 0.80\n","   5 筆最長持倉時間平均 (K 棒數): 14.60\n","   出場原因統計: {'williams_overbought': 40, 'death_cross': 18, 'stop_loss': 9, 'end_of_data': 1}\n","\n","2. 參數組合: {'ma_short': 34, 'ma_long': 40, 'will_period_1': 24, 'will_buy_threshold_1': -55, 'will_period_2': 22, 'will_sell_threshold_2': -48, 'stop_loss': np.float64(0.0032775014498060886)}\n","   交易次數: 47\n","   最終資金: 1149674.59\n","   勝率: 0.6170\n","   中位數回報 (Median Return): 3923.34\n","   中位數絕對偏差 (MAD): 7197.86\n","   穩健夏普比率 (MSR): 0.5451\n","   夏普比率 (Sharpe Ratio): 0.1940\n","   回報分佈統計:\n","     均值 (Mean): 3262.46\n","     標準差 (Std): 16817.93\n","     最小值 (Min): -26069.19\n","     最大值 (Max): 63314.16\n","   平均交易時長 (K 棒數): 4.45\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 14.60\n","   出場原因統計: {'williams_overbought': 26, 'death_cross': 13, 'stop_loss': 8}\n","\n","3. 參數組合: {'ma_short': 34, 'ma_long': 35, 'will_period_1': 26, 'will_buy_threshold_1': -62, 'will_period_2': 26, 'will_sell_threshold_2': -48, 'stop_loss': np.float64(0.0034639878836228103)}\n","   交易次數: 21\n","   最終資金: 1066548.30\n","   勝率: 0.5238\n","   中位數回報 (Median Return): 2930.37\n","   中位數絕對偏差 (MAD): 6600.61\n","   穩健夏普比率 (MSR): 0.4440\n","   夏普比率 (Sharpe Ratio): 0.1699\n","   回報分佈統計:\n","     均值 (Mean): 3246.35\n","     標準差 (Std): 19102.48\n","     最小值 (Min): -25082.82\n","     最大值 (Max): 52309.09\n","   平均交易時長 (K 棒數): 5.52\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 10.20\n","   出場原因統計: {'death_cross': 6, 'williams_overbought': 11, 'stop_loss': 4}\n","\n","4. 參數組合: {'ma_short': 29, 'ma_long': 57, 'will_period_1': 30, 'will_buy_threshold_1': -51, 'will_period_2': 45, 'will_sell_threshold_2': -21, 'stop_loss': np.float64(0.0031853608212271483)}\n","   交易次數: 45\n","   最終資金: 1081510.49\n","   勝率: 0.6222\n","   中位數回報 (Median Return): 2129.94\n","   中位數絕對偏差 (MAD): 5004.55\n","   穩健夏普比率 (MSR): 0.4256\n","   夏普比率 (Sharpe Ratio): 0.1658\n","   回報分佈統計:\n","     均值 (Mean): 1887.87\n","     標準差 (Std): 11389.88\n","     最小值 (Min): -24469.19\n","     最大值 (Max): 26929.85\n","   平均交易時長 (K 棒數): 3.47\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 11.60\n","   出場原因統計: {'williams_overbought': 13, 'death_cross': 25, 'stop_loss': 7}\n","\n","5. 參數組合: {'ma_short': 22, 'ma_long': 59, 'will_period_1': 26, 'will_buy_threshold_1': -53, 'will_period_2': 36, 'will_sell_threshold_2': -32, 'stop_loss': np.float64(0.0032766471523696552)}\n","   交易次數: 61\n","   最終資金: 1152704.76\n","   勝率: 0.6721\n","   中位數回報 (Median Return): 1929.68\n","   中位數絕對偏差 (MAD): 4598.39\n","   穩健夏普比率 (MSR): 0.4196\n","   夏普比率 (Sharpe Ratio): 0.2669\n","   回報分佈統計:\n","     均值 (Mean): 2579.52\n","     標準差 (Std): 9665.20\n","     最小值 (Min): -26069.19\n","     最大值 (Max): 27529.85\n","   平均交易時長 (K 棒數): 2.36\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 12.60\n","   出場原因統計: {'williams_overbought': 14, 'death_cross': 45, 'stop_loss': 2}\n","\n","策略 4 - 前 5 筆最佳參數組合（貝葉斯優化，成交次數 > 20, 勝率 > 0.3, 最終資金 > 100 萬, 5 筆最長持倉時間平均 > 3，按穩健夏普比率從高到低排序）：\n","|   iter    |  target   |  ma_long  | ma_short  | stop_loss | will_b... | will_p... | will_p... | will_s... |\n","-------------------------------------------------------------------------------------------------------------\n","| \u001b[39m1        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m34.98    \u001b[39m | \u001b[39m34.01    \u001b[39m | \u001b[39m0.003464 \u001b[39m | \u001b[39m-62.04   \u001b[39m | \u001b[39m26.24    \u001b[39m | \u001b[39m26.24    \u001b[39m | \u001b[39m-48.26   \u001b[39m |\n","| \u001b[39m2        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m54.65    \u001b[39m | \u001b[39m27.02    \u001b[39m | \u001b[39m0.003416 \u001b[39m | \u001b[39m-79.38   \u001b[39m | \u001b[39m58.8     \u001b[39m | \u001b[39m53.3     \u001b[39m | \u001b[39m-43.63   \u001b[39m |\n","| \u001b[35m3        \u001b[39m | \u001b[35m0.1234   \u001b[39m | \u001b[35m27.27    \u001b[39m | \u001b[35m18.67    \u001b[39m | \u001b[35m0.002608 \u001b[39m | \u001b[35m-64.26   \u001b[39m | \u001b[35m37.28    \u001b[39m | \u001b[35m31.65    \u001b[39m | \u001b[35m-31.64   \u001b[39m |\n","| \u001b[39m4        \u001b[39m | \u001b[39m-0.1677  \u001b[39m | \u001b[39m25.58    \u001b[39m | \u001b[39m20.84    \u001b[39m | \u001b[39m0.002733 \u001b[39m | \u001b[39m-66.32   \u001b[39m | \u001b[39m51.41    \u001b[39m | \u001b[39m27.99    \u001b[39m | \u001b[39m-34.57   \u001b[39m |\n","| \u001b[39m5        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m43.7     \u001b[39m | \u001b[39m15.93    \u001b[39m | \u001b[39m0.003215 \u001b[39m | \u001b[39m-74.88   \u001b[39m | \u001b[39m22.6     \u001b[39m | \u001b[39m57.96    \u001b[39m | \u001b[39m-21.03   \u001b[39m |\n","| \u001b[39m6        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m52.34    \u001b[39m | \u001b[39m21.09    \u001b[39m | \u001b[39m0.002195 \u001b[39m | \u001b[39m-59.47   \u001b[39m | \u001b[39m37.61    \u001b[39m | \u001b[39m24.88    \u001b[39m | \u001b[39m-35.14   \u001b[39m |\n","| \u001b[39m7        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m21.38    \u001b[39m | \u001b[39m33.19    \u001b[39m | \u001b[39m0.002518 \u001b[39m | \u001b[39m-60.12   \u001b[39m | \u001b[39m32.47    \u001b[39m | \u001b[39m40.8     \u001b[39m | \u001b[39m-33.6    \u001b[39m |\n","| \u001b[39m8        \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m27.39    \u001b[39m | \u001b[39m34.39    \u001b[39m | \u001b[39m0.00355  \u001b[39m | \u001b[39m-51.82   \u001b[39m | \u001b[39m55.79    \u001b[39m | \u001b[39m43.92    \u001b[39m | \u001b[39m-22.34   \u001b[39m |\n","| \u001b[39m9        \u001b[39m | \u001b[39m-0.3263  \u001b[39m | \u001b[39m23.54    \u001b[39m | \u001b[39m18.92    \u001b[39m | \u001b[39m0.00209  \u001b[39m | \u001b[39m-70.24   \u001b[39m | \u001b[39m35.55    \u001b[39m | \u001b[39m30.85    \u001b[39m | \u001b[39m-25.14   \u001b[39m |\n","| \u001b[39m10       \u001b[39m | \u001b[39m-0.05649 \u001b[39m | \u001b[39m34.27    \u001b[39m | \u001b[39m20.62    \u001b[39m | \u001b[39m0.003085 \u001b[39m | \u001b[39m-75.77   \u001b[39m | \u001b[39m52.09    \u001b[39m | \u001b[39m22.98    \u001b[39m | \u001b[39m-20.39   \u001b[39m |\n","| \u001b[39m11       \u001b[39m | \u001b[39m0.02042  \u001b[39m | \u001b[39m21.99    \u001b[39m | \u001b[39m18.0     \u001b[39m | \u001b[39m0.003075 \u001b[39m | \u001b[39m-62.73   \u001b[39m | \u001b[39m45.81    \u001b[39m | \u001b[39m20.68    \u001b[39m | \u001b[39m-21.19   \u001b[39m |\n","| \u001b[39m12       \u001b[39m | \u001b[39m0.006238 \u001b[39m | \u001b[39m25.34    \u001b[39m | \u001b[39m17.03    \u001b[39m | \u001b[39m0.003689 \u001b[39m | \u001b[39m-62.49   \u001b[39m | \u001b[39m34.98    \u001b[39m | \u001b[39m33.63    \u001b[39m | \u001b[39m-33.61   \u001b[39m |\n","| \u001b[39m13       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m21.12    \u001b[39m | \u001b[39m16.21    \u001b[39m | \u001b[39m0.002483 \u001b[39m | \u001b[39m-79.09   \u001b[39m | \u001b[39m29.78    \u001b[39m | \u001b[39m23.5     \u001b[39m | \u001b[39m-43.42   \u001b[39m |\n","| \u001b[39m14       \u001b[39m | \u001b[39m-0.4234  \u001b[39m | \u001b[39m22.39    \u001b[39m | \u001b[39m15.65    \u001b[39m | \u001b[39m0.002922 \u001b[39m | \u001b[39m-76.21   \u001b[39m | \u001b[39m54.91    \u001b[39m | \u001b[39m39.87    \u001b[39m | \u001b[39m-24.16   \u001b[39m |\n","| \u001b[39m15       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.52    \u001b[39m | \u001b[39m23.38    \u001b[39m | \u001b[39m0.002592 \u001b[39m | \u001b[39m-77.3    \u001b[39m | \u001b[39m58.85    \u001b[39m | \u001b[39m20.01    \u001b[39m | \u001b[39m-29.26   \u001b[39m |\n","| \u001b[39m16       \u001b[39m | \u001b[39m0.07902  \u001b[39m | \u001b[39m26.43    \u001b[39m | \u001b[39m15.97    \u001b[39m | \u001b[39m0.002745 \u001b[39m | \u001b[39m-58.66   \u001b[39m | \u001b[39m46.81    \u001b[39m | \u001b[39m35.4     \u001b[39m | \u001b[39m-20.95   \u001b[39m |\n","| \u001b[39m17       \u001b[39m | \u001b[39m-0.01836 \u001b[39m | \u001b[39m20.5     \u001b[39m | \u001b[39m15.43    \u001b[39m | \u001b[39m0.002305 \u001b[39m | \u001b[39m-52.54   \u001b[39m | \u001b[39m51.7     \u001b[39m | \u001b[39m33.68    \u001b[39m | \u001b[39m-43.96   \u001b[39m |\n","| \u001b[39m18       \u001b[39m | \u001b[39m-0.3579  \u001b[39m | \u001b[39m20.02    \u001b[39m | \u001b[39m15.58    \u001b[39m | \u001b[39m0.002549 \u001b[39m | \u001b[39m-70.0    \u001b[39m | \u001b[39m54.26    \u001b[39m | \u001b[39m47.66    \u001b[39m | \u001b[39m-40.19   \u001b[39m |\n","| \u001b[39m19       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m23.65    \u001b[39m | \u001b[39m15.12    \u001b[39m | \u001b[39m0.002022 \u001b[39m | \u001b[39m-53.98   \u001b[39m | \u001b[39m21.31    \u001b[39m | \u001b[39m22.95    \u001b[39m | \u001b[39m-20.4    \u001b[39m |\n","| \u001b[39m20       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m32.12    \u001b[39m | \u001b[39m15.03    \u001b[39m | \u001b[39m0.002196 \u001b[39m | \u001b[39m-74.17   \u001b[39m | \u001b[39m45.62    \u001b[39m | \u001b[39m30.47    \u001b[39m | \u001b[39m-22.83   \u001b[39m |\n","| \u001b[39m21       \u001b[39m | \u001b[39m-0.2852  \u001b[39m | \u001b[39m20.41    \u001b[39m | \u001b[39m16.05    \u001b[39m | \u001b[39m0.00355  \u001b[39m | \u001b[39m-63.04   \u001b[39m | \u001b[39m48.78    \u001b[39m | \u001b[39m33.42    \u001b[39m | \u001b[39m-31.68   \u001b[39m |\n","| \u001b[39m22       \u001b[39m | \u001b[39m-0.2135  \u001b[39m | \u001b[39m21.95    \u001b[39m | \u001b[39m18.29    \u001b[39m | \u001b[39m0.002293 \u001b[39m | \u001b[39m-55.4    \u001b[39m | \u001b[39m46.91    \u001b[39m | \u001b[39m28.96    \u001b[39m | \u001b[39m-32.43   \u001b[39m |\n","| \u001b[35m23       \u001b[39m | \u001b[35m0.1269   \u001b[39m | \u001b[35m28.98    \u001b[39m | \u001b[35m16.45    \u001b[39m | \u001b[35m0.002155 \u001b[39m | \u001b[35m-57.31   \u001b[39m | \u001b[35m47.29    \u001b[39m | \u001b[35m37.53    \u001b[39m | \u001b[35m-35.23   \u001b[39m |\n","| \u001b[35m24       \u001b[39m | \u001b[35m0.1515   \u001b[39m | \u001b[35m25.51    \u001b[39m | \u001b[35m16.59    \u001b[39m | \u001b[35m0.002129 \u001b[39m | \u001b[35m-65.29   \u001b[39m | \u001b[35m50.73    \u001b[39m | \u001b[35m38.5     \u001b[39m | \u001b[35m-43.57   \u001b[39m |\n","| \u001b[35m25       \u001b[39m | \u001b[35m0.2066   \u001b[39m | \u001b[35m24.61    \u001b[39m | \u001b[35m19.09    \u001b[39m | \u001b[35m0.003547 \u001b[39m | \u001b[35m-58.45   \u001b[39m | \u001b[35m59.62    \u001b[39m | \u001b[35m32.75    \u001b[39m | \u001b[35m-41.19   \u001b[39m |\n","| \u001b[39m26       \u001b[39m | \u001b[39m-0.2121  \u001b[39m | \u001b[39m21.82    \u001b[39m | \u001b[39m15.31    \u001b[39m | \u001b[39m0.002765 \u001b[39m | \u001b[39m-79.02   \u001b[39m | \u001b[39m59.37    \u001b[39m | \u001b[39m50.14    \u001b[39m | \u001b[39m-29.62   \u001b[39m |\n","| \u001b[39m27       \u001b[39m | \u001b[39m-0.2545  \u001b[39m | \u001b[39m22.55    \u001b[39m | \u001b[39m15.26    \u001b[39m | \u001b[39m0.00269  \u001b[39m | \u001b[39m-66.54   \u001b[39m | \u001b[39m56.39    \u001b[39m | \u001b[39m46.32    \u001b[39m | \u001b[39m-25.4    \u001b[39m |\n","| \u001b[39m28       \u001b[39m | \u001b[39m0.1202   \u001b[39m | \u001b[39m32.97    \u001b[39m | \u001b[39m23.07    \u001b[39m | \u001b[39m0.002876 \u001b[39m | \u001b[39m-63.76   \u001b[39m | \u001b[39m57.94    \u001b[39m | \u001b[39m22.01    \u001b[39m | \u001b[39m-20.7    \u001b[39m |\n","| \u001b[39m29       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m47.84    \u001b[39m | \u001b[39m27.22    \u001b[39m | \u001b[39m0.002282 \u001b[39m | \u001b[39m-74.56   \u001b[39m | \u001b[39m58.3     \u001b[39m | \u001b[39m25.61    \u001b[39m | \u001b[39m-20.59   \u001b[39m |\n","| \u001b[39m30       \u001b[39m | \u001b[39m-0.1002  \u001b[39m | \u001b[39m23.1     \u001b[39m | \u001b[39m16.71    \u001b[39m | \u001b[39m0.002224 \u001b[39m | \u001b[39m-53.61   \u001b[39m | \u001b[39m57.04    \u001b[39m | \u001b[39m47.82    \u001b[39m | \u001b[39m-46.95   \u001b[39m |\n","| \u001b[39m31       \u001b[39m | \u001b[39m-0.1113  \u001b[39m | \u001b[39m20.1     \u001b[39m | \u001b[39m18.02    \u001b[39m | \u001b[39m0.002235 \u001b[39m | \u001b[39m-57.41   \u001b[39m | \u001b[39m59.09    \u001b[39m | \u001b[39m27.54    \u001b[39m | \u001b[39m-24.86   \u001b[39m |\n","| \u001b[39m32       \u001b[39m | \u001b[39m0.1625   \u001b[39m | \u001b[39m33.18    \u001b[39m | \u001b[39m18.09    \u001b[39m | \u001b[39m0.002208 \u001b[39m | \u001b[39m-50.04   \u001b[39m | \u001b[39m54.9     \u001b[39m | \u001b[39m20.49    \u001b[39m | \u001b[39m-22.49   \u001b[39m |\n","| \u001b[39m33       \u001b[39m | \u001b[39m0.09327  \u001b[39m | \u001b[39m27.66    \u001b[39m | \u001b[39m15.69    \u001b[39m | \u001b[39m0.002129 \u001b[39m | \u001b[39m-53.24   \u001b[39m | \u001b[39m59.44    \u001b[39m | \u001b[39m20.32    \u001b[39m | \u001b[39m-37.92   \u001b[39m |\n","| \u001b[39m34       \u001b[39m | \u001b[39m0.1048   \u001b[39m | \u001b[39m27.15    \u001b[39m | \u001b[39m15.09    \u001b[39m | \u001b[39m0.003432 \u001b[39m | \u001b[39m-50.89   \u001b[39m | \u001b[39m42.8     \u001b[39m | \u001b[39m56.18    \u001b[39m | \u001b[39m-49.53   \u001b[39m |\n","| \u001b[39m35       \u001b[39m | \u001b[39m-0.1902  \u001b[39m | \u001b[39m21.9     \u001b[39m | \u001b[39m20.97    \u001b[39m | \u001b[39m0.00268  \u001b[39m | \u001b[39m-67.33   \u001b[39m | \u001b[39m46.81    \u001b[39m | \u001b[39m59.99    \u001b[39m | \u001b[39m-46.22   \u001b[39m |\n","| \u001b[39m36       \u001b[39m | \u001b[39m0.1252   \u001b[39m | \u001b[39m30.2     \u001b[39m | \u001b[39m15.1     \u001b[39m | \u001b[39m0.002232 \u001b[39m | \u001b[39m-63.68   \u001b[39m | \u001b[39m56.56    \u001b[39m | \u001b[39m54.87    \u001b[39m | \u001b[39m-45.56   \u001b[39m |\n","| \u001b[39m37       \u001b[39m | \u001b[39m-0.4275  \u001b[39m | \u001b[39m21.77    \u001b[39m | \u001b[39m15.24    \u001b[39m | \u001b[39m0.003441 \u001b[39m | \u001b[39m-53.7    \u001b[39m | \u001b[39m50.81    \u001b[39m | \u001b[39m58.16    \u001b[39m | \u001b[39m-38.03   \u001b[39m |\n","| \u001b[39m38       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m22.52    \u001b[39m | \u001b[39m30.5     \u001b[39m | \u001b[39m0.002116 \u001b[39m | \u001b[39m-58.31   \u001b[39m | \u001b[39m58.66    \u001b[39m | \u001b[39m57.24    \u001b[39m | \u001b[39m-49.58   \u001b[39m |\n","| \u001b[39m39       \u001b[39m | \u001b[39m-0.3752  \u001b[39m | \u001b[39m24.43    \u001b[39m | \u001b[39m16.38    \u001b[39m | \u001b[39m0.003726 \u001b[39m | \u001b[39m-66.32   \u001b[39m | \u001b[39m40.02    \u001b[39m | \u001b[39m56.72    \u001b[39m | \u001b[39m-32.62   \u001b[39m |\n","| \u001b[39m40       \u001b[39m | \u001b[39m-0.4541  \u001b[39m | \u001b[39m25.16    \u001b[39m | \u001b[39m15.5     \u001b[39m | \u001b[39m0.003184 \u001b[39m | \u001b[39m-77.21   \u001b[39m | \u001b[39m40.08    \u001b[39m | \u001b[39m55.3     \u001b[39m | \u001b[39m-45.57   \u001b[39m |\n","| \u001b[39m41       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m34.42    \u001b[39m | \u001b[39m16.24    \u001b[39m | \u001b[39m0.003283 \u001b[39m | \u001b[39m-66.87   \u001b[39m | \u001b[39m37.54    \u001b[39m | \u001b[39m58.32    \u001b[39m | \u001b[39m-49.76   \u001b[39m |\n","| \u001b[39m42       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m21.8     \u001b[39m | \u001b[39m15.87    \u001b[39m | \u001b[39m0.00324  \u001b[39m | \u001b[39m-79.92   \u001b[39m | \u001b[39m45.76    \u001b[39m | \u001b[39m55.66    \u001b[39m | \u001b[39m-33.76   \u001b[39m |\n","| \u001b[39m43       \u001b[39m | \u001b[39m-0.4169  \u001b[39m | \u001b[39m21.72    \u001b[39m | \u001b[39m17.85    \u001b[39m | \u001b[39m0.002455 \u001b[39m | \u001b[39m-61.7    \u001b[39m | \u001b[39m44.95    \u001b[39m | \u001b[39m52.68    \u001b[39m | \u001b[39m-38.22   \u001b[39m |\n","| \u001b[39m44       \u001b[39m | \u001b[39m-0.2983  \u001b[39m | \u001b[39m23.98    \u001b[39m | \u001b[39m15.36    \u001b[39m | \u001b[39m0.003597 \u001b[39m | \u001b[39m-54.42   \u001b[39m | \u001b[39m58.66    \u001b[39m | \u001b[39m41.52    \u001b[39m | \u001b[39m-35.82   \u001b[39m |\n","| \u001b[35m45       \u001b[39m | \u001b[35m0.4116   \u001b[39m | \u001b[35m29.3     \u001b[39m | \u001b[35m15.56    \u001b[39m | \u001b[35m0.003479 \u001b[39m | \u001b[35m-59.25   \u001b[39m | \u001b[35m58.43    \u001b[39m | \u001b[35m29.85    \u001b[39m | \u001b[35m-32.69   \u001b[39m |\n","| \u001b[39m46       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m24.68    \u001b[39m | \u001b[39m27.99    \u001b[39m | \u001b[39m0.00302  \u001b[39m | \u001b[39m-52.99   \u001b[39m | \u001b[39m52.02    \u001b[39m | \u001b[39m21.68    \u001b[39m | \u001b[39m-25.26   \u001b[39m |\n","| \u001b[39m47       \u001b[39m | \u001b[39m0.008076 \u001b[39m | \u001b[39m29.66    \u001b[39m | \u001b[39m15.3     \u001b[39m | \u001b[39m0.003162 \u001b[39m | \u001b[39m-63.52   \u001b[39m | \u001b[39m56.15    \u001b[39m | \u001b[39m44.73    \u001b[39m | \u001b[39m-35.95   \u001b[39m |\n","| \u001b[39m48       \u001b[39m | \u001b[39m-0.4138  \u001b[39m | \u001b[39m20.25    \u001b[39m | \u001b[39m16.81    \u001b[39m | \u001b[39m0.002629 \u001b[39m | \u001b[39m-50.69   \u001b[39m | \u001b[39m44.6     \u001b[39m | \u001b[39m46.61    \u001b[39m | \u001b[39m-45.73   \u001b[39m |\n","| \u001b[39m49       \u001b[39m | \u001b[39m0.07686  \u001b[39m | \u001b[39m34.69    \u001b[39m | \u001b[39m15.45    \u001b[39m | \u001b[39m0.003239 \u001b[39m | \u001b[39m-50.36   \u001b[39m | \u001b[39m51.74    \u001b[39m | \u001b[39m40.38    \u001b[39m | \u001b[39m-43.96   \u001b[39m |\n","| \u001b[39m50       \u001b[39m | \u001b[39m0.2584   \u001b[39m | \u001b[39m28.8     \u001b[39m | \u001b[39m15.12    \u001b[39m | \u001b[39m0.003267 \u001b[39m | \u001b[39m-61.67   \u001b[39m | \u001b[39m54.29    \u001b[39m | \u001b[39m21.58    \u001b[39m | \u001b[39m-20.83   \u001b[39m |\n","| \u001b[39m51       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m26.16    \u001b[39m | \u001b[39m15.05    \u001b[39m | \u001b[39m0.002339 \u001b[39m | \u001b[39m-60.95   \u001b[39m | \u001b[39m49.39    \u001b[39m | \u001b[39m21.87    \u001b[39m | \u001b[39m-43.83   \u001b[39m |\n","| \u001b[39m52       \u001b[39m | \u001b[39m-0.488   \u001b[39m | \u001b[39m25.7     \u001b[39m | \u001b[39m15.39    \u001b[39m | \u001b[39m0.002342 \u001b[39m | \u001b[39m-51.44   \u001b[39m | \u001b[39m38.32    \u001b[39m | \u001b[39m50.97    \u001b[39m | \u001b[39m-31.63   \u001b[39m |\n","| \u001b[39m53       \u001b[39m | \u001b[39m-0.02077 \u001b[39m | \u001b[39m34.39    \u001b[39m | \u001b[39m18.58    \u001b[39m | \u001b[39m0.003052 \u001b[39m | \u001b[39m-55.11   \u001b[39m | \u001b[39m48.04    \u001b[39m | \u001b[39m53.54    \u001b[39m | \u001b[39m-36.16   \u001b[39m |\n","| \u001b[39m54       \u001b[39m | \u001b[39m-0.4934  \u001b[39m | \u001b[39m26.13    \u001b[39m | \u001b[39m16.65    \u001b[39m | \u001b[39m0.0022   \u001b[39m | \u001b[39m-57.48   \u001b[39m | \u001b[39m48.13    \u001b[39m | \u001b[39m59.17    \u001b[39m | \u001b[39m-25.93   \u001b[39m |\n","| \u001b[39m55       \u001b[39m | \u001b[39m-0.3054  \u001b[39m | \u001b[39m21.22    \u001b[39m | \u001b[39m15.45    \u001b[39m | \u001b[39m0.00267  \u001b[39m | \u001b[39m-50.83   \u001b[39m | \u001b[39m45.57    \u001b[39m | \u001b[39m39.71    \u001b[39m | \u001b[39m-29.69   \u001b[39m |\n","| \u001b[39m56       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.01    \u001b[39m | \u001b[39m25.73    \u001b[39m | \u001b[39m0.002663 \u001b[39m | \u001b[39m-71.91   \u001b[39m | \u001b[39m58.7     \u001b[39m | \u001b[39m40.93    \u001b[39m | \u001b[39m-35.03   \u001b[39m |\n","| \u001b[39m57       \u001b[39m | \u001b[39m-0.3415  \u001b[39m | \u001b[39m21.21    \u001b[39m | \u001b[39m16.68    \u001b[39m | \u001b[39m0.003493 \u001b[39m | \u001b[39m-66.61   \u001b[39m | \u001b[39m43.87    \u001b[39m | \u001b[39m46.95    \u001b[39m | \u001b[39m-48.28   \u001b[39m |\n","| \u001b[39m58       \u001b[39m | \u001b[39m-0.09025 \u001b[39m | \u001b[39m33.37    \u001b[39m | \u001b[39m15.05    \u001b[39m | \u001b[39m0.00363  \u001b[39m | \u001b[39m-51.72   \u001b[39m | \u001b[39m49.47    \u001b[39m | \u001b[39m48.92    \u001b[39m | \u001b[39m-27.19   \u001b[39m |\n","| \u001b[39m59       \u001b[39m | \u001b[39m-0.4508  \u001b[39m | \u001b[39m20.5     \u001b[39m | \u001b[39m15.07    \u001b[39m | \u001b[39m0.002985 \u001b[39m | \u001b[39m-61.21   \u001b[39m | \u001b[39m40.34    \u001b[39m | \u001b[39m44.23    \u001b[39m | \u001b[39m-28.14   \u001b[39m |\n","| \u001b[39m60       \u001b[39m | \u001b[39m-0.3568  \u001b[39m | \u001b[39m37.13    \u001b[39m | \u001b[39m15.9     \u001b[39m | \u001b[39m0.002235 \u001b[39m | \u001b[39m-51.0    \u001b[39m | \u001b[39m59.15    \u001b[39m | \u001b[39m50.69    \u001b[39m | \u001b[39m-37.56   \u001b[39m |\n","| \u001b[39m61       \u001b[39m | \u001b[39m-0.3451  \u001b[39m | \u001b[39m36.45    \u001b[39m | \u001b[39m15.87    \u001b[39m | \u001b[39m0.002701 \u001b[39m | \u001b[39m-60.53   \u001b[39m | \u001b[39m58.6     \u001b[39m | \u001b[39m58.56    \u001b[39m | \u001b[39m-27.55   \u001b[39m |\n","| \u001b[39m62       \u001b[39m | \u001b[39m0.2038   \u001b[39m | \u001b[39m34.21    \u001b[39m | \u001b[39m16.61    \u001b[39m | \u001b[39m0.003481 \u001b[39m | \u001b[39m-75.03   \u001b[39m | \u001b[39m58.97    \u001b[39m | \u001b[39m52.84    \u001b[39m | \u001b[39m-20.38   \u001b[39m |\n","| \u001b[39m63       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m49.87    \u001b[39m | \u001b[39m16.55    \u001b[39m | \u001b[39m0.003933 \u001b[39m | \u001b[39m-50.48   \u001b[39m | \u001b[39m52.05    \u001b[39m | \u001b[39m53.1     \u001b[39m | \u001b[39m-25.97   \u001b[39m |\n","| \u001b[39m64       \u001b[39m | \u001b[39m-0.07953 \u001b[39m | \u001b[39m24.92    \u001b[39m | \u001b[39m15.48    \u001b[39m | \u001b[39m0.003754 \u001b[39m | \u001b[39m-76.27   \u001b[39m | \u001b[39m54.84    \u001b[39m | \u001b[39m53.39    \u001b[39m | \u001b[39m-49.82   \u001b[39m |\n","| \u001b[39m65       \u001b[39m | \u001b[39m-0.4946  \u001b[39m | \u001b[39m30.23    \u001b[39m | \u001b[39m17.81    \u001b[39m | \u001b[39m0.002481 \u001b[39m | \u001b[39m-68.61   \u001b[39m | \u001b[39m59.86    \u001b[39m | \u001b[39m59.89    \u001b[39m | \u001b[39m-30.65   \u001b[39m |\n","| \u001b[39m66       \u001b[39m | \u001b[39m-0.6956  \u001b[39m | \u001b[39m20.53    \u001b[39m | \u001b[39m17.08    \u001b[39m | \u001b[39m0.002562 \u001b[39m | \u001b[39m-58.26   \u001b[39m | \u001b[39m32.52    \u001b[39m | \u001b[39m59.23    \u001b[39m | \u001b[39m-21.67   \u001b[39m |\n","| \u001b[39m67       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m20.21    \u001b[39m | \u001b[39m20.17    \u001b[39m | \u001b[39m0.003629 \u001b[39m | \u001b[39m-54.49   \u001b[39m | \u001b[39m23.38    \u001b[39m | \u001b[39m59.44    \u001b[39m | \u001b[39m-36.81   \u001b[39m |\n","| \u001b[39m68       \u001b[39m | \u001b[39m-0.1239  \u001b[39m | \u001b[39m30.5     \u001b[39m | \u001b[39m15.62    \u001b[39m | \u001b[39m0.003304 \u001b[39m | \u001b[39m-63.73   \u001b[39m | \u001b[39m43.75    \u001b[39m | \u001b[39m49.73    \u001b[39m | \u001b[39m-20.13   \u001b[39m |\n","| \u001b[39m69       \u001b[39m | \u001b[39m0.107    \u001b[39m | \u001b[39m49.42    \u001b[39m | \u001b[39m17.57    \u001b[39m | \u001b[39m0.002738 \u001b[39m | \u001b[39m-50.47   \u001b[39m | \u001b[39m56.4     \u001b[39m | \u001b[39m20.73    \u001b[39m | \u001b[39m-21.01   \u001b[39m |\n","| \u001b[39m70       \u001b[39m | \u001b[39m0.1374   \u001b[39m | \u001b[39m32.13    \u001b[39m | \u001b[39m15.37    \u001b[39m | \u001b[39m0.002017 \u001b[39m | \u001b[39m-63.38   \u001b[39m | \u001b[39m59.25    \u001b[39m | \u001b[39m43.53    \u001b[39m | \u001b[39m-49.58   \u001b[39m |\n","| \u001b[39m71       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m45.62    \u001b[39m | \u001b[39m15.4     \u001b[39m | \u001b[39m0.003942 \u001b[39m | \u001b[39m-53.81   \u001b[39m | \u001b[39m59.07    \u001b[39m | \u001b[39m28.77    \u001b[39m | \u001b[39m-32.32   \u001b[39m |\n","| \u001b[39m72       \u001b[39m | \u001b[39m0.09164  \u001b[39m | \u001b[39m58.26    \u001b[39m | \u001b[39m34.22    \u001b[39m | \u001b[39m0.0038   \u001b[39m | \u001b[39m-52.63   \u001b[39m | \u001b[39m22.4     \u001b[39m | \u001b[39m58.37    \u001b[39m | \u001b[39m-45.76   \u001b[39m |\n","| \u001b[39m73       \u001b[39m | \u001b[39m0.05413  \u001b[39m | \u001b[39m59.99    \u001b[39m | \u001b[39m33.34    \u001b[39m | \u001b[39m0.002465 \u001b[39m | \u001b[39m-67.54   \u001b[39m | \u001b[39m20.33    \u001b[39m | \u001b[39m50.94    \u001b[39m | \u001b[39m-43.32   \u001b[39m |\n","| \u001b[39m74       \u001b[39m | \u001b[39m-0.4919  \u001b[39m | \u001b[39m21.03    \u001b[39m | \u001b[39m16.27    \u001b[39m | \u001b[39m0.003896 \u001b[39m | \u001b[39m-62.76   \u001b[39m | \u001b[39m59.79    \u001b[39m | \u001b[39m58.1     \u001b[39m | \u001b[39m-21.78   \u001b[39m |\n","| \u001b[39m75       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m59.65    \u001b[39m | \u001b[39m17.67    \u001b[39m | \u001b[39m0.002683 \u001b[39m | \u001b[39m-55.71   \u001b[39m | \u001b[39m20.72    \u001b[39m | \u001b[39m57.87    \u001b[39m | \u001b[39m-45.22   \u001b[39m |\n","| \u001b[39m76       \u001b[39m | \u001b[39m0.09446  \u001b[39m | \u001b[39m57.65    \u001b[39m | \u001b[39m34.72    \u001b[39m | \u001b[39m0.003619 \u001b[39m | \u001b[39m-51.96   \u001b[39m | \u001b[39m22.03    \u001b[39m | \u001b[39m53.45    \u001b[39m | \u001b[39m-29.75   \u001b[39m |\n","| \u001b[39m77       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m59.37    \u001b[39m | \u001b[39m34.7     \u001b[39m | \u001b[39m0.003575 \u001b[39m | \u001b[39m-56.45   \u001b[39m | \u001b[39m33.55    \u001b[39m | \u001b[39m48.07    \u001b[39m | \u001b[39m-41.27   \u001b[39m |\n","| \u001b[39m78       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m51.84    \u001b[39m | \u001b[39m34.27    \u001b[39m | \u001b[39m0.002372 \u001b[39m | \u001b[39m-76.35   \u001b[39m | \u001b[39m20.94    \u001b[39m | \u001b[39m57.03    \u001b[39m | \u001b[39m-42.35   \u001b[39m |\n","| \u001b[39m79       \u001b[39m | \u001b[39m-0.022   \u001b[39m | \u001b[39m34.21    \u001b[39m | \u001b[39m15.82    \u001b[39m | \u001b[39m0.002344 \u001b[39m | \u001b[39m-51.87   \u001b[39m | \u001b[39m51.97    \u001b[39m | \u001b[39m53.13    \u001b[39m | \u001b[39m-49.14   \u001b[39m |\n","| \u001b[39m80       \u001b[39m | \u001b[39m-0.3766  \u001b[39m | \u001b[39m20.0     \u001b[39m | \u001b[39m15.19    \u001b[39m | \u001b[39m0.002905 \u001b[39m | \u001b[39m-51.02   \u001b[39m | \u001b[39m47.77    \u001b[39m | \u001b[39m52.34    \u001b[39m | \u001b[39m-21.54   \u001b[39m |\n","| \u001b[39m81       \u001b[39m | \u001b[39m-0.3055  \u001b[39m | \u001b[39m26.19    \u001b[39m | \u001b[39m16.58    \u001b[39m | \u001b[39m0.002346 \u001b[39m | \u001b[39m-50.67   \u001b[39m | \u001b[39m59.68    \u001b[39m | \u001b[39m57.79    \u001b[39m | \u001b[39m-31.71   \u001b[39m |\n","| \u001b[39m82       \u001b[39m | \u001b[39m0.02404  \u001b[39m | \u001b[39m59.91    \u001b[39m | \u001b[39m30.88    \u001b[39m | \u001b[39m0.003992 \u001b[39m | \u001b[39m-52.25   \u001b[39m | \u001b[39m20.61    \u001b[39m | \u001b[39m39.88    \u001b[39m | \u001b[39m-20.24   \u001b[39m |\n","| \u001b[39m83       \u001b[39m | \u001b[39m0.1584   \u001b[39m | \u001b[39m58.57    \u001b[39m | \u001b[39m31.57    \u001b[39m | \u001b[39m0.00384  \u001b[39m | \u001b[39m-65.75   \u001b[39m | \u001b[39m20.41    \u001b[39m | \u001b[39m47.58    \u001b[39m | \u001b[39m-21.89   \u001b[39m |\n","| \u001b[39m84       \u001b[39m | \u001b[39m-0.05279 \u001b[39m | \u001b[39m45.66    \u001b[39m | \u001b[39m33.89    \u001b[39m | \u001b[39m0.002712 \u001b[39m | \u001b[39m-50.3    \u001b[39m | \u001b[39m25.46    \u001b[39m | \u001b[39m53.08    \u001b[39m | \u001b[39m-20.87   \u001b[39m |\n","| \u001b[39m85       \u001b[39m | \u001b[39m0.3117   \u001b[39m | \u001b[39m55.68    \u001b[39m | \u001b[39m33.16    \u001b[39m | \u001b[39m0.003709 \u001b[39m | \u001b[39m-69.79   \u001b[39m | \u001b[39m20.02    \u001b[39m | \u001b[39m32.56    \u001b[39m | \u001b[39m-21.78   \u001b[39m |\n","| \u001b[39m86       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m59.11    \u001b[39m | \u001b[39m34.17    \u001b[39m | \u001b[39m0.002836 \u001b[39m | \u001b[39m-79.17   \u001b[39m | \u001b[39m22.03    \u001b[39m | \u001b[39m29.19    \u001b[39m | \u001b[39m-38.21   \u001b[39m |\n","| \u001b[39m87       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m58.75    \u001b[39m | \u001b[39m34.7     \u001b[39m | \u001b[39m0.003263 \u001b[39m | \u001b[39m-55.76   \u001b[39m | \u001b[39m24.94    \u001b[39m | \u001b[39m59.46    \u001b[39m | \u001b[39m-21.62   \u001b[39m |\n","| \u001b[39m88       \u001b[39m | \u001b[39m-0.05406 \u001b[39m | \u001b[39m48.09    \u001b[39m | \u001b[39m25.92    \u001b[39m | \u001b[39m0.003026 \u001b[39m | \u001b[39m-53.51   \u001b[39m | \u001b[39m20.96    \u001b[39m | \u001b[39m40.91    \u001b[39m | \u001b[39m-26.53   \u001b[39m |\n","| \u001b[39m89       \u001b[39m | \u001b[39m-0.07514 \u001b[39m | \u001b[39m53.37    \u001b[39m | \u001b[39m33.41    \u001b[39m | \u001b[39m0.003938 \u001b[39m | \u001b[39m-60.86   \u001b[39m | \u001b[39m23.01    \u001b[39m | \u001b[39m38.29    \u001b[39m | \u001b[39m-20.58   \u001b[39m |\n","| \u001b[39m90       \u001b[39m | \u001b[39m-0.2192  \u001b[39m | \u001b[39m32.39    \u001b[39m | \u001b[39m15.83    \u001b[39m | \u001b[39m0.002063 \u001b[39m | \u001b[39m-54.18   \u001b[39m | \u001b[39m33.95    \u001b[39m | \u001b[39m48.08    \u001b[39m | \u001b[39m-21.81   \u001b[39m |\n","| \u001b[39m91       \u001b[39m | \u001b[39m0.01434  \u001b[39m | \u001b[39m59.84    \u001b[39m | \u001b[39m32.8     \u001b[39m | \u001b[39m0.003045 \u001b[39m | \u001b[39m-50.78   \u001b[39m | \u001b[39m20.05    \u001b[39m | \u001b[39m23.81    \u001b[39m | \u001b[39m-22.48   \u001b[39m |\n","| \u001b[39m92       \u001b[39m | \u001b[39m-0.08972 \u001b[39m | \u001b[39m58.51    \u001b[39m | \u001b[39m18.34    \u001b[39m | \u001b[39m0.003102 \u001b[39m | \u001b[39m-62.25   \u001b[39m | \u001b[39m20.27    \u001b[39m | \u001b[39m34.67    \u001b[39m | \u001b[39m-21.06   \u001b[39m |\n","| \u001b[39m93       \u001b[39m | \u001b[39m0.1803   \u001b[39m | \u001b[39m53.95    \u001b[39m | \u001b[39m18.4     \u001b[39m | \u001b[39m0.002386 \u001b[39m | \u001b[39m-52.15   \u001b[39m | \u001b[39m22.54    \u001b[39m | \u001b[39m26.88    \u001b[39m | \u001b[39m-21.95   \u001b[39m |\n","| \u001b[39m94       \u001b[39m | \u001b[39m-0.1776  \u001b[39m | \u001b[39m45.42    \u001b[39m | \u001b[39m32.31    \u001b[39m | \u001b[39m0.002166 \u001b[39m | \u001b[39m-55.04   \u001b[39m | \u001b[39m21.02    \u001b[39m | \u001b[39m27.37    \u001b[39m | \u001b[39m-22.15   \u001b[39m |\n","| \u001b[39m95       \u001b[39m | \u001b[39m-0.2256  \u001b[39m | \u001b[39m35.99    \u001b[39m | \u001b[39m34.99    \u001b[39m | \u001b[39m0.003793 \u001b[39m | \u001b[39m-54.86   \u001b[39m | \u001b[39m20.07    \u001b[39m | \u001b[39m47.05    \u001b[39m | \u001b[39m-22.87   \u001b[39m |\n","| \u001b[39m96       \u001b[39m | \u001b[39m-0.1061  \u001b[39m | \u001b[39m38.12    \u001b[39m | \u001b[39m23.78    \u001b[39m | \u001b[39m0.003089 \u001b[39m | \u001b[39m-51.93   \u001b[39m | \u001b[39m21.48    \u001b[39m | \u001b[39m49.52    \u001b[39m | \u001b[39m-21.32   \u001b[39m |\n","| \u001b[39m97       \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m45.69    \u001b[39m | \u001b[39m23.66    \u001b[39m | \u001b[39m0.003977 \u001b[39m | \u001b[39m-65.94   \u001b[39m | \u001b[39m20.96    \u001b[39m | \u001b[39m25.2     \u001b[39m | \u001b[39m-20.02   \u001b[39m |\n","| \u001b[39m98       \u001b[39m | \u001b[39m-0.03408 \u001b[39m | \u001b[39m47.25    \u001b[39m | \u001b[39m30.45    \u001b[39m | \u001b[39m0.002912 \u001b[39m | \u001b[39m-50.03   \u001b[39m | \u001b[39m21.78    \u001b[39m | \u001b[39m53.34    \u001b[39m | \u001b[39m-35.23   \u001b[39m |\n","| \u001b[39m99       \u001b[39m | \u001b[39m0.1151   \u001b[39m | \u001b[39m58.95    \u001b[39m | \u001b[39m17.05    \u001b[39m | \u001b[39m0.002493 \u001b[39m | \u001b[39m-52.56   \u001b[39m | \u001b[39m20.44    \u001b[39m | \u001b[39m42.11    \u001b[39m | \u001b[39m-20.63   \u001b[39m |\n","| \u001b[39m100      \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m53.84    \u001b[39m | \u001b[39m32.96    \u001b[39m | \u001b[39m0.002095 \u001b[39m | \u001b[39m-56.13   \u001b[39m | \u001b[39m20.11    \u001b[39m | \u001b[39m43.36    \u001b[39m | \u001b[39m-32.91   \u001b[39m |\n","| \u001b[39m101      \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m39.38    \u001b[39m | \u001b[39m25.49    \u001b[39m | \u001b[39m0.002446 \u001b[39m | \u001b[39m-50.57   \u001b[39m | \u001b[39m27.26    \u001b[39m | \u001b[39m35.9     \u001b[39m | \u001b[39m-20.0    \u001b[39m |\n","| \u001b[39m102      \u001b[39m | \u001b[39m0.05954  \u001b[39m | \u001b[39m29.67    \u001b[39m | \u001b[39m15.65    \u001b[39m | \u001b[39m0.003289 \u001b[39m | \u001b[39m-51.91   \u001b[39m | \u001b[39m48.88    \u001b[39m | \u001b[39m45.82    \u001b[39m | \u001b[39m-38.93   \u001b[39m |\n","| \u001b[39m103      \u001b[39m | \u001b[39m0.02816  \u001b[39m | \u001b[39m37.82    \u001b[39m | \u001b[39m31.97    \u001b[39m | \u001b[39m0.002991 \u001b[39m | \u001b[39m-52.55   \u001b[39m | \u001b[39m23.42    \u001b[39m | \u001b[39m58.39    \u001b[39m | \u001b[39m-25.09   \u001b[39m |\n","| \u001b[39m104      \u001b[39m | \u001b[39m-0.4522  \u001b[39m | \u001b[39m24.54    \u001b[39m | \u001b[39m15.6     \u001b[39m | \u001b[39m0.002048 \u001b[39m | \u001b[39m-53.37   \u001b[39m | \u001b[39m38.69    \u001b[39m | \u001b[39m48.67    \u001b[39m | \u001b[39m-20.02   \u001b[39m |\n","| \u001b[39m105      \u001b[39m | \u001b[39m-0.1992  \u001b[39m | \u001b[39m32.88    \u001b[39m | \u001b[39m23.27    \u001b[39m | \u001b[39m0.003264 \u001b[39m | \u001b[39m-54.07   \u001b[39m | \u001b[39m31.88    \u001b[39m | \u001b[39m58.44    \u001b[39m | \u001b[39m-20.97   \u001b[39m |\n","| \u001b[39m106      \u001b[39m | \u001b[39m0.1622   \u001b[39m | \u001b[39m51.71    \u001b[39m | \u001b[39m21.62    \u001b[39m | \u001b[39m0.00338  \u001b[39m | \u001b[39m-50.93   \u001b[39m | \u001b[39m22.29    \u001b[39m | \u001b[39m50.66    \u001b[39m | \u001b[39m-21.37   \u001b[39m |\n","| \u001b[39m107      \u001b[39m | \u001b[39m-0.4917  \u001b[39m | \u001b[39m21.85    \u001b[39m | \u001b[39m15.55    \u001b[39m | \u001b[39m0.003364 \u001b[39m | \u001b[39m-65.87   \u001b[39m | \u001b[39m55.87    \u001b[39m | \u001b[39m58.97    \u001b[39m | \u001b[39m-37.34   \u001b[39m |\n","| \u001b[39m108      \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m38.66    \u001b[39m | \u001b[39m15.27    \u001b[39m | \u001b[39m0.00243  \u001b[39m | \u001b[39m-51.93   \u001b[39m | \u001b[39m26.53    \u001b[39m | \u001b[39m54.41    \u001b[39m | \u001b[39m-28.56   \u001b[39m |\n","| \u001b[39m109      \u001b[39m | \u001b[39m-0.04263 \u001b[39m | \u001b[39m21.51    \u001b[39m | \u001b[39m15.02    \u001b[39m | \u001b[39m0.00391  \u001b[39m | \u001b[39m-50.19   \u001b[39m | \u001b[39m58.25    \u001b[39m | \u001b[39m32.68    \u001b[39m | \u001b[39m-32.93   \u001b[39m |\n","| \u001b[39m110      \u001b[39m | \u001b[39m-1e+06   \u001b[39m | \u001b[39m25.93    \u001b[39m | \u001b[39m27.8     \u001b[39m | \u001b[39m0.002864 \u001b[39m | \u001b[39m-61.3    \u001b[39m | \u001b[39m42.33    \u001b[39m | \u001b[39m58.62    \u001b[39m | \u001b[39m-20.62   \u001b[39m |\n","=============================================================================================================\n","\n","1. 參數組合: {'ma_short': 16, 'ma_long': 29, 'will_period_1': 58, 'will_buy_threshold_1': -59, 'will_period_2': 30, 'will_sell_threshold_2': -33, 'stop_loss': np.float64(0.0034789563525255635)}\n","   交易次數: 95\n","   最終資金: 1134900.48\n","   勝率: 0.6105\n","   中位數回報 (Median Return): 1314.06\n","   中位數絕對偏差 (MAD): 3192.80\n","   穩健夏普比率 (MSR): 0.4116\n","   夏普比率 (Sharpe Ratio): 0.1816\n","   回報分佈統計:\n","     均值 (Mean): 1497.36\n","     標準差 (Std): 8244.63\n","     最小值 (Min): -15085.98\n","     最大值 (Max): 57529.84\n","   平均交易時長 (K 棒數): 1.65\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 7.80\n","   出場原因統計: {'williams_overbought': 32, 'price_below_long_ma': 61, 'stop_loss': 2}\n","\n","2. 參數組合: {'ma_short': 33, 'ma_long': 56, 'will_period_1': 20, 'will_buy_threshold_1': -70, 'will_period_2': 33, 'will_sell_threshold_2': -22, 'stop_loss': np.float64(0.003708610533670233)}\n","   交易次數: 31\n","   最終資金: 1107613.71\n","   勝率: 0.6452\n","   中位數回報 (Median Return): 2928.58\n","   中位數絕對偏差 (MAD): 9395.54\n","   穩健夏普比率 (MSR): 0.3117\n","   夏普比率 (Sharpe Ratio): 0.2770\n","   回報分佈統計:\n","     均值 (Mean): 3548.57\n","     標準差 (Std): 12811.56\n","     最小值 (Min): -21269.19\n","     最大值 (Max): 33529.85\n","   平均交易時長 (K 棒數): 6.94\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 21.20\n","   出場原因統計: {'price_below_long_ma': 6, 'stop_loss': 3, 'williams_overbought': 22}\n","\n","3. 參數組合: {'ma_short': 15, 'ma_long': 29, 'will_period_1': 54, 'will_buy_threshold_1': -62, 'will_period_2': 22, 'will_sell_threshold_2': -21, 'stop_loss': np.float64(0.0032673173861978277)}\n","   交易次數: 85\n","   最終資金: 1051538.35\n","   勝率: 0.5647\n","   中位數回報 (Median Return): 930.79\n","   中位數絕對偏差 (MAD): 3602.57\n","   穩健夏普比率 (MSR): 0.2584\n","   夏普比率 (Sharpe Ratio): 0.0655\n","   回報分佈統計:\n","     均值 (Mean): 683.16\n","     標準差 (Std): 10425.19\n","     最小值 (Min): -27470.63\n","     最大值 (Max): 64929.69\n","   平均交易時長 (K 棒數): 1.59\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 8.20\n","   出場原因統計: {'williams_overbought': 24, 'price_below_long_ma': 58, 'stop_loss': 3}\n","\n","4. 參數組合: {'ma_short': 19, 'ma_long': 25, 'will_period_1': 60, 'will_buy_threshold_1': -58, 'will_period_2': 33, 'will_sell_threshold_2': -41, 'stop_loss': np.float64(0.0035472835704916388)}\n","   交易次數: 76\n","   最終資金: 1026364.78\n","   勝率: 0.5526\n","   中位數回報 (Median Return): 930.83\n","   中位數絕對偏差 (MAD): 4505.30\n","   穩健夏普比率 (MSR): 0.2066\n","   夏普比率 (Sharpe Ratio): 0.0510\n","   回報分佈統計:\n","     均值 (Mean): 423.45\n","     標準差 (Std): 8304.33\n","     最小值 (Min): -27470.63\n","     最大值 (Max): 25927.60\n","   平均交易時長 (K 棒數): 2.09\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 9.00\n","   出場原因統計: {'williams_overbought': 41, 'price_below_long_ma': 33, 'stop_loss': 2}\n","\n","5. 參數組合: {'ma_short': 17, 'ma_long': 34, 'will_period_1': 59, 'will_buy_threshold_1': -75, 'will_period_2': 53, 'will_sell_threshold_2': -20, 'stop_loss': np.float64(0.0034805756690683993)}\n","   交易次數: 31\n","   最終資金: 1083828.93\n","   勝率: 0.5484\n","   中位數回報 (Median Return): 530.06\n","   中位數絕對偏差 (MAD): 2600.92\n","   穩健夏普比率 (MSR): 0.2038\n","   夏普比率 (Sharpe Ratio): 0.2068\n","   回報分佈統計:\n","     均值 (Mean): 2777.86\n","     標準差 (Std): 13432.69\n","     最小值 (Min): -11885.74\n","     最大值 (Max): 62329.69\n","   平均交易時長 (K 棒數): 2.26\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 8.80\n","   出場原因統計: {'price_below_long_ma': 28, 'williams_overbought': 3}\n"]}],"source":["# 參數範圍（與網格搜索相同，但轉為連續範圍，後續取整數）\n","param_bounds = {\n","    'ma_short': (15, 35),  # 整數範圍 [15, 35]\n","    'ma_long': (20, 60),   # 整數範圍 [20, 60]\n","    'will_period_1': (20, 60),  # 整數範圍 [20, 60]\n","    'will_buy_threshold_1': (-80, -50),  # 整數範圍 [-80, -50]\n","    'will_period_2': (20, 60),  # 整數範圍 [20, 60]\n","    'will_sell_threshold_2': (-50, -20),  # 整數範圍 [-50, -20]\n","    'stop_loss': (0.002, 0.004)  # 連續範圍 [0.002, 0.004]\n","}\n","\n","# 目標函數（用於貝葉斯優化）\n","def objective_function(data, simulate_func, ma_short, ma_long, will_period_1, will_buy_threshold_1,\n","                       will_period_2, will_sell_threshold_2, stop_loss):\n","    # 將參數轉為整數（除了 stop_loss）\n","    params = {\n","        'ma_short': int(round(ma_short)),\n","        'ma_long': int(round(ma_long)),\n","        'will_period_1': int(round(will_period_1)),\n","        'will_buy_threshold_1': int(round(will_buy_threshold_1)),\n","        'will_period_2': int(round(will_period_2)),\n","        'will_sell_threshold_2': int(round(will_sell_threshold_2)),\n","        'stop_loss': stop_loss  # stop_loss 保持連續值\n","    }\n","\n","    # 檢查參數組合是否有效\n","    if not is_valid_param_combination(params):\n","        return -1e6  # 返回一個很小的值，表示無效組合\n","\n","    # 模擬策略\n","    trades, returns, final_capital = simulate_func(\n","        data.copy(),\n","        ma_short=params['ma_short'],\n","        ma_long=params['ma_long'],\n","        will_period_1=params['will_period_1'],\n","        will_buy_threshold_1=params['will_buy_threshold_1'],\n","        will_period_2=params['will_period_2'],\n","        will_sell_threshold_2=params['will_sell_threshold_2'],\n","        stop_loss=params['stop_loss']\n","    )\n","\n","    # 計算表現指標\n","    trade_count = len(trades)\n","    win_rate = calculate_win_rate(trades)\n","    msr = calculate_msr(returns)\n","    avg_duration, exit_reasons, shortest_5_avg, longest_5_avg = calculate_additional_metrics(trades)\n","\n","    # 濾網條件：成交次數 > 20，勝率 > 0.3，最終資金 > 100 萬，5 筆最長持倉時間平均 > 3\n","    if (trade_count <= 20 or\n","        win_rate <= 0.3 or\n","        final_capital <= 1000000 or\n","        longest_5_avg <= 3):\n","        return -1e6  # 返回一個很小的值，表示不滿足條件\n","\n","    return msr  # 目標函數返回 MSR\n","\n","# 貝葉斯優化函數（針對單一策略）\n","def bayesian_optimize_strategy(data, param_bounds, simulate_func, n_iter=100):\n","    # 定義目標函數（包裝為貝葉斯優化可用的形式）\n","    def target(**params):\n","        return objective_function(data, simulate_func, **params)\n","\n","    # 初始化貝葉斯優化器\n","    optimizer = BayesianOptimization(\n","        f=target,\n","        pbounds=param_bounds,\n","        random_state=42,\n","        verbose=2\n","    )\n","\n","    # 運行貝葉斯優化\n","    optimizer.maximize(\n","        init_points=10,  # 初始隨機探索次數\n","        n_iter=n_iter    # 迭代次數\n","    )\n","\n","    # 儲存所有滿足條件的參數組合\n","    results = []\n","\n","    # 遍歷所有評估過的參數組合\n","    for i, res in enumerate(optimizer.res):\n","        params = {\n","            'ma_short': int(round(res['params']['ma_short'])),\n","            'ma_long': int(round(res['params']['ma_long'])),\n","            'will_period_1': int(round(res['params']['will_period_1'])),\n","            'will_buy_threshold_1': int(round(res['params']['will_buy_threshold_1'])),\n","            'will_period_2': int(round(res['params']['will_period_2'])),\n","            'will_sell_threshold_2': int(round(res['params']['will_sell_threshold_2'])),\n","            'stop_loss': res['params']['stop_loss']\n","        }\n","\n","        # 跳過無效組合\n","        if not is_valid_param_combination(params):\n","            continue\n","\n","        # 重新運行策略以獲取完整指標\n","        trades, returns, final_capital = simulate_func(\n","            data.copy(),\n","            ma_short=params['ma_short'],\n","            ma_long=params['ma_long'],\n","            will_period_1=params['will_period_1'],\n","            will_buy_threshold_1=params['will_buy_threshold_1'],\n","            will_period_2=params['will_period_2'],\n","            will_sell_threshold_2=params['will_sell_threshold_2'],\n","            stop_loss=params['stop_loss']\n","        )\n","\n","        trade_count = len(trades)\n","        win_rate = calculate_win_rate(trades)\n","        msr = calculate_msr(returns)\n","        avg_duration, exit_reasons, shortest_5_avg, longest_5_avg = calculate_additional_metrics(trades)\n","\n","        # 濾網條件：成交次數 > 20，勝率 > 0.3，最終資金 > 100 萬，5 筆最長持倉時間平均 > 3\n","        if (trade_count <= 20 or\n","            win_rate <= 0.3 or\n","            final_capital <= 1000000 or\n","            longest_5_avg <= 3):\n","            continue\n","\n","        # 計算其他指標\n","        sharpe = calculate_sharpe_ratio(returns)\n","        median_return, mad = calculate_median_and_mad(returns)\n","        mean_return, std_return, min_return, max_return = calculate_returns_stats(returns)\n","\n","        # 儲存結果\n","        results.append({\n","            'params': params,\n","            'trade_count': trade_count,\n","            'final_capital': final_capital,\n","            'win_rate': win_rate,\n","            'msr': msr,\n","            'sharpe': sharpe,\n","            'avg_duration': avg_duration,\n","            'exit_reasons': exit_reasons,\n","            'shortest_5_avg': shortest_5_avg,\n","            'longest_5_avg': longest_5_avg,\n","            'returns': returns  # 儲存 returns 以供後續計算\n","        })\n","\n","    # 按穩健夏普比率從高到低排序\n","    results_sorted = sorted(results, key=lambda x: x['msr'], reverse=True)[:5]  # 僅取前 5 筆\n","\n","    return results_sorted\n","\n","# 執行貝葉斯優化並輸出結果\n","strategy_funcs = [simulate_strategy_1, simulate_strategy_2, simulate_strategy_3, simulate_strategy_4]\n","all_bayesian_results = []\n","\n","for idx, sim_func in enumerate(strategy_funcs, 1):\n","    strategy = f\"Strategy_{idx}\"\n","    print(f\"\\n策略 {idx} - 前 5 筆最佳參數組合（貝葉斯優化，成交次數 > 20, 勝率 > 0.3, 最終資金 > 100 萬, 5 筆最長持倉時間平均 > 3，按穩健夏普比率從高到低排序）：\")\n","    results = bayesian_optimize_strategy(val_data, param_bounds, sim_func, n_iter=100)\n","\n","    # 儲存結果以供後續使用\n","    for result in results:\n","        result['strategy'] = strategy\n","        all_bayesian_results.append(result)\n","\n","    # 輸出結果\n","    for i, result in enumerate(results, 1):\n","        # 計算額外指標\n","        returns = result['returns']\n","        median_return, mad = calculate_median_and_mad(returns)\n","        mean_return, std_return, min_return, max_return = calculate_returns_stats(returns)\n","\n","        print(f\"\\n{i}. 參數組合: {result['params']}\")\n","        print(f\"   交易次數: {result['trade_count']}\")\n","        print(f\"   最終資金: {result['final_capital']:.2f}\")\n","        print(f\"   勝率: {result['win_rate']:.4f}\")\n","        print(f\"   中位數回報 (Median Return): {median_return:.2f}\")\n","        print(f\"   中位數絕對偏差 (MAD): {mad:.2f}\")\n","        print(f\"   穩健夏普比率 (MSR): {result['msr']:.4f}\")\n","        print(f\"   夏普比率 (Sharpe Ratio): {result['sharpe']:.4f}\")\n","        print(f\"   回報分佈統計:\")\n","        print(f\"     均值 (Mean): {mean_return:.2f}\")\n","        print(f\"     標準差 (Std): {std_return:.2f}\")\n","        print(f\"     最小值 (Min): {min_return:.2f}\")\n","        print(f\"     最大值 (Max): {max_return:.2f}\")\n","        print(f\"   平均交易時長 (K 棒數): {result['avg_duration']:.2f}\")\n","        print(f\"   5 筆最短持倉時間平均 (K 棒數): {result['shortest_5_avg']:.2f}\")\n","        print(f\"   5 筆最長持倉時間平均 (K 棒數): {result['longest_5_avg']:.2f}\")\n","        print(f\"   出場原因統計: {dict(result['exit_reasons'])}\")"]},{"cell_type":"markdown","metadata":{"id":"pQ-F1-W7P43I"},"source":["# 蒙地卡羅搜索"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":292095,"status":"ok","timestamp":1743137977760,"user":{"displayName":"陳昭如","userId":"12388700631515663339"},"user_tz":-480},"id":"uH1WpNGOUEvM","outputId":"12bcacfc-dca2-40e2-8621-adc399e943e0"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","策略 1 - 前 5 筆最佳參數組合（蒙地卡羅搜索，成交次數 > 20, 勝率 > 0.3, 最終資金 > 100 萬, 5 筆最長持倉時間平均 > 3，按穩健夏普比率從高到低排序）：\n"]},{"name":"stderr","output_type":"stream","text":["Monte Carlo Search Progress for simulate_strategy_1: 100%|██████████| 1000/1000 [01:19<00:00, 12.58it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","1. 參數組合: {'ma_short': np.int64(15), 'ma_long': np.int64(20), 'will_period_1': np.int64(30), 'will_buy_threshold_1': np.int64(-50), 'will_period_2': np.int64(60), 'will_sell_threshold_2': np.int64(-40), 'stop_loss': np.float64(0.004)}\n","   交易次數: 26\n","   最終資金: 1044115.50\n","   勝率: 0.6154\n","   中位數回報 (Median Return): 2824.15\n","   中位數絕對偏差 (MAD): 4794.03\n","   穩健夏普比率 (MSR): 0.5891\n","   夏普比率 (Sharpe Ratio): 0.1542\n","   回報分佈統計:\n","     均值 (Mean): 1771.43\n","     標準差 (Std): 11491.32\n","     最小值 (Min): -16870.22\n","     最大值 (Max): 39118.83\n","   平均交易時長 (K 棒數): 5.58\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 17.20\n","   出場原因統計: {'death_cross': 12, 'williams_overbought': 10, 'stop_loss': 4}\n","\n","2. 參數組合: {'ma_short': np.int64(15), 'ma_long': np.int64(20), 'will_period_1': np.int64(40), 'will_buy_threshold_1': np.int64(-60), 'will_period_2': np.int64(60), 'will_sell_threshold_2': np.int64(-50), 'stop_loss': np.float64(0.004)}\n","   交易次數: 22\n","   最終資金: 1040251.73\n","   勝率: 0.6364\n","   中位數回報 (Median Return): 3130.48\n","   中位數絕對偏差 (MAD): 5401.33\n","   穩健夏普比率 (MSR): 0.5796\n","   夏普比率 (Sharpe Ratio): 0.1789\n","   回報分佈統計:\n","     均值 (Mean): 1905.70\n","     標準差 (Std): 10655.14\n","     最小值 (Min): -21285.37\n","     最大值 (Max): 26119.09\n","   平均交易時長 (K 棒數): 4.59\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 12.20\n","   出場原因統計: {'williams_overbought': 11, 'stop_loss': 3, 'death_cross': 8}\n","\n","3. 參數組合: {'ma_short': np.int64(15), 'ma_long': np.int64(20), 'will_period_1': np.int64(60), 'will_buy_threshold_1': np.int64(-50), 'will_period_2': np.int64(20), 'will_sell_threshold_2': np.int64(-20), 'stop_loss': np.float64(0.002)}\n","   交易次數: 32\n","   最終資金: 1027473.58\n","   勝率: 0.6562\n","   中位數回報 (Median Return): 2224.78\n","   中位數絕對偏差 (MAD): 4004.00\n","   穩健夏普比率 (MSR): 0.5556\n","   夏普比率 (Sharpe Ratio): 0.1223\n","   回報分佈統計:\n","     均值 (Mean): 935.51\n","     標準差 (Std): 7647.60\n","     最小值 (Min): -19284.97\n","     最大值 (Max): 18321.24\n","   平均交易時長 (K 棒數): 2.94\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 8.20\n","   出場原因統計: {'death_cross': 10, 'williams_overbought': 18, 'stop_loss': 4}\n","\n","4. 參數組合: {'ma_short': np.int64(15), 'ma_long': np.int64(20), 'will_period_1': np.int64(40), 'will_buy_threshold_1': np.int64(-50), 'will_period_2': np.int64(30), 'will_sell_threshold_2': np.int64(-40), 'stop_loss': np.float64(0.003)}\n","   交易次數: 35\n","   最終資金: 1041761.78\n","   勝率: 0.6000\n","   中位數回報 (Median Return): 2520.64\n","   中位數絕對偏差 (MAD): 5198.41\n","   穩健夏普比率 (MSR): 0.4849\n","   夏普比率 (Sharpe Ratio): 0.1342\n","   回報分佈統計:\n","     均值 (Mean): 1270.87\n","     標準差 (Std): 9471.52\n","     最小值 (Min): -19284.97\n","     最大值 (Max): 21719.18\n","   平均交易時長 (K 棒數): 3.00\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 7.40\n","   出場原因統計: {'williams_overbought': 20, 'stop_loss': 5, 'death_cross': 10}\n","\n","5. 參數組合: {'ma_short': np.int64(15), 'ma_long': np.int64(20), 'will_period_1': np.int64(20), 'will_buy_threshold_1': np.int64(-50), 'will_period_2': np.int64(30), 'will_sell_threshold_2': np.int64(-30), 'stop_loss': np.float64(0.003)}\n","   交易次數: 21\n","   最終資金: 1044852.31\n","   勝率: 0.6190\n","   中位數回報 (Median Return): 2130.00\n","   中位數絕對偏差 (MAD): 4398.23\n","   穩健夏普比率 (MSR): 0.4843\n","   夏普比率 (Sharpe Ratio): 0.1972\n","   回報分佈統計:\n","     均值 (Mean): 2210.75\n","     標準差 (Std): 11208.53\n","     最小值 (Min): -19284.97\n","     最大值 (Max): 27729.85\n","   平均交易時長 (K 棒數): 4.24\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 9.80\n","   出場原因統計: {'death_cross': 12, 'williams_overbought': 6, 'stop_loss': 3}\n","\n","策略 2 - 前 5 筆最佳參數組合（蒙地卡羅搜索，成交次數 > 20, 勝率 > 0.3, 最終資金 > 100 萬, 5 筆最長持倉時間平均 > 3，按穩健夏普比率從高到低排序）：\n"]},{"name":"stderr","output_type":"stream","text":["Monte Carlo Search Progress for simulate_strategy_2: 100%|██████████| 1000/1000 [01:20<00:00, 12.45it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","1. 參數組合: {'ma_short': np.int64(15), 'ma_long': np.int64(20), 'will_period_1': np.int64(20), 'will_buy_threshold_1': np.int64(-50), 'will_period_2': np.int64(60), 'will_sell_threshold_2': np.int64(-30), 'stop_loss': np.float64(0.002)}\n","   交易次數: 21\n","   最終資金: 1002053.17\n","   勝率: 0.5714\n","   中位數回報 (Median Return): 1317.52\n","   中位數絕對偏差 (MAD): 2999.92\n","   穩健夏普比率 (MSR): 0.4392\n","   夏普比率 (Sharpe Ratio): 0.0238\n","   回報分佈統計:\n","     均值 (Mean): 172.69\n","     標準差 (Std): 7244.54\n","     最小值 (Min): -14270.01\n","     最大值 (Max): 20924.16\n","   平均交易時長 (K 棒數): 3.62\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 10.80\n","   出場原因統計: {'price_below_long_ma': 13, 'williams_overbought': 6, 'stop_loss': 2}\n","\n","2. 參數組合: {'ma_short': np.int64(15), 'ma_long': np.int64(20), 'will_period_1': np.int64(20), 'will_buy_threshold_1': np.int64(-50), 'will_period_2': np.int64(60), 'will_sell_threshold_2': np.int64(-30), 'stop_loss': np.float64(0.004)}\n","   交易次數: 21\n","   最終資金: 1002053.17\n","   勝率: 0.5714\n","   中位數回報 (Median Return): 1317.52\n","   中位數絕對偏差 (MAD): 2999.92\n","   穩健夏普比率 (MSR): 0.4392\n","   夏普比率 (Sharpe Ratio): 0.0238\n","   回報分佈統計:\n","     均值 (Mean): 172.69\n","     標準差 (Std): 7244.54\n","     最小值 (Min): -14270.01\n","     最大值 (Max): 20924.16\n","   平均交易時長 (K 棒數): 3.62\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 10.80\n","   出場原因統計: {'price_below_long_ma': 14, 'williams_overbought': 6, 'stop_loss': 1}\n","\n","3. 參數組合: {'ma_short': np.int64(15), 'ma_long': np.int64(20), 'will_period_1': np.int64(30), 'will_buy_threshold_1': np.int64(-50), 'will_period_2': np.int64(50), 'will_sell_threshold_2': np.int64(-50), 'stop_loss': np.float64(0.004)}\n","   交易次數: 25\n","   最終資金: 1022655.98\n","   勝率: 0.6000\n","   中位數回報 (Median Return): 1518.35\n","   中位數絕對偏差 (MAD): 4388.52\n","   穩健夏普比率 (MSR): 0.3460\n","   夏普比率 (Sharpe Ratio): 0.1085\n","   回報分佈統計:\n","     均值 (Mean): 981.11\n","     標準差 (Std): 9046.57\n","     最小值 (Min): -15678.10\n","     最大值 (Max): 21719.18\n","   平均交易時長 (K 棒數): 2.80\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 7.60\n","   出場原因統計: {'price_below_long_ma': 12, 'williams_overbought': 11, 'stop_loss': 2}\n","\n","4. 參數組合: {'ma_short': np.int64(15), 'ma_long': np.int64(20), 'will_period_1': np.int64(50), 'will_buy_threshold_1': np.int64(-50), 'will_period_2': np.int64(30), 'will_sell_threshold_2': np.int64(-50), 'stop_loss': np.float64(0.004)}\n","   交易次數: 35\n","   最終資金: 1010411.26\n","   勝率: 0.5714\n","   中位數回報 (Median Return): 1518.35\n","   中位數絕對偏差 (MAD): 4388.52\n","   穩健夏普比率 (MSR): 0.3460\n","   夏普比率 (Sharpe Ratio): 0.0522\n","   回報分佈統計:\n","     均值 (Mean): 374.44\n","     標準差 (Std): 7172.23\n","     最小值 (Min): -15678.10\n","     最大值 (Max): 16119.29\n","   平均交易時長 (K 棒數): 1.66\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 3.80\n","   出場原因統計: {'williams_overbought': 24, 'price_below_long_ma': 9, 'stop_loss': 2}\n","\n","5. 參數組合: {'ma_short': np.int64(15), 'ma_long': np.int64(20), 'will_period_1': np.int64(40), 'will_buy_threshold_1': np.int64(-60), 'will_period_2': np.int64(30), 'will_sell_threshold_2': np.int64(-50), 'stop_loss': np.float64(0.004)}\n","   交易次數: 22\n","   最終資金: 1028451.96\n","   勝率: 0.5455\n","   中位數回報 (Median Return): 1523.34\n","   中位數絕對偏差 (MAD): 4501.29\n","   穩健夏普比率 (MSR): 0.3384\n","   夏普比率 (Sharpe Ratio): 0.1794\n","   回報分佈統計:\n","     均值 (Mean): 1369.35\n","     標準差 (Std): 7631.19\n","     最小值 (Min): -15678.10\n","     最大值 (Max): 16119.29\n","   平均交易時長 (K 棒數): 1.86\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 3.60\n","   出場原因統計: {'williams_overbought': 12, 'price_below_long_ma': 9, 'stop_loss': 1}\n","\n","策略 3 - 前 5 筆最佳參數組合（蒙地卡羅搜索，成交次數 > 20, 勝率 > 0.3, 最終資金 > 100 萬, 5 筆最長持倉時間平均 > 3，按穩健夏普比率從高到低排序）：\n"]},{"name":"stderr","output_type":"stream","text":["Monte Carlo Search Progress for simulate_strategy_3: 100%|██████████| 1000/1000 [01:07<00:00, 14.88it/s]\n"]},{"name":"stdout","output_type":"stream","text":["\n","1. 參數組合: {'ma_short': np.int64(30), 'ma_long': np.int64(40), 'will_period_1': np.int64(50), 'will_buy_threshold_1': np.int64(-60), 'will_period_2': np.int64(20), 'will_sell_threshold_2': np.int64(-20), 'stop_loss': np.float64(0.003)}\n","   交易次數: 40\n","   最終資金: 1171973.31\n","   勝率: 0.6750\n","   中位數回報 (Median Return): 2329.00\n","   中位數絕對偏差 (MAD): 3099.41\n","   穩健夏普比率 (MSR): 0.7514\n","   夏普比率 (Sharpe Ratio): 0.3554\n","   回報分佈統計:\n","     均值 (Mean): 4374.62\n","     標準差 (Std): 12308.97\n","     最小值 (Min): -14270.01\n","     最大值 (Max): 56529.84\n","   平均交易時長 (K 棒數): 1.30\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 3.40\n","   出場原因統計: {'death_cross': 36, 'stop_loss': 1, 'williams_overbought': 3}\n","\n","2. 參數組合: {'ma_short': np.int64(30), 'ma_long': np.int64(40), 'will_period_1': np.int64(60), 'will_buy_threshold_1': np.int64(-60), 'will_period_2': np.int64(30), 'will_sell_threshold_2': np.int64(-20), 'stop_loss': np.float64(0.003)}\n","   交易次數: 53\n","   最終資金: 1173656.44\n","   勝率: 0.6981\n","   中位數回報 (Median Return): 1730.81\n","   中位數絕對偏差 (MAD): 2989.88\n","   穩健夏普比率 (MSR): 0.5789\n","   夏普比率 (Sharpe Ratio): 0.3346\n","   回報分佈統計:\n","     均值 (Mean): 3351.44\n","     標準差 (Std): 10017.38\n","     最小值 (Min): -20869.86\n","     最大值 (Max): 50320.22\n","   平均交易時長 (K 棒數): 1.30\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 4.20\n","   出場原因統計: {'death_cross': 44, 'williams_overbought': 8, 'stop_loss': 1}\n","\n","3. 參數組合: {'ma_short': np.int64(35), 'ma_long': np.int64(40), 'will_period_1': np.int64(50), 'will_buy_threshold_1': np.int64(-60), 'will_period_2': np.int64(30), 'will_sell_threshold_2': np.int64(-20), 'stop_loss': np.float64(0.004)}\n","   交易次數: 34\n","   最終資金: 1066545.07\n","   勝率: 0.5882\n","   中位數回報 (Median Return): 1330.82\n","   中位數絕對偏差 (MAD): 2404.97\n","   穩健夏普比率 (MSR): 0.5534\n","   夏普比率 (Sharpe Ratio): 0.2973\n","   回報分佈統計:\n","     均值 (Mean): 2031.52\n","     標準差 (Std): 6833.41\n","     最小值 (Min): -7269.10\n","     最大值 (Max): 33919.09\n","   平均交易時長 (K 棒數): 1.41\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 3.80\n","   出場原因統計: {'death_cross': 32, 'williams_overbought': 2}\n","\n","4. 參數組合: {'ma_short': np.int64(15), 'ma_long': np.int64(50), 'will_period_1': np.int64(60), 'will_buy_threshold_1': np.int64(-60), 'will_period_2': np.int64(30), 'will_sell_threshold_2': np.int64(-20), 'stop_loss': np.float64(0.002)}\n","   交易次數: 107\n","   最終資金: 1058476.00\n","   勝率: 0.6075\n","   中位數回報 (Median Return): 1509.37\n","   中位數絕對偏差 (MAD): 2978.53\n","   穩健夏普比率 (MSR): 0.5067\n","   夏普比率 (Sharpe Ratio): 0.0736\n","   回報分佈統計:\n","     均值 (Mean): 622.78\n","     標準差 (Std): 8459.89\n","     最小值 (Min): -27470.63\n","     最大值 (Max): 50320.22\n","   平均交易時長 (K 棒數): 1.17\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 4.60\n","   出場原因統計: {'death_cross': 93, 'williams_overbought': 6, 'stop_loss': 8}\n","\n","5. 參數組合: {'ma_short': np.int64(15), 'ma_long': np.int64(50), 'will_period_1': np.int64(60), 'will_buy_threshold_1': np.int64(-60), 'will_period_2': np.int64(20), 'will_sell_threshold_2': np.int64(-20), 'stop_loss': np.float64(0.002)}\n","   交易次數: 107\n","   最終資金: 1058276.00\n","   勝率: 0.6075\n","   中位數回報 (Median Return): 1509.37\n","   中位數絕對偏差 (MAD): 2978.53\n","   穩健夏普比率 (MSR): 0.5067\n","   夏普比率 (Sharpe Ratio): 0.0734\n","   回報分佈統計:\n","     均值 (Mean): 620.91\n","     標準差 (Std): 8464.71\n","     最小值 (Min): -27470.63\n","     最大值 (Max): 50320.22\n","   平均交易時長 (K 棒數): 1.18\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 4.80\n","   出場原因統計: {'death_cross': 93, 'williams_overbought': 5, 'stop_loss': 9}\n","\n","策略 4 - 前 5 筆最佳參數組合（蒙地卡羅搜索，成交次數 > 20, 勝率 > 0.3, 最終資金 > 100 萬, 5 筆最長持倉時間平均 > 3，按穩健夏普比率從高到低排序）：\n"]},{"name":"stderr","output_type":"stream","text":["Monte Carlo Search Progress for simulate_strategy_4: 100%|██████████| 1000/1000 [01:05<00:00, 15.36it/s]"]},{"name":"stdout","output_type":"stream","text":["\n","1. 參數組合: {'ma_short': np.int64(30), 'ma_long': np.int64(60), 'will_period_1': np.int64(50), 'will_buy_threshold_1': np.int64(-60), 'will_period_2': np.int64(50), 'will_sell_threshold_2': np.int64(-20), 'stop_loss': np.float64(0.004)}\n","   交易次數: 43\n","   最終資金: 1149719.24\n","   勝率: 0.6047\n","   中位數回報 (Median Return): 1730.81\n","   中位數絕對偏差 (MAD): 2999.94\n","   穩健夏普比率 (MSR): 0.5769\n","   夏普比率 (Sharpe Ratio): 0.3263\n","   回報分佈統計:\n","     均值 (Mean): 3557.16\n","     標準差 (Std): 10902.25\n","     最小值 (Min): -11270.01\n","     最大值 (Max): 56529.84\n","   平均交易時長 (K 棒數): 1.35\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 4.00\n","   出場原因統計: {'price_below_long_ma': 41, 'williams_overbought': 2}\n","\n","2. 參數組合: {'ma_short': np.int64(30), 'ma_long': np.int64(40), 'will_period_1': np.int64(60), 'will_buy_threshold_1': np.int64(-60), 'will_period_2': np.int64(30), 'will_sell_threshold_2': np.int64(-20), 'stop_loss': np.float64(0.003)}\n","   交易次數: 44\n","   最終資金: 1255952.88\n","   勝率: 0.6818\n","   中位數回報 (Median Return): 2820.30\n","   中位數絕對偏差 (MAD): 4894.43\n","   穩健夏普比率 (MSR): 0.5762\n","   夏普比率 (Sharpe Ratio): 0.4078\n","   回報分佈統計:\n","     均值 (Mean): 5892.59\n","     標準差 (Std): 14451.17\n","     最小值 (Min): -20869.86\n","     最大值 (Max): 63129.69\n","   平均交易時長 (K 棒數): 2.07\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 6.40\n","   出場原因統計: {'williams_overbought': 24, 'price_below_long_ma': 19, 'stop_loss': 1}\n","\n","3. 參數組合: {'ma_short': np.int64(30), 'ma_long': np.int64(60), 'will_period_1': np.int64(60), 'will_buy_threshold_1': np.int64(-60), 'will_period_2': np.int64(60), 'will_sell_threshold_2': np.int64(-30), 'stop_loss': np.float64(0.002)}\n","   交易次數: 53\n","   最終資金: 1126641.74\n","   勝率: 0.6226\n","   中位數回報 (Median Return): 1519.25\n","   中位數絕對偏差 (MAD): 2788.38\n","   穩健夏普比率 (MSR): 0.5448\n","   夏普比率 (Sharpe Ratio): 0.2712\n","   回報分佈統計:\n","     均值 (Mean): 2464.52\n","     標準差 (Std): 9087.81\n","     最小值 (Min): -15869.86\n","     最大值 (Max): 51720.22\n","   平均交易時長 (K 棒數): 1.36\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 4.80\n","   出場原因統計: {'price_below_long_ma': 48, 'williams_overbought': 3, 'stop_loss': 2}\n","\n","4. 參數組合: {'ma_short': np.int64(30), 'ma_long': np.int64(40), 'will_period_1': np.int64(50), 'will_buy_threshold_1': np.int64(-60), 'will_period_2': np.int64(40), 'will_sell_threshold_2': np.int64(-40), 'stop_loss': np.float64(0.002)}\n","   交易次數: 37\n","   最終資金: 1145402.84\n","   勝率: 0.5946\n","   中位數回報 (Median Return): 2319.56\n","   中位數絕對偏差 (MAD): 4397.82\n","   穩健夏普比率 (MSR): 0.5274\n","   夏普比率 (Sharpe Ratio): 0.3135\n","   回報分佈統計:\n","     均值 (Mean): 4005.40\n","     標準差 (Std): 12774.67\n","     最小值 (Min): -16880.28\n","     最大值 (Max): 58929.84\n","   平均交易時長 (K 棒數): 2.11\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 6.60\n","   出場原因統計: {'price_below_long_ma': 18, 'williams_overbought': 18, 'stop_loss': 1}\n","\n","5. 參數組合: {'ma_short': np.int64(30), 'ma_long': np.int64(50), 'will_period_1': np.int64(30), 'will_buy_threshold_1': np.int64(-50), 'will_period_2': np.int64(20), 'will_sell_threshold_2': np.int64(-50), 'stop_loss': np.float64(0.002)}\n","   交易次數: 54\n","   最終資金: 1033943.31\n","   勝率: 0.6296\n","   中位數回報 (Median Return): 1521.38\n","   中位數絕對偏差 (MAD): 3203.02\n","   穩健夏普比率 (MSR): 0.4750\n","   夏普比率 (Sharpe Ratio): 0.0527\n","   回報分佈統計:\n","     均值 (Mean): 705.02\n","     標準差 (Std): 13374.57\n","     最小值 (Min): -31469.65\n","     最大值 (Max): 63314.16\n","   平均交易時長 (K 棒數): 2.06\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 8.40\n","   出場原因統計: {'williams_overbought': 22, 'price_below_long_ma': 22, 'stop_loss': 10}\n"]},{"name":"stderr","output_type":"stream","text":["\n"]}],"source":["# 參數範圍（與網格搜索相同）\n","param_grid = {\n","    'ma_short': [15, 20, 25, 30, 35],\n","    'ma_long': [20, 30, 40, 50, 60],\n","    'will_period_1': [20, 30, 40, 50, 60],\n","    'will_buy_threshold_1': [-80, -70, -60, -50],\n","    'will_period_2': [20, 30, 40, 50, 60],\n","    'will_sell_threshold_2': [-50, -40, -30, -20],\n","    'stop_loss': [0.002, 0.003, 0.004]\n","}\n","\n","# 蒙地卡羅搜索函數（針對單一策略）\n","def monte_carlo_search_strategy(data, param_grid, simulate_func, n_samples=1000):\n","    # 準備參數名稱和值\n","    param_names = list(param_grid.keys())\n","    param_values = list(param_grid.values())\n","\n","    results = []\n","\n","    # 隨機抽樣\n","    for _ in tqdm(range(n_samples), desc=f\"Monte Carlo Search Progress for {simulate_func.__name__}\"):\n","        # 隨機選擇一組參數\n","        params = {}\n","        for name, values in zip(param_names, param_values):\n","            params[name] = np.random.choice(values)\n","\n","        # 檢查參數組合是否有效\n","        if not is_valid_param_combination(params):\n","            continue\n","\n","        # 模擬策略\n","        trades, returns, final_capital = simulate_func(\n","            data.copy(),\n","            ma_short=params['ma_short'],\n","            ma_long=params['ma_long'],\n","            will_period_1=params['will_period_1'],\n","            will_buy_threshold_1=params['will_buy_threshold_1'],\n","            will_period_2=params['will_period_2'],\n","            will_sell_threshold_2=params['will_sell_threshold_2'],\n","            stop_loss=params['stop_loss']\n","        )\n","\n","        # 計算表現指標\n","        trade_count = len(trades)\n","        win_rate = calculate_win_rate(trades)\n","        msr = calculate_msr(returns)\n","        sharpe = calculate_sharpe_ratio(returns)\n","        avg_duration, exit_reasons, shortest_5_avg, longest_5_avg = calculate_additional_metrics(trades)\n","\n","        # 濾網條件：成交次數 > 20，勝率 > 0.3，最終資金 > 100 萬，5 筆最長持倉時間平均 > 3\n","        if (trade_count <= 20 or\n","            win_rate <= 0.3 or\n","            final_capital <= 1000000 or\n","            longest_5_avg <= 3):\n","            continue\n","\n","        # 儲存結果\n","        results.append({\n","            'params': params,\n","            'trade_count': trade_count,\n","            'final_capital': final_capital,\n","            'win_rate': win_rate,\n","            'msr': msr,\n","            'sharpe': sharpe,\n","            'avg_duration': avg_duration,\n","            'exit_reasons': exit_reasons,\n","            'shortest_5_avg': shortest_5_avg,\n","            'longest_5_avg': longest_5_avg,\n","            'returns': returns  # 儲存 returns 以供後續計算\n","        })\n","\n","    # 按穩健夏普比率從高到低排序\n","    results_sorted = sorted(results, key=lambda x: x['msr'], reverse=True)[:5]  # 僅取前 5 筆\n","\n","    return results_sorted\n","\n","# 執行蒙地卡羅搜索並輸出結果\n","strategy_funcs = [simulate_strategy_1, simulate_strategy_2, simulate_strategy_3, simulate_strategy_4]\n","all_monte_carlo_results = []\n","\n","for idx, sim_func in enumerate(strategy_funcs, 1):\n","    strategy = f\"Strategy_{idx}\"\n","    print(f\"\\n策略 {idx} - 前 5 筆最佳參數組合（蒙地卡羅搜索，成交次數 > 20, 勝率 > 0.3, 最終資金 > 100 萬, 5 筆最長持倉時間平均 > 3，按穩健夏普比率從高到低排序）：\")\n","    results = monte_carlo_search_strategy(val_data, param_grid, sim_func, n_samples=1000)\n","\n","    # 儲存結果以供後續使用\n","    for result in results:\n","        result['strategy'] = strategy\n","        all_monte_carlo_results.append(result)\n","\n","    # 輸出結果\n","    for i, result in enumerate(results, 1):\n","        # 計算額外指標\n","        returns = result['returns']\n","        median_return, mad = calculate_median_and_mad(returns)\n","        mean_return, std_return, min_return, max_return = calculate_returns_stats(returns)\n","\n","        print(f\"\\n{i}. 參數組合: {result['params']}\")\n","        print(f\"   交易次數: {result['trade_count']}\")\n","        print(f\"   最終資金: {result['final_capital']:.2f}\")\n","        print(f\"   勝率: {result['win_rate']:.4f}\")\n","        print(f\"   中位數回報 (Median Return): {median_return:.2f}\")\n","        print(f\"   中位數絕對偏差 (MAD): {mad:.2f}\")\n","        print(f\"   穩健夏普比率 (MSR): {result['msr']:.4f}\")\n","        print(f\"   夏普比率 (Sharpe Ratio): {result['sharpe']:.4f}\")\n","        print(f\"   回報分佈統計:\")\n","        print(f\"     均值 (Mean): {mean_return:.2f}\")\n","        print(f\"     標準差 (Std): {std_return:.2f}\")\n","        print(f\"     最小值 (Min): {min_return:.2f}\")\n","        print(f\"     最大值 (Max): {max_return:.2f}\")\n","        print(f\"   平均交易時長 (K 棒數): {result['avg_duration']:.2f}\")\n","        print(f\"   5 筆最短持倉時間平均 (K 棒數): {result['shortest_5_avg']:.2f}\")\n","        print(f\"   5 筆最長持倉時間平均 (K 棒數): {result['longest_5_avg']:.2f}\")\n","        print(f\"   出場原因統計: {dict(result['exit_reasons'])}\")"]},{"cell_type":"markdown","metadata":{"id":"Qk8ZHWYO3KZm"},"source":["提取並呈現蒙地卡羅搜索的四個策略前 1 筆最佳參數"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":379,"status":"ok","timestamp":1743137978140,"user":{"displayName":"陳昭如","userId":"12388700631515663339"},"user_tz":-480},"id":"xcs6mDbu3Km3","outputId":"fef28348-6816-43b5-b279-96832898c93a"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","Strategy_1 - 最佳參數組合（蒙地卡羅搜索結果）：\n","參數組 ID: Param_9\n","優化方法: Monte Carlo Search\n","參數組合: {'ma_short': np.int64(15), 'ma_long': np.int64(20), 'will_period_1': np.int64(30), 'will_buy_threshold_1': np.int64(-50), 'will_period_2': np.int64(60), 'will_sell_threshold_2': np.int64(-40), 'stop_loss': np.float64(0.004)}\n","交易次數: 26\n","最終資金: 1044115.50\n","勝率: 0.6154\n","中位數回報 (Median Return): 2824.15\n","中位數絕對偏差 (MAD): 4794.03\n","穩健夏普比率 (MSR): 0.5891\n","夏普比率 (Sharpe Ratio): 0.1542\n","回報分佈統計:\n","  均值 (Mean): 1771.43\n","  標準差 (Std): 11491.32\n","  最小值 (Min): -16870.22\n","  最大值 (Max): 39118.83\n","平均交易時長 (K 棒數): 5.58\n","5 筆最短持倉時間平均 (K 棒數): 1.00\n","5 筆最長持倉時間平均 (K 棒數): 17.20\n","出場原因統計: {'death_cross': 12, 'williams_overbought': 10, 'stop_loss': 4}\n","\n","Strategy_2 - 最佳參數組合（蒙地卡羅搜索結果）：\n","參數組 ID: Param_10\n","優化方法: Monte Carlo Search\n","參數組合: {'ma_short': np.int64(15), 'ma_long': np.int64(20), 'will_period_1': np.int64(20), 'will_buy_threshold_1': np.int64(-50), 'will_period_2': np.int64(60), 'will_sell_threshold_2': np.int64(-30), 'stop_loss': np.float64(0.002)}\n","交易次數: 21\n","最終資金: 1002053.17\n","勝率: 0.5714\n","中位數回報 (Median Return): 1317.52\n","中位數絕對偏差 (MAD): 2999.92\n","穩健夏普比率 (MSR): 0.4392\n","夏普比率 (Sharpe Ratio): 0.0238\n","回報分佈統計:\n","  均值 (Mean): 172.69\n","  標準差 (Std): 7244.54\n","  最小值 (Min): -14270.01\n","  最大值 (Max): 20924.16\n","平均交易時長 (K 棒數): 3.62\n","5 筆最短持倉時間平均 (K 棒數): 1.00\n","5 筆最長持倉時間平均 (K 棒數): 10.80\n","出場原因統計: {'price_below_long_ma': 13, 'williams_overbought': 6, 'stop_loss': 2}\n","\n","Strategy_3 - 最佳參數組合（蒙地卡羅搜索結果）：\n","參數組 ID: Param_11\n","優化方法: Monte Carlo Search\n","參數組合: {'ma_short': np.int64(30), 'ma_long': np.int64(40), 'will_period_1': np.int64(50), 'will_buy_threshold_1': np.int64(-60), 'will_period_2': np.int64(20), 'will_sell_threshold_2': np.int64(-20), 'stop_loss': np.float64(0.003)}\n","交易次數: 40\n","最終資金: 1171973.31\n","勝率: 0.6750\n","中位數回報 (Median Return): 2329.00\n","中位數絕對偏差 (MAD): 3099.41\n","穩健夏普比率 (MSR): 0.7514\n","夏普比率 (Sharpe Ratio): 0.3554\n","回報分佈統計:\n","  均值 (Mean): 4374.62\n","  標準差 (Std): 12308.97\n","  最小值 (Min): -14270.01\n","  最大值 (Max): 56529.84\n","平均交易時長 (K 棒數): 1.30\n","5 筆最短持倉時間平均 (K 棒數): 1.00\n","5 筆最長持倉時間平均 (K 棒數): 3.40\n","出場原因統計: {'death_cross': 36, 'stop_loss': 1, 'williams_overbought': 3}\n","\n","Strategy_4 - 最佳參數組合（蒙地卡羅搜索結果）：\n","參數組 ID: Param_12\n","優化方法: Monte Carlo Search\n","參數組合: {'ma_short': np.int64(30), 'ma_long': np.int64(60), 'will_period_1': np.int64(50), 'will_buy_threshold_1': np.int64(-60), 'will_period_2': np.int64(50), 'will_sell_threshold_2': np.int64(-20), 'stop_loss': np.float64(0.004)}\n","交易次數: 43\n","最終資金: 1149719.24\n","勝率: 0.6047\n","中位數回報 (Median Return): 1730.81\n","中位數絕對偏差 (MAD): 2999.94\n","穩健夏普比率 (MSR): 0.5769\n","夏普比率 (Sharpe Ratio): 0.3263\n","回報分佈統計:\n","  均值 (Mean): 3557.16\n","  標準差 (Std): 10902.25\n","  最小值 (Min): -11270.01\n","  最大值 (Max): 56529.84\n","平均交易時長 (K 棒數): 1.35\n","5 筆最短持倉時間平均 (K 棒數): 1.00\n","5 筆最長持倉時間平均 (K 棒數): 4.00\n","出場原因統計: {'price_below_long_ma': 41, 'williams_overbought': 2}\n"]}],"source":["# 提取每個策略的前 1 筆最佳參數\n","def extract_top_params_per_strategy(all_results):\n","    top_params = {}\n","    for strategy in ['Strategy_1', 'Strategy_2', 'Strategy_3', 'Strategy_4']:\n","        # 過濾出該策略的結果\n","        strategy_results = [result for result in all_results if result['strategy'] == strategy]\n","        if strategy_results:\n","            # 按 MSR 排序，選擇第 1 筆\n","            top_result = sorted(strategy_results, key=lambda x: x['msr'], reverse=True)[0]\n","            top_params[strategy] = top_result\n","    return top_params\n","\n","# 呈現結果\n","def display_top_monte_carlo_params(top_params):\n","    for idx, (strategy, result) in enumerate(top_params.items(), 9):  # 從 Param_9 開始，延續貝葉斯優化的編號\n","        # 重新計算 trades 和 returns 以獲取更多統計信息\n","        sim_func_map = {\n","            'Strategy_1': simulate_strategy_1,\n","            'Strategy_2': simulate_strategy_2,\n","            'Strategy_3': simulate_strategy_3,\n","            'Strategy_4': simulate_strategy_4\n","        }\n","        sim_func = sim_func_map[strategy]\n","        params = result['params']\n","        trades, returns, final_capital = sim_func(\n","            val_data.copy(),\n","            ma_short=params['ma_short'],\n","            ma_long=params['ma_long'],\n","            will_period_1=params['will_period_1'],\n","            will_buy_threshold_1=params['will_buy_threshold_1'],\n","            will_period_2=params['will_period_2'],\n","            will_sell_threshold_2=params['will_sell_threshold_2'],\n","            stop_loss=params['stop_loss']\n","        )\n","\n","        # 計算中位數回報和 MAD\n","        median_return, mad = calculate_median_and_mad(returns)\n","\n","        # 計算回報分佈統計\n","        mean_return, std_return, min_return, max_return = calculate_returns_stats(returns)\n","\n","        # 輸出結果\n","        print(f\"\\n{strategy} - 最佳參數組合（蒙地卡羅搜索結果）：\")\n","        print(f\"參數組 ID: Param_{idx}\")\n","        print(f\"優化方法: Monte Carlo Search\")\n","        print(f\"參數組合: {result['params']}\")\n","        print(f\"交易次數: {result['trade_count']}\")\n","        print(f\"最終資金: {result['final_capital']:.2f}\")\n","        print(f\"勝率: {result['win_rate']:.4f}\")\n","        print(f\"中位數回報 (Median Return): {median_return:.2f}\")\n","        print(f\"中位數絕對偏差 (MAD): {mad:.2f}\")\n","        print(f\"穩健夏普比率 (MSR): {result['msr']:.4f}\")\n","        print(f\"夏普比率 (Sharpe Ratio): {result['sharpe']:.4f}\")\n","        print(f\"回報分佈統計:\")\n","        print(f\"  均值 (Mean): {mean_return:.2f}\")\n","        print(f\"  標準差 (Std): {std_return:.2f}\")\n","        print(f\"  最小值 (Min): {min_return:.2f}\")\n","        print(f\"  最大值 (Max): {max_return:.2f}\")\n","        print(f\"平均交易時長 (K 棒數): {result['avg_duration']:.2f}\")\n","        print(f\"5 筆最短持倉時間平均 (K 棒數): {result['shortest_5_avg']:.2f}\")\n","        print(f\"5 筆最長持倉時間平均 (K 棒數): {result['longest_5_avg']:.2f}\")\n","        print(f\"出場原因統計: {dict(result['exit_reasons'])}\")\n","\n","# 假設 all_monte_carlo_results 已從蒙地卡羅搜索中獲得\n","# 提取每個策略的前 1 筆最佳參數\n","top_monte_carlo_params = extract_top_params_per_strategy(all_monte_carlo_results)\n","\n","# 呈現結果\n","display_top_monte_carlo_params(top_monte_carlo_params)"]},{"cell_type":"markdown","metadata":{"id":"X8SzeZHa1r9E"},"source":["# XGBoos準備工作"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":614,"status":"ok","timestamp":1746626220105,"user":{"displayName":"林家宏","userId":"04041535431236020406"},"user_tz":-480},"id":"eGu01dP_xrg4","outputId":"ebe5dc61-e797-4543-f32e-e1c0b9951238"},"outputs":[{"output_type":"stream","name":"stdout","text":["[{'param_id': 'Param_24', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_1', 'params': {'ma_short': 17, 'ma_long': 23, 'will_period_1': 50, 'will_buy_threshold_1': -55, 'will_period_2': 31, 'will_sell_threshold_2': -35, 'stop_loss': 0.0037928241502823822}, 'trade_count': 26, 'final_capital': 1220864.304, 'win_rate': 0.5384615384615384, 'msr': 0.33892305234115205, 'sharpe': 0.31544355185400025, 'avg_duration': 3.269230769230769, 'exit_reasons': {'death_cross': 10, 'williams_overbought': 12, 'stop_loss': 4}, 'shortest_5_avg': 1.0, 'longest_5_avg': 6.6, 'median_return': 4508.156, 'mad': 13301.414, 'mean_return': 8585.765230769231, 'std_return': 27218.07123220701, 'min_return': -23090.812, 'max_return': 114713.676}, {'param_id': 'Param_43', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 20, 'will_sell_threshold_2': -20, 'stop_loss': 0.002}, 'trade_count': 41, 'final_capital': 1144556.8799999997, 'win_rate': 0.5365853658536586, 'msr': 0.3375929677734388, 'sharpe': 0.21155652441896577, 'avg_duration': 2.073170731707317, 'exit_reasons': {'stop_loss': 10, 'death_cross': 11, 'williams_overbought': 20}, 'shortest_5_avg': 1.0, 'longest_5_avg': 5.2, 'median_return': 3309.316, 'mad': 9802.68, 'mean_return': 3616.5102439024386, 'std_return': 17094.76976504704, 'min_return': -25492.584, 'max_return': 47707.032}, {'param_id': 'Param_49', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 50, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 36, 'final_capital': 1158040.8440000003, 'win_rate': 0.6111111111111112, 'msr': 0.3090573836840017, 'sharpe': 0.2889140852227095, 'avg_duration': 1.7777777777777777, 'exit_reasons': {'price_below_long_ma': 15, 'williams_overbought': 19, 'stop_loss': 2}, 'shortest_5_avg': 1.0, 'longest_5_avg': 5.4, 'median_return': 2411.782, 'mad': 7803.67, 'mean_return': 4481.077111111112, 'std_return': 15510.06743402699, 'min_return': -25492.584, 'max_return': 43307.12}, {'param_id': 'Param_6', 'opt_method': 'Grid Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 20, 'will_sell_threshold_2': -20, 'stop_loss': 0.002}, 'trade_count': 41, 'final_capital': 1114157.488, 'win_rate': 0.5365853658536586, 'msr': 0.2445548561158767, 'sharpe': 0.18490993038859754, 'avg_duration': 1.5609756097560976, 'exit_reasons': {'stop_loss': 9, 'williams_overbought': 20, 'price_below_long_ma': 12}, 'shortest_5_avg': 1.0, 'longest_5_avg': 3.4, 'median_return': 1907.036, 'mad': 7797.988, 'mean_return': 2875.0616585365856, 'std_return': 15548.442886911655, 'min_return': -25492.584, 'max_return': 43307.12}, {'param_id': 'Param_7', 'opt_method': 'Grid Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 20, 'will_sell_threshold_2': -20, 'stop_loss': 0.003}, 'trade_count': 41, 'final_capital': 1097557.8199999998, 'win_rate': 0.5365853658536586, 'msr': 0.2445548561158767, 'sharpe': 0.15356777015633438, 'avg_duration': 1.6097560975609757, 'exit_reasons': {'price_below_long_ma': 17, 'williams_overbought': 21, 'stop_loss': 3}, 'shortest_5_avg': 1.0, 'longest_5_avg': 3.8, 'median_return': 1907.036, 'mad': 7797.988, 'mean_return': 2470.1917073170735, 'std_return': 16085.351360742643, 'min_return': -26090.812, 'max_return': 43307.12}, {'param_id': 'Param_8', 'opt_method': 'Grid Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 20, 'will_sell_threshold_2': -20, 'stop_loss': 0.004}, 'trade_count': 41, 'final_capital': 1097557.8199999998, 'win_rate': 0.5365853658536586, 'msr': 0.2445548561158767, 'sharpe': 0.15356777015633438, 'avg_duration': 1.6097560975609757, 'exit_reasons': {'price_below_long_ma': 17, 'williams_overbought': 21, 'stop_loss': 3}, 'shortest_5_avg': 1.0, 'longest_5_avg': 3.8, 'median_return': 1907.036, 'mad': 7797.988, 'mean_return': 2470.1917073170735, 'std_return': 16085.351360742643, 'min_return': -26090.812, 'max_return': 43307.12}, {'param_id': 'Param_50', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -60, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 27, 'final_capital': 1116306.2399999998, 'win_rate': 0.5925925925925926, 'msr': 0.1996247374611413, 'sharpe': 0.2775155000694983, 'avg_duration': 2.037037037037037, 'exit_reasons': {'price_below_long_ma': 13, 'williams_overbought': 12, 'stop_loss': 2}, 'shortest_5_avg': 1.0, 'longest_5_avg': 5.4, 'median_return': 1914.72, 'mad': 9591.596000000001, 'mean_return': 4398.218814814815, 'std_return': 15848.551331535358, 'min_return': -25492.584, 'max_return': 41518.04}, {'param_id': 'Param_22', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_1', 'params': {'ma_short': 24, 'ma_long': 26, 'will_period_1': 41, 'will_buy_threshold_1': -60, 'will_period_2': 48, 'will_sell_threshold_2': -35, 'stop_loss': 0.003666984526468434}, 'trade_count': 24, 'final_capital': 1102861.9520000003, 'win_rate': 0.5833333333333334, 'msr': 0.19385034283607364, 'sharpe': 0.14355707139404486, 'avg_duration': 4.333333333333333, 'exit_reasons': {'death_cross': 14, 'stop_loss': 7, 'williams_overbought': 3}, 'shortest_5_avg': 1.0, 'longest_5_avg': 11.0, 'median_return': 2209.556, 'mad': 11398.256, 'mean_return': 4376.246, 'std_return': 30484.362705624768, 'min_return': -28290.532, 'max_return': 122913.676}, {'param_id': 'Param_38', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_4', 'params': {'ma_short': 15, 'ma_long': 29, 'will_period_1': 54, 'will_buy_threshold_1': -62, 'will_period_2': 22, 'will_sell_threshold_2': -21, 'stop_loss': 0.0032673173861978277}, 'trade_count': 124, 'final_capital': 1271508.1279999993, 'win_rate': 0.5403225806451613, 'msr': 0.1740385458758251, 'sharpe': 0.14945667520905395, 'avg_duration': 1.4435483870967742, 'exit_reasons': {'price_below_long_ma': 81, 'williams_overbought': 35, 'stop_loss': 7, 'end_of_data': 1}, 'shortest_5_avg': 0.8, 'longest_5_avg': 6.6, 'median_return': 1009.312, 'mad': 5799.358, 'mean_return': 2280.251, 'std_return': 15256.935363668506, 'min_return': -31681.12, 'max_return': 73518.04}, {'param_id': 'Param_44', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -40, 'stop_loss': 0.003}, 'trade_count': 36, 'final_capital': 1210875.6679999996, 'win_rate': 0.5, 'msr': 0.14751670154771016, 'sharpe': 0.24043968590670062, 'avg_duration': 2.9722222222222223, 'exit_reasons': {'death_cross': 13, 'stop_loss': 7, 'williams_overbought': 16}, 'shortest_5_avg': 1.0, 'longest_5_avg': 7.6, 'median_return': 1607.636, 'mad': 10897.992000000002, 'mean_return': 5948.212777777778, 'std_return': 24738.896944904656, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_2', 'opt_method': 'Grid Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 36, 'final_capital': 1306273.7599999993, 'win_rate': 0.5, 'msr': 0.1460289102489864, 'sharpe': 0.28158609462535766, 'avg_duration': 3.888888888888889, 'exit_reasons': {'death_cross': 14, 'williams_overbought': 14, 'stop_loss': 8}, 'shortest_5_avg': 1.0, 'longest_5_avg': 14.0, 'median_return': 1606.402, 'mad': 11000.574, 'mean_return': 8598.159777777777, 'std_return': 30534.745057460023, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_35', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_3', 'params': {'ma_short': 22, 'ma_long': 59, 'will_period_1': 26, 'will_buy_threshold_1': -53, 'will_period_2': 36, 'will_sell_threshold_2': -32, 'stop_loss': 0.0032766471523696552}, 'trade_count': 70, 'final_capital': 1004222.116, 'win_rate': 0.5285714285714286, 'msr': 0.14172653970371554, 'sharpe': 0.009076941986449427, 'avg_duration': 1.7857142857142858, 'exit_reasons': {'death_cross': 49, 'stop_loss': 9, 'williams_overbought': 12}, 'shortest_5_avg': 1.0, 'longest_5_avg': 8.2, 'median_return': 1006.262, 'mad': 7100.023999999999, 'mean_return': 151.58411428571458, 'std_return': 16699.89164250923, 'min_return': -67691.044, 'max_return': 59311.852}, {'param_id': 'Param_25', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_1', 'params': {'ma_short': 23, 'ma_long': 24, 'will_period_1': 39, 'will_buy_threshold_1': -51, 'will_period_2': 37, 'will_sell_threshold_2': -30, 'stop_loss': 0.0026008786510223407}, 'trade_count': 43, 'final_capital': 1055034.616, 'win_rate': 0.5813953488372093, 'msr': 0.11624446332736418, 'sharpe': 0.10174463415853474, 'avg_duration': 2.813953488372093, 'exit_reasons': {'death_cross': 29, 'stop_loss': 7, 'williams_overbought': 7}, 'shortest_5_avg': 1.0, 'longest_5_avg': 7.4, 'median_return': 906.72, 'mad': 7800.112, 'mean_return': 1370.1553488372087, 'std_return': 13466.608765191653, 'min_return': -26285.24, 'max_return': 37510.888}, {'param_id': 'Param_34', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_3', 'params': {'ma_short': 29, 'ma_long': 57, 'will_period_1': 30, 'will_buy_threshold_1': -51, 'will_period_2': 45, 'will_sell_threshold_2': -21, 'stop_loss': 0.0031853608212271483}, 'trade_count': 56, 'final_capital': 857284.3720000001, 'win_rate': 0.5357142857142857, 'msr': 0.08932846732869944, 'sharpe': -0.13637841358657068, 'avg_duration': 2.5357142857142856, 'exit_reasons': {'death_cross': 37, 'stop_loss': 11, 'williams_overbought': 8}, 'shortest_5_avg': 1.0, 'longest_5_avg': 13.4, 'median_return': 812.8040000000001, 'mad': 9099.046, 'mean_return': -2458.1515714285706, 'std_return': 18024.492831740154, 'min_return': -67691.044, 'max_return': 42318.664}, {'param_id': 'Param_39', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_4', 'params': {'ma_short': 19, 'ma_long': 25, 'will_period_1': 60, 'will_buy_threshold_1': -58, 'will_period_2': 33, 'will_sell_threshold_2': -41, 'stop_loss': 0.0035472835704916388}, 'trade_count': 113, 'final_capital': 1129199.7599999993, 'win_rate': 0.5221238938053098, 'msr': 0.08079308121198893, 'sharpe': 0.05983302244307219, 'avg_duration': 1.7345132743362832, 'exit_reasons': {'stop_loss': 13, 'price_below_long_ma': 42, 'williams_overbought': 58}, 'shortest_5_avg': 1.0, 'longest_5_avg': 9.8, 'median_return': 710.808, 'mad': 8797.880000000001, 'mean_return': 1233.614017699115, 'std_return': 20617.608816371656, 'min_return': -81679.488, 'max_return': 104517.816}, {'param_id': 'Param_46', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 20, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -30, 'stop_loss': 0.002}, 'trade_count': 15, 'final_capital': 1116117.768, 'win_rate': 0.5333333333333333, 'msr': 0.08003841281194522, 'sharpe': 0.24971889744953596, 'avg_duration': 1.5333333333333334, 'exit_reasons': {'stop_loss': 6, 'price_below_long_ma': 7, 'williams_overbought': 2}, 'shortest_5_avg': 1.0, 'longest_5_avg': 2.6, 'median_return': 913.12, 'mad': 11408.52, 'mean_return': 7830.513066666666, 'std_return': 31357.310079355993, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_47', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 20, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -30, 'stop_loss': 0.004}, 'trade_count': 15, 'final_capital': 1115717.7759999998, 'win_rate': 0.5333333333333333, 'msr': 0.08003841281194522, 'sharpe': 0.24872326401002054, 'avg_duration': 2.3333333333333335, 'exit_reasons': {'price_below_long_ma': 11, 'stop_loss': 2, 'williams_overbought': 2}, 'shortest_5_avg': 1.0, 'longest_5_avg': 5.0, 'median_return': 913.12, 'mad': 11408.52, 'mean_return': 7803.846933333333, 'std_return': 31375.620602792773, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_15', 'opt_method': 'Grid Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 35, 'ma_long': 40, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 49, 'final_capital': 717250.4840000003, 'win_rate': 0.5306122448979592, 'msr': 0.07195130104464986, 'sharpe': -0.25749895182436094, 'avg_duration': 2.8979591836734695, 'exit_reasons': {'death_cross': 16, 'williams_overbought': 22, 'stop_loss': 11}, 'shortest_5_avg': 1.0, 'longest_5_avg': 7.0, 'median_return': 705.2719999999999, 'mad': 9802.072, 'mean_return': -5679.020816326531, 'std_return': 22054.540194271685, 'min_return': -67691.044, 'max_return': 30708.684}, {'param_id': 'Param_45', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 20, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -30, 'stop_loss': 0.003}, 'trade_count': 15, 'final_capital': 1132317.4440000004, 'win_rate': 0.5333333333333333, 'msr': 0.07026052487137266, 'sharpe': 0.27319071042800464, 'avg_duration': 3.066666666666667, 'exit_reasons': {'death_cross': 9, 'stop_loss': 4, 'williams_overbought': 2}, 'shortest_5_avg': 1.2, 'longest_5_avg': 5.8, 'median_return': 913.12, 'mad': 12996.199999999999, 'mean_return': 8910.491466666666, 'std_return': 32616.377350606246, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_21', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_1', 'params': {'ma_short': 34, 'ma_long': 35, 'will_period_1': 26, 'will_buy_threshold_1': -62, 'will_period_2': 26, 'will_sell_threshold_2': -48, 'stop_loss': 0.0034639878836228103}, 'trade_count': 35, 'final_capital': 900204.3399999996, 'win_rate': 0.5428571428571428, 'msr': 0.06844353842645857, 'sharpe': -0.10400142608683816, 'avg_duration': 2.7714285714285714, 'exit_reasons': {'death_cross': 24, 'williams_overbought': 7, 'stop_loss': 4}, 'shortest_5_avg': 1.0, 'longest_5_avg': 7.0, 'median_return': 507.08, 'mad': 7408.732, 'mean_return': -2759.911314285715, 'std_return': 26537.246505138653, 'min_return': -110890.516, 'max_return': 36109.808}, {'param_id': 'Param_23', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_1', 'params': {'ma_short': 29, 'ma_long': 30, 'will_period_1': 37, 'will_buy_threshold_1': -52, 'will_period_2': 30, 'will_sell_threshold_2': -25, 'stop_loss': 0.0036022205550973923}, 'trade_count': 47, 'final_capital': 1095294.6919999998, 'win_rate': 0.574468085106383, 'msr': 0.048582894058235626, 'sharpe': 0.08612438830405632, 'avg_duration': 2.9361702127659575, 'exit_reasons': {'death_cross': 34, 'williams_overbought': 6, 'stop_loss': 7}, 'shortest_5_avg': 1.0, 'longest_5_avg': 9.8, 'median_return': 311.11199999999997, 'mad': 6403.732, 'mean_return': 2118.006553191489, 'std_return': 24592.41137420151, 'min_return': -65292.232, 'max_return': 85710.704}, {'param_id': 'Param_20', 'opt_method': 'Grid Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 40, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 20, 'will_sell_threshold_2': -40, 'stop_loss': 0.004}, 'trade_count': 84, 'final_capital': 945523.644, 'win_rate': 0.5119047619047619, 'msr': 0.03974144944121897, 'sharpe': -0.04113550219609992, 'avg_duration': 1.2380952380952381, 'exit_reasons': {'price_below_long_ma': 35, 'williams_overbought': 43, 'stop_loss': 6}, 'shortest_5_avg': 1.0, 'longest_5_avg': 4.4, 'median_return': 210.582, 'mad': 5298.796, 'mean_return': -558.7831428571427, 'std_return': 13583.967125525649, 'min_return': -46081.752, 'max_return': 41518.04}, {'param_id': 'Param_19', 'opt_method': 'Grid Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 40, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 20, 'will_sell_threshold_2': -40, 'stop_loss': 0.003}, 'trade_count': 85, 'final_capital': 935131.968, 'win_rate': 0.5058823529411764, 'msr': 0.02126081223804765, 'sharpe': -0.04982820108179725, 'avg_duration': 1.188235294117647, 'exit_reasons': {'price_below_long_ma': 32, 'williams_overbought': 42, 'stop_loss': 11}, 'shortest_5_avg': 1.0, 'longest_5_avg': 3.6, 'median_return': 114.636, 'mad': 5391.884, 'mean_return': -673.3355294117646, 'std_return': 13513.144794713604, 'min_return': -46081.752, 'max_return': 41518.04}, {'param_id': 'Param_54', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 15, 'ma_long': 50, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 30, 'will_sell_threshold_2': -20, 'stop_loss': 0.002}, 'trade_count': 161, 'final_capital': 1095297.6960000002, 'win_rate': 0.5031055900621118, 'msr': 0.02009750061370844, 'sharpe': 0.046205909089746984, 'avg_duration': 1.0062111801242235, 'exit_reasons': {'death_cross': 138, 'stop_loss': 20, 'williams_overbought': 2, 'end_of_data': 1}, 'shortest_5_avg': 0.8, 'longest_5_avg': 1.4, 'median_return': 108.50399999999999, 'mad': 5398.872, 'mean_return': 682.2832546583846, 'std_return': 14766.143582772089, 'min_return': -81679.488, 'max_return': 60910.28}, {'param_id': 'Param_55', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 15, 'ma_long': 50, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 20, 'will_sell_threshold_2': -20, 'stop_loss': 0.002}, 'trade_count': 161, 'final_capital': 1095297.6960000002, 'win_rate': 0.5031055900621118, 'msr': 0.02009750061370844, 'sharpe': 0.046205909089746984, 'avg_duration': 1.0062111801242235, 'exit_reasons': {'death_cross': 138, 'stop_loss': 20, 'williams_overbought': 2, 'end_of_data': 1}, 'shortest_5_avg': 0.8, 'longest_5_avg': 1.4, 'median_return': 108.50399999999999, 'mad': 5398.872, 'mean_return': 682.2832546583846, 'std_return': 14766.143582772089, 'min_return': -81679.488, 'max_return': 60910.28}, {'param_id': 'Param_31', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_3', 'params': {'ma_short': 35, 'ma_long': 37, 'will_period_1': 24, 'will_buy_threshold_1': -53, 'will_period_2': 27, 'will_sell_threshold_2': -45, 'stop_loss': 0.0038355950678861392}, 'trade_count': 65, 'final_capital': 715121.7800000003, 'win_rate': 0.5076923076923077, 'msr': 0.011598202922717503, 'sharpe': -0.22583558565937553, 'avg_duration': 3.4153846153846152, 'exit_reasons': {'death_cross': 17, 'stop_loss': 15, 'williams_overbought': 33}, 'shortest_5_avg': 1.0, 'longest_5_avg': 9.8, 'median_return': 106.72399999999999, 'mad': 9201.756, 'mean_return': -4291.328923076923, 'std_return': 19002.005716743588, 'min_return': -65292.232, 'max_return': 25908.78}, {'param_id': 'Param_11', 'opt_method': 'Grid Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 30, 'ma_long': 60, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.003}, 'trade_count': 55, 'final_capital': 809989.3440000002, 'win_rate': 0.509090909090909, 'msr': 0.011114472595283321, 'sharpe': -0.19359277419754975, 'avg_duration': 2.2181818181818183, 'exit_reasons': {'death_cross': 32, 'williams_overbought': 10, 'stop_loss': 13}, 'shortest_5_avg': 1.0, 'longest_5_avg': 8.4, 'median_return': 106.72399999999999, 'mad': 9602.24, 'mean_return': -3363.7005090909092, 'std_return': 17375.135459989444, 'min_return': -67691.044, 'max_return': 29909.808}, {'param_id': 'Param_12', 'opt_method': 'Grid Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 30, 'ma_long': 60, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 55, 'final_capital': 726791.0080000003, 'win_rate': 0.509090909090909, 'msr': 0.011114472595283321, 'sharpe': -0.2487264761230265, 'avg_duration': 2.4727272727272727, 'exit_reasons': {'death_cross': 33, 'williams_overbought': 10, 'stop_loss': 12}, 'shortest_5_avg': 1.0, 'longest_5_avg': 9.0, 'median_return': 106.72399999999999, 'mad': 9602.24, 'mean_return': -4876.397527272728, 'std_return': 19605.46287612503, 'min_return': -67691.044, 'max_return': 29909.808}, {'param_id': 'Param_52', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 30, 'ma_long': 40, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 30, 'will_sell_threshold_2': -20, 'stop_loss': 0.003}, 'trade_count': 83, 'final_capital': 874653.192, 'win_rate': 0.4819277108433735, 'msr': -0.05392377060795981, 'sharpe': -0.08865739246555186, 'avg_duration': 1.2771084337349397, 'exit_reasons': {'death_cross': 65, 'stop_loss': 13, 'williams_overbought': 5}, 'shortest_5_avg': 1.0, 'longest_5_avg': 4.6, 'median_return': -291.224, 'mad': 5400.664, 'mean_return': -1420.1481927710843, 'std_return': 16018.386283913713, 'min_return': -65292.232, 'max_return': 41518.04}, {'param_id': 'Param_18', 'opt_method': 'Grid Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 40, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 20, 'will_sell_threshold_2': -40, 'stop_loss': 0.002}, 'trade_count': 86, 'final_capital': 949539.7640000001, 'win_rate': 0.5, 'msr': -0.06707907618519499, 'sharpe': -0.035845684393098376, 'avg_duration': 1.1627906976744187, 'exit_reasons': {'price_below_long_ma': 25, 'williams_overbought': 41, 'stop_loss': 20}, 'shortest_5_avg': 1.0, 'longest_5_avg': 3.6, 'median_return': -388.786, 'mad': 5795.938, 'mean_return': -496.85776744186035, 'std_return': 13861.025183946287, 'min_return': -46081.752, 'max_return': 41518.04}, {'param_id': 'Param_40', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_4', 'params': {'ma_short': 17, 'ma_long': 34, 'will_period_1': 59, 'will_buy_threshold_1': -75, 'will_period_2': 53, 'will_sell_threshold_2': -20, 'stop_loss': 0.0034805756690683993}, 'trade_count': 54, 'final_capital': 1052582.9760000003, 'win_rate': 0.48148148148148145, 'msr': -0.06712104533812113, 'sharpe': 0.04366270294403862, 'avg_duration': 2.0, 'exit_reasons': {'price_below_long_ma': 50, 'stop_loss': 3, 'williams_overbought': 1}, 'shortest_5_avg': 1.0, 'longest_5_avg': 11.8, 'median_return': -389.39599999999996, 'mad': 5801.402, 'mean_return': 1064.6456296296296, 'std_return': 24383.40714562477, 'min_return': -125687.888, 'max_return': 76907.168}, {'param_id': 'Param_16', 'opt_method': 'Grid Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 60, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.003}, 'trade_count': 55, 'final_capital': 897992.312, 'win_rate': 0.4909090909090909, 'msr': -0.07703855001601238, 'sharpe': -0.119858976879303, 'avg_duration': 1.9272727272727272, 'exit_reasons': {'price_below_long_ma': 32, 'williams_overbought': 16, 'stop_loss': 7}, 'shortest_5_avg': 1.0, 'longest_5_avg': 6.8, 'median_return': -693.1320000000001, 'mad': 8997.212, 'mean_return': -1763.689527272727, 'std_return': 14714.706731690316, 'min_return': -67691.044, 'max_return': 29909.808}, {'param_id': 'Param_17', 'opt_method': 'Grid Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 60, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 55, 'final_capital': 885192.5680000001, 'win_rate': 0.4909090909090909, 'msr': -0.07703855001601238, 'sharpe': -0.1330698720312617, 'avg_duration': 1.981818181818182, 'exit_reasons': {'price_below_long_ma': 34, 'williams_overbought': 16, 'stop_loss': 5}, 'shortest_5_avg': 1.0, 'longest_5_avg': 7.0, 'median_return': -693.1320000000001, 'mad': 8997.212, 'mean_return': -1996.4121454545452, 'std_return': 15002.737145882284, 'min_return': -67691.044, 'max_return': 29909.808}, {'param_id': 'Param_36', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_4', 'params': {'ma_short': 16, 'ma_long': 29, 'will_period_1': 58, 'will_buy_threshold_1': -59, 'will_period_2': 30, 'will_sell_threshold_2': -33, 'stop_loss': 0.0034789563525255635}, 'trade_count': 136, 'final_capital': 894414.2760000001, 'win_rate': 0.4852941176470588, 'msr': -0.08168025571332527, 'sharpe': -0.03595371491786686, 'avg_duration': 1.5220588235294117, 'exit_reasons': {'price_below_long_ma': 75, 'williams_overbought': 50, 'stop_loss': 10, 'end_of_data': 1}, 'shortest_5_avg': 0.8, 'longest_5_avg': 7.4, 'median_return': -490.256, 'mad': 6002.137999999999, 'mean_return': -685.9709705882352, 'std_return': 19079.283985589347, 'min_return': -97488.968, 'max_return': 73518.04}, {'param_id': 'Param_26', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_2', 'params': {'ma_short': 23, 'ma_long': 25, 'will_period_1': 42, 'will_buy_threshold_1': -53, 'will_period_2': 44, 'will_sell_threshold_2': -24, 'stop_loss': 0.0024984918912897922}, 'trade_count': 25, 'final_capital': 1150877.0759999997, 'win_rate': 0.48, 'msr': -0.09212215944773981, 'sharpe': 0.16568937917174476, 'avg_duration': 3.08, 'exit_reasons': {'price_below_long_ma': 17, 'williams_overbought': 3, 'stop_loss': 5}, 'shortest_5_avg': 1.0, 'longest_5_avg': 10.2, 'median_return': -295.328, 'mad': 3205.832, 'mean_return': 6125.47936, 'std_return': 36969.6550494283, 'min_return': -22091.036, 'max_return': 170516.1}, {'param_id': 'Param_58', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 60, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 60, 'will_sell_threshold_2': -30, 'stop_loss': 0.002}, 'trade_count': 85, 'final_capital': 857512.4079999998, 'win_rate': 0.4588235294117647, 'msr': -0.12394672182768571, 'sharpe': -0.07342899693376602, 'avg_duration': 1.588235294117647, 'exit_reasons': {'price_below_long_ma': 61, 'stop_loss': 20, 'williams_overbought': 4}, 'shortest_5_avg': 1.0, 'longest_5_avg': 9.6, 'median_return': -892.208, 'mad': 7198.320000000001, 'mean_return': -1586.3826352941173, 'std_return': 21604.3098531187, 'min_return': -121282.936, 'max_return': 61305.4}, {'param_id': 'Param_13', 'opt_method': 'Grid Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 30, 'ma_long': 50, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.003}, 'trade_count': 54, 'final_capital': 823980.8840000002, 'win_rate': 0.48148148148148145, 'msr': -0.13989534801288972, 'sharpe': -0.18384911678169666, 'avg_duration': 2.2037037037037037, 'exit_reasons': {'death_cross': 32, 'williams_overbought': 11, 'stop_loss': 11}, 'shortest_5_avg': 1.0, 'longest_5_avg': 8.4, 'median_return': -1189.286, 'mad': 8501.256, 'mean_return': -3168.664740740741, 'std_return': 17235.138046215885, 'min_return': -67691.044, 'max_return': 29909.808}, {'param_id': 'Param_14', 'opt_method': 'Grid Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 30, 'ma_long': 50, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 54, 'final_capital': 745582.4520000003, 'win_rate': 0.48148148148148145, 'msr': -0.13989534801288972, 'sharpe': -0.23733725248465243, 'avg_duration': 2.3518518518518516, 'exit_reasons': {'death_cross': 33, 'williams_overbought': 11, 'stop_loss': 10}, 'shortest_5_avg': 1.0, 'longest_5_avg': 8.6, 'median_return': -1189.286, 'mad': 8501.256, 'mean_return': -4620.487555555556, 'std_return': 19468.02566327429, 'min_return': -67691.044, 'max_return': 29909.808}, {'param_id': 'Param_32', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_3', 'params': {'ma_short': 34, 'ma_long': 40, 'will_period_1': 24, 'will_buy_threshold_1': -55, 'will_period_2': 22, 'will_sell_threshold_2': -48, 'stop_loss': 0.0032775014498060886}, 'trade_count': 45, 'final_capital': 683166.6440000006, 'win_rate': 0.4222222222222222, 'msr': -0.14945283415102747, 'sharpe': -0.32006249127525055, 'avg_duration': 3.7555555555555555, 'exit_reasons': {'death_cross': 11, 'stop_loss': 18, 'williams_overbought': 16}, 'shortest_5_avg': 1.0, 'longest_5_avg': 9.8, 'median_return': -2093.244, 'mad': 14006.052000000001, 'mean_return': -6949.190933333335, 'std_return': 21711.982157958544, 'min_return': -65292.232, 'max_return': 29909.808}, {'param_id': 'Param_57', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 40, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 30, 'will_sell_threshold_2': -20, 'stop_loss': 0.003}, 'trade_count': 67, 'final_capital': 983377.252, 'win_rate': 0.4626865671641791, 'msr': -0.15402855417426511, 'sharpe': -0.008594824580617258, 'avg_duration': 2.08955223880597, 'exit_reasons': {'price_below_long_ma': 33, 'williams_overbought': 22, 'stop_loss': 12}, 'shortest_5_avg': 1.0, 'longest_5_avg': 7.2, 'median_return': -1292.284, 'mad': 8389.9, 'mean_return': -158.37802985074643, 'std_return': 18427.158696709408, 'min_return': -46081.752, 'max_return': 67117.388}, {'param_id': 'Param_60', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 50, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 20, 'will_sell_threshold_2': -50, 'stop_loss': 0.002}, 'trade_count': 56, 'final_capital': 985412.1840000002, 'win_rate': 0.44642857142857145, 'msr': -0.15497123529647922, 'sharpe': -0.012701697169774073, 'avg_duration': 1.4107142857142858, 'exit_reasons': {'price_below_long_ma': 23, 'stop_loss': 16, 'williams_overbought': 17}, 'shortest_5_avg': 1.0, 'longest_5_avg': 4.6, 'median_return': -1286.726, 'mad': 8303.0, 'mean_return': -169.533285714286, 'std_return': 13347.307065735073, 'min_return': -25088.34, 'max_return': 55711.852}, {'param_id': 'Param_56', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 60, 'will_period_1': 50, 'will_buy_threshold_1': -60, 'will_period_2': 50, 'will_sell_threshold_2': -20, 'stop_loss': 0.004}, 'trade_count': 67, 'final_capital': 952348.7120000002, 'win_rate': 0.43283582089552236, 'msr': -0.18865798255954666, 'sharpe': -0.03730059904775016, 'avg_duration': 1.462686567164179, 'exit_reasons': {'price_below_long_ma': 60, 'stop_loss': 4, 'williams_overbought': 3}, 'shortest_5_avg': 1.0, 'longest_5_avg': 6.6, 'median_return': -1093.38, 'mad': 5795.568, 'mean_return': -621.2729552238808, 'std_return': 16655.848371100637, 'min_return': -59887.732, 'max_return': 44308.448}, {'param_id': 'Param_48', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 50, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 32, 'final_capital': 1131388.7359999996, 'win_rate': 0.40625, 'msr': -0.1944613362781047, 'sharpe': 0.16964265440829648, 'avg_duration': 3.09375, 'exit_reasons': {'price_below_long_ma': 22, 'williams_overbought': 7, 'stop_loss': 3}, 'shortest_5_avg': 1.0, 'longest_5_avg': 12.2, 'median_return': -1692.286, 'mad': 8702.43, 'mean_return': 4196.6561249999995, 'std_return': 24738.21205504606, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_29', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_2', 'params': {'ma_short': 20, 'ma_long': 22, 'will_period_1': 47, 'will_buy_threshold_1': -57, 'will_period_2': 51, 'will_sell_threshold_2': -25, 'stop_loss': 0.0023715465916692388}, 'trade_count': 33, 'final_capital': 1262180.147999999, 'win_rate': 0.45454545454545453, 'msr': -0.20254419567007514, 'sharpe': 0.1735058950658888, 'avg_duration': 4.0606060606060606, 'exit_reasons': {'price_below_long_ma': 22, 'williams_overbought': 4, 'stop_loss': 7}, 'shortest_5_avg': 1.0, 'longest_5_avg': 16.2, 'median_return': -1295.432, 'mad': 6395.8, 'mean_return': 8035.981575757575, 'std_return': 46315.32205888018, 'min_return': -17090.34, 'max_return': 247714.952}, {'param_id': 'Param_1', 'opt_method': 'Grid Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -50, 'stop_loss': 0.003}, 'trade_count': 36, 'final_capital': 1242675.0319999992, 'win_rate': 0.4722222222222222, 'msr': -0.2050750131903639, 'sharpe': 0.2270248329521958, 'avg_duration': 3.8333333333333335, 'exit_reasons': {'death_cross': 13, 'williams_overbought': 14, 'stop_loss': 9}, 'shortest_5_avg': 1.0, 'longest_5_avg': 13.6, 'median_return': -2891.286, 'mad': 14098.676, 'mean_return': 6831.528444444444, 'std_return': 30091.546325314463, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_10', 'opt_method': 'Grid Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -40, 'stop_loss': 0.004}, 'trade_count': 35, 'final_capital': 1316444.5039999997, 'win_rate': 0.4, 'msr': -0.2122594182382306, 'sharpe': 0.23658018867908842, 'avg_duration': 4.0285714285714285, 'exit_reasons': {'price_below_long_ma': 22, 'williams_overbought': 8, 'stop_loss': 5}, 'shortest_5_avg': 1.0, 'longest_5_avg': 13.8, 'median_return': -2291.696, 'mad': 10796.676, 'mean_return': 9131.972114285716, 'std_return': 38599.901363702964, 'min_return': -25492.584, 'max_return': 174515.38}, {'param_id': 'Param_51', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 30, 'ma_long': 40, 'will_period_1': 50, 'will_buy_threshold_1': -60, 'will_period_2': 20, 'will_sell_threshold_2': -20, 'stop_loss': 0.003}, 'trade_count': 66, 'final_capital': 864921.6800000004, 'win_rate': 0.45454545454545453, 'msr': -0.22061885264020795, 'sharpe': -0.1170274773389586, 'avg_duration': 1.2121212121212122, 'exit_reasons': {'death_cross': 53, 'stop_loss': 10, 'williams_overbought': 3}, 'shortest_5_avg': 1.0, 'longest_5_avg': 3.6, 'median_return': -1190.986, 'mad': 5398.388, 'mean_return': -1956.6352727272729, 'std_return': 16719.453276145883, 'min_return': -65292.232, 'max_return': 41518.04}, {'param_id': 'Param_33', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_3', 'params': {'ma_short': 34, 'ma_long': 35, 'will_period_1': 26, 'will_buy_threshold_1': -62, 'will_period_2': 26, 'will_sell_threshold_2': -48, 'stop_loss': 0.0034639878836228103}, 'trade_count': 21, 'final_capital': 783723.2080000004, 'win_rate': 0.38095238095238093, 'msr': -0.24588876839913715, 'sharpe': -0.4077590178897287, 'avg_duration': 3.9523809523809526, 'exit_reasons': {'death_cross': 7, 'stop_loss': 8, 'williams_overbought': 6}, 'shortest_5_avg': 1.0, 'longest_5_avg': 7.8, 'median_return': -3491.94, 'mad': 14201.300000000001, 'mean_return': -10206.489142857146, 'std_return': 25030.6893575165, 'min_return': -65292.232, 'max_return': 21904.044}, {'param_id': 'Param_28', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_2', 'params': {'ma_short': 23, 'ma_long': 25, 'will_period_1': 38, 'will_buy_threshold_1': -51, 'will_period_2': 43, 'will_sell_threshold_2': -23, 'stop_loss': 0.003383692550273637}, 'trade_count': 26, 'final_capital': 1071091.1079999995, 'win_rate': 0.4230769230769231, 'msr': -0.2732998811556401, 'sharpe': 0.08642416412855893, 'avg_duration': 3.1153846153846154, 'exit_reasons': {'price_below_long_ma': 20, 'williams_overbought': 2, 'stop_loss': 4}, 'shortest_5_avg': 1.0, 'longest_5_avg': 11.2, 'median_return': -1092.638, 'mad': 3997.946, 'mean_return': 2824.7998461538473, 'std_return': 32685.299394798814, 'min_return': -25290.616, 'max_return': 155316.404}, {'param_id': 'Param_37', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_4', 'params': {'ma_short': 33, 'ma_long': 56, 'will_period_1': 20, 'will_buy_threshold_1': -70, 'will_period_2': 33, 'will_sell_threshold_2': -22, 'stop_loss': 0.003708610533670233}, 'trade_count': 20, 'final_capital': 1033394.02, 'win_rate': 0.45, 'msr': -0.27475550698271356, 'sharpe': 0.07213470722745725, 'avg_duration': 6.15, 'exit_reasons': {'williams_overbought': 11, 'price_below_long_ma': 4, 'stop_loss': 5}, 'shortest_5_avg': 1.0, 'longest_5_avg': 16.4, 'median_return': -3488.9700000000003, 'mad': 12698.454, 'mean_return': 1759.8319999999999, 'std_return': 24396.464628104477, 'min_return': -28688.22, 'max_return': 68711.852}, {'param_id': 'Param_53', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 35, 'ma_long': 40, 'will_period_1': 50, 'will_buy_threshold_1': -60, 'will_period_2': 30, 'will_sell_threshold_2': -20, 'stop_loss': 0.004}, 'trade_count': 45, 'final_capital': 946091.18, 'win_rate': 0.4222222222222222, 'msr': -0.287898603997336, 'sharpe': -0.05600071562060354, 'avg_duration': 1.4, 'exit_reasons': {'death_cross': 36, 'stop_loss': 6, 'williams_overbought': 3}, 'shortest_5_avg': 1.0, 'longest_5_avg': 4.0, 'median_return': -1093.38, 'mad': 3797.7960000000003, 'mean_return': -1107.8656000000003, 'std_return': 19783.064455323958, 'min_return': -65292.232, 'max_return': 62507.716}, {'param_id': 'Param_3', 'opt_method': 'Grid Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -50, 'will_period_2': 40, 'will_sell_threshold_2': -30, 'stop_loss': 0.004}, 'trade_count': 36, 'final_capital': 1169076.503999999, 'win_rate': 0.4444444444444444, 'msr': -0.3245721465139299, 'sharpe': 0.1712261269147941, 'avg_duration': 5.583333333333333, 'exit_reasons': {'death_cross': 18, 'stop_loss': 10, 'williams_overbought': 8}, 'shortest_5_avg': 1.0, 'longest_5_avg': 15.0, 'median_return': -5290.618, 'mad': 16300.284, 'mean_return': 4787.1248888888895, 'std_return': 27957.910445550177, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_5', 'opt_method': 'Grid Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 41, 'final_capital': 1107757.6159999992, 'win_rate': 0.4878048780487805, 'msr': -0.3256815491196416, 'sharpe': 0.08281886873178022, 'avg_duration': 4.390243902439025, 'exit_reasons': {'death_cross': 16, 'williams_overbought': 17, 'stop_loss': 8}, 'shortest_5_avg': 1.0, 'longest_5_avg': 14.6, 'median_return': -4689.508, 'mad': 14399.06, 'mean_return': 2718.967219512195, 'std_return': 32830.28486722343, 'min_return': -124882.936, 'max_return': 97516.92}, {'param_id': 'Param_41', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -40, 'stop_loss': 0.004}, 'trade_count': 33, 'final_capital': 1178216.8519999995, 'win_rate': 0.45454545454545453, 'msr': -0.3256815491196416, 'sharpe': 0.2022384243668734, 'avg_duration': 4.696969696969697, 'exit_reasons': {'death_cross': 17, 'stop_loss': 7, 'williams_overbought': 9}, 'shortest_5_avg': 1.0, 'longest_5_avg': 14.6, 'median_return': -4689.508, 'mad': 14399.06, 'mean_return': 5491.108606060606, 'std_return': 27151.657537801613, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_42', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -60, 'will_period_2': 60, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 28, 'final_capital': 1125335.1119999993, 'win_rate': 0.4642857142857143, 'msr': -0.3302360054406824, 'sharpe': 0.17172608645223766, 'avg_duration': 4.071428571428571, 'exit_reasons': {'death_cross': 13, 'williams_overbought': 9, 'stop_loss': 6}, 'shortest_5_avg': 1.0, 'longest_5_avg': 13.6, 'median_return': -4689.896, 'mad': 14201.65, 'mean_return': 4566.651857142858, 'std_return': 26592.649869455436, 'min_return': -25492.584, 'max_return': 97516.92}, {'param_id': 'Param_4', 'opt_method': 'Grid Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -50, 'stop_loss': 0.003}, 'trade_count': 41, 'final_capital': 1044158.8879999997, 'win_rate': 0.4634146341463415, 'msr': -0.3302709076045773, 'sharpe': 0.0362817470860014, 'avg_duration': 4.341463414634147, 'exit_reasons': {'death_cross': 15, 'williams_overbought': 17, 'stop_loss': 9}, 'shortest_5_avg': 1.0, 'longest_5_avg': 14.2, 'median_return': -4690.284, 'mad': 14201.324, 'mean_return': 1167.7787317073164, 'std_return': 32186.392851275185, 'min_return': -124882.936, 'max_return': 97516.92}, {'param_id': 'Param_59', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 40, 'will_period_1': 50, 'will_buy_threshold_1': -60, 'will_period_2': 40, 'will_sell_threshold_2': -40, 'stop_loss': 0.002}, 'trade_count': 54, 'final_capital': 906918.3720000001, 'win_rate': 0.42592592592592593, 'msr': -0.409355737009362, 'sharpe': -0.10674974181860172, 'avg_duration': 2.0185185185185186, 'exit_reasons': {'price_below_long_ma': 25, 'williams_overbought': 16, 'stop_loss': 13}, 'shortest_5_avg': 1.0, 'longest_5_avg': 7.6, 'median_return': -2988.318, 'mad': 7300.052, 'mean_return': -1634.0737037037038, 'std_return': 15307.52058536243, 'min_return': -46081.752, 'max_return': 43518.0}, {'param_id': 'Param_9', 'opt_method': 'Grid Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 50, 'will_sell_threshold_2': -40, 'stop_loss': 0.004}, 'trade_count': 39, 'final_capital': 1106320.507999999, 'win_rate': 0.358974358974359, 'msr': -0.41880844183787086, 'sharpe': 0.10337738044377967, 'avg_duration': 4.0, 'exit_reasons': {'price_below_long_ma': 23, 'williams_overbought': 11, 'stop_loss': 5}, 'shortest_5_avg': 1.0, 'longest_5_avg': 13.4, 'median_return': -3685.36, 'mad': 8799.632, 'mean_return': 2816.900512820512, 'std_return': 27248.710830758348, 'min_return': -26090.812, 'max_return': 123316.404}, {'param_id': 'Param_30', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_2', 'params': {'ma_short': 22, 'ma_long': 27, 'will_period_1': 42, 'will_buy_threshold_1': -52, 'will_period_2': 49, 'will_sell_threshold_2': -23, 'stop_loss': 0.003217537919217248}, 'trade_count': 16, 'final_capital': 953492.7440000001, 'win_rate': 0.1875, 'msr': -0.45458058579892885, 'sharpe': -0.13579731560232436, 'avg_duration': 4.25, 'exit_reasons': {'price_below_long_ma': 9, 'stop_loss': 5, 'williams_overbought': 2}, 'shortest_5_avg': 1.0, 'longest_5_avg': 10.2, 'median_return': -4091.036, 'mad': 8999.583999999999, 'mean_return': -2815.8244999999997, 'std_return': 20735.495795164818, 'min_return': -24084.992, 'max_return': 61309.688}, {'param_id': 'Param_27', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_2', 'params': {'ma_short': 17, 'ma_long': 22, 'will_period_1': 44, 'will_buy_threshold_1': -52, 'will_period_2': 60, 'will_sell_threshold_2': -26, 'stop_loss': 0.0028255511820897985}, 'trade_count': 26, 'final_capital': 1090882.208, 'win_rate': 0.34615384615384615, 'msr': -0.493694221555867, 'sharpe': 0.11544745943219935, 'avg_duration': 5.269230769230769, 'exit_reasons': {'price_below_long_ma': 14, 'stop_loss': 8, 'williams_overbought': 4}, 'shortest_5_avg': 1.0, 'longest_5_avg': 16.2, 'median_return': -4688.994000000001, 'mad': 9497.77, 'mean_return': 3586.159538461538, 'std_return': 31063.129404774572, 'min_return': -20891.036, 'max_return': 124309.244}]\n","[{'param_id': 'Param_1', 'opt_method': 'Grid Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -50, 'stop_loss': 0.003}, 'trade_count': 36, 'final_capital': 1242675.0319999992, 'win_rate': 0.4722222222222222, 'msr': -0.2050750131903639, 'sharpe': 0.2270248329521958, 'avg_duration': 3.8333333333333335, 'exit_reasons': {'death_cross': 13, 'williams_overbought': 14, 'stop_loss': 9}, 'shortest_5_avg': 1.0, 'longest_5_avg': 13.6, 'median_return': -2891.286, 'mad': 14098.676, 'mean_return': 6831.528444444444, 'std_return': 30091.546325314463, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_2', 'opt_method': 'Grid Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 36, 'final_capital': 1306273.7599999993, 'win_rate': 0.5, 'msr': 0.1460289102489864, 'sharpe': 0.28158609462535766, 'avg_duration': 3.888888888888889, 'exit_reasons': {'death_cross': 14, 'williams_overbought': 14, 'stop_loss': 8}, 'shortest_5_avg': 1.0, 'longest_5_avg': 14.0, 'median_return': 1606.402, 'mad': 11000.574, 'mean_return': 8598.159777777777, 'std_return': 30534.745057460023, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_3', 'opt_method': 'Grid Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -50, 'will_period_2': 40, 'will_sell_threshold_2': -30, 'stop_loss': 0.004}, 'trade_count': 36, 'final_capital': 1169076.503999999, 'win_rate': 0.4444444444444444, 'msr': -0.3245721465139299, 'sharpe': 0.1712261269147941, 'avg_duration': 5.583333333333333, 'exit_reasons': {'death_cross': 18, 'stop_loss': 10, 'williams_overbought': 8}, 'shortest_5_avg': 1.0, 'longest_5_avg': 15.0, 'median_return': -5290.618, 'mad': 16300.284, 'mean_return': 4787.1248888888895, 'std_return': 27957.910445550177, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_4', 'opt_method': 'Grid Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -50, 'stop_loss': 0.003}, 'trade_count': 41, 'final_capital': 1044158.8879999997, 'win_rate': 0.4634146341463415, 'msr': -0.3302709076045773, 'sharpe': 0.0362817470860014, 'avg_duration': 4.341463414634147, 'exit_reasons': {'death_cross': 15, 'williams_overbought': 17, 'stop_loss': 9}, 'shortest_5_avg': 1.0, 'longest_5_avg': 14.2, 'median_return': -4690.284, 'mad': 14201.324, 'mean_return': 1167.7787317073164, 'std_return': 32186.392851275185, 'min_return': -124882.936, 'max_return': 97516.92}, {'param_id': 'Param_5', 'opt_method': 'Grid Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 41, 'final_capital': 1107757.6159999992, 'win_rate': 0.4878048780487805, 'msr': -0.3256815491196416, 'sharpe': 0.08281886873178022, 'avg_duration': 4.390243902439025, 'exit_reasons': {'death_cross': 16, 'williams_overbought': 17, 'stop_loss': 8}, 'shortest_5_avg': 1.0, 'longest_5_avg': 14.6, 'median_return': -4689.508, 'mad': 14399.06, 'mean_return': 2718.967219512195, 'std_return': 32830.28486722343, 'min_return': -124882.936, 'max_return': 97516.92}, {'param_id': 'Param_6', 'opt_method': 'Grid Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 20, 'will_sell_threshold_2': -20, 'stop_loss': 0.002}, 'trade_count': 41, 'final_capital': 1114157.488, 'win_rate': 0.5365853658536586, 'msr': 0.2445548561158767, 'sharpe': 0.18490993038859754, 'avg_duration': 1.5609756097560976, 'exit_reasons': {'stop_loss': 9, 'williams_overbought': 20, 'price_below_long_ma': 12}, 'shortest_5_avg': 1.0, 'longest_5_avg': 3.4, 'median_return': 1907.036, 'mad': 7797.988, 'mean_return': 2875.0616585365856, 'std_return': 15548.442886911655, 'min_return': -25492.584, 'max_return': 43307.12}, {'param_id': 'Param_7', 'opt_method': 'Grid Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 20, 'will_sell_threshold_2': -20, 'stop_loss': 0.003}, 'trade_count': 41, 'final_capital': 1097557.8199999998, 'win_rate': 0.5365853658536586, 'msr': 0.2445548561158767, 'sharpe': 0.15356777015633438, 'avg_duration': 1.6097560975609757, 'exit_reasons': {'price_below_long_ma': 17, 'williams_overbought': 21, 'stop_loss': 3}, 'shortest_5_avg': 1.0, 'longest_5_avg': 3.8, 'median_return': 1907.036, 'mad': 7797.988, 'mean_return': 2470.1917073170735, 'std_return': 16085.351360742643, 'min_return': -26090.812, 'max_return': 43307.12}, {'param_id': 'Param_8', 'opt_method': 'Grid Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 20, 'will_sell_threshold_2': -20, 'stop_loss': 0.004}, 'trade_count': 41, 'final_capital': 1097557.8199999998, 'win_rate': 0.5365853658536586, 'msr': 0.2445548561158767, 'sharpe': 0.15356777015633438, 'avg_duration': 1.6097560975609757, 'exit_reasons': {'price_below_long_ma': 17, 'williams_overbought': 21, 'stop_loss': 3}, 'shortest_5_avg': 1.0, 'longest_5_avg': 3.8, 'median_return': 1907.036, 'mad': 7797.988, 'mean_return': 2470.1917073170735, 'std_return': 16085.351360742643, 'min_return': -26090.812, 'max_return': 43307.12}, {'param_id': 'Param_9', 'opt_method': 'Grid Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 50, 'will_sell_threshold_2': -40, 'stop_loss': 0.004}, 'trade_count': 39, 'final_capital': 1106320.507999999, 'win_rate': 0.358974358974359, 'msr': -0.41880844183787086, 'sharpe': 0.10337738044377967, 'avg_duration': 4.0, 'exit_reasons': {'price_below_long_ma': 23, 'williams_overbought': 11, 'stop_loss': 5}, 'shortest_5_avg': 1.0, 'longest_5_avg': 13.4, 'median_return': -3685.36, 'mad': 8799.632, 'mean_return': 2816.900512820512, 'std_return': 27248.710830758348, 'min_return': -26090.812, 'max_return': 123316.404}, {'param_id': 'Param_10', 'opt_method': 'Grid Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -40, 'stop_loss': 0.004}, 'trade_count': 35, 'final_capital': 1316444.5039999997, 'win_rate': 0.4, 'msr': -0.2122594182382306, 'sharpe': 0.23658018867908842, 'avg_duration': 4.0285714285714285, 'exit_reasons': {'price_below_long_ma': 22, 'williams_overbought': 8, 'stop_loss': 5}, 'shortest_5_avg': 1.0, 'longest_5_avg': 13.8, 'median_return': -2291.696, 'mad': 10796.676, 'mean_return': 9131.972114285716, 'std_return': 38599.901363702964, 'min_return': -25492.584, 'max_return': 174515.38}, {'param_id': 'Param_11', 'opt_method': 'Grid Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 30, 'ma_long': 60, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.003}, 'trade_count': 55, 'final_capital': 809989.3440000002, 'win_rate': 0.509090909090909, 'msr': 0.011114472595283321, 'sharpe': -0.19359277419754975, 'avg_duration': 2.2181818181818183, 'exit_reasons': {'death_cross': 32, 'williams_overbought': 10, 'stop_loss': 13}, 'shortest_5_avg': 1.0, 'longest_5_avg': 8.4, 'median_return': 106.72399999999999, 'mad': 9602.24, 'mean_return': -3363.7005090909092, 'std_return': 17375.135459989444, 'min_return': -67691.044, 'max_return': 29909.808}, {'param_id': 'Param_12', 'opt_method': 'Grid Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 30, 'ma_long': 60, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 55, 'final_capital': 726791.0080000003, 'win_rate': 0.509090909090909, 'msr': 0.011114472595283321, 'sharpe': -0.2487264761230265, 'avg_duration': 2.4727272727272727, 'exit_reasons': {'death_cross': 33, 'williams_overbought': 10, 'stop_loss': 12}, 'shortest_5_avg': 1.0, 'longest_5_avg': 9.0, 'median_return': 106.72399999999999, 'mad': 9602.24, 'mean_return': -4876.397527272728, 'std_return': 19605.46287612503, 'min_return': -67691.044, 'max_return': 29909.808}, {'param_id': 'Param_13', 'opt_method': 'Grid Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 30, 'ma_long': 50, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.003}, 'trade_count': 54, 'final_capital': 823980.8840000002, 'win_rate': 0.48148148148148145, 'msr': -0.13989534801288972, 'sharpe': -0.18384911678169666, 'avg_duration': 2.2037037037037037, 'exit_reasons': {'death_cross': 32, 'williams_overbought': 11, 'stop_loss': 11}, 'shortest_5_avg': 1.0, 'longest_5_avg': 8.4, 'median_return': -1189.286, 'mad': 8501.256, 'mean_return': -3168.664740740741, 'std_return': 17235.138046215885, 'min_return': -67691.044, 'max_return': 29909.808}, {'param_id': 'Param_14', 'opt_method': 'Grid Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 30, 'ma_long': 50, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 54, 'final_capital': 745582.4520000003, 'win_rate': 0.48148148148148145, 'msr': -0.13989534801288972, 'sharpe': -0.23733725248465243, 'avg_duration': 2.3518518518518516, 'exit_reasons': {'death_cross': 33, 'williams_overbought': 11, 'stop_loss': 10}, 'shortest_5_avg': 1.0, 'longest_5_avg': 8.6, 'median_return': -1189.286, 'mad': 8501.256, 'mean_return': -4620.487555555556, 'std_return': 19468.02566327429, 'min_return': -67691.044, 'max_return': 29909.808}, {'param_id': 'Param_15', 'opt_method': 'Grid Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 35, 'ma_long': 40, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 49, 'final_capital': 717250.4840000003, 'win_rate': 0.5306122448979592, 'msr': 0.07195130104464986, 'sharpe': -0.25749895182436094, 'avg_duration': 2.8979591836734695, 'exit_reasons': {'death_cross': 16, 'williams_overbought': 22, 'stop_loss': 11}, 'shortest_5_avg': 1.0, 'longest_5_avg': 7.0, 'median_return': 705.2719999999999, 'mad': 9802.072, 'mean_return': -5679.020816326531, 'std_return': 22054.540194271685, 'min_return': -67691.044, 'max_return': 30708.684}, {'param_id': 'Param_16', 'opt_method': 'Grid Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 60, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.003}, 'trade_count': 55, 'final_capital': 897992.312, 'win_rate': 0.4909090909090909, 'msr': -0.07703855001601238, 'sharpe': -0.119858976879303, 'avg_duration': 1.9272727272727272, 'exit_reasons': {'price_below_long_ma': 32, 'williams_overbought': 16, 'stop_loss': 7}, 'shortest_5_avg': 1.0, 'longest_5_avg': 6.8, 'median_return': -693.1320000000001, 'mad': 8997.212, 'mean_return': -1763.689527272727, 'std_return': 14714.706731690316, 'min_return': -67691.044, 'max_return': 29909.808}, {'param_id': 'Param_17', 'opt_method': 'Grid Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 60, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 55, 'final_capital': 885192.5680000001, 'win_rate': 0.4909090909090909, 'msr': -0.07703855001601238, 'sharpe': -0.1330698720312617, 'avg_duration': 1.981818181818182, 'exit_reasons': {'price_below_long_ma': 34, 'williams_overbought': 16, 'stop_loss': 5}, 'shortest_5_avg': 1.0, 'longest_5_avg': 7.0, 'median_return': -693.1320000000001, 'mad': 8997.212, 'mean_return': -1996.4121454545452, 'std_return': 15002.737145882284, 'min_return': -67691.044, 'max_return': 29909.808}, {'param_id': 'Param_18', 'opt_method': 'Grid Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 40, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 20, 'will_sell_threshold_2': -40, 'stop_loss': 0.002}, 'trade_count': 86, 'final_capital': 949539.7640000001, 'win_rate': 0.5, 'msr': -0.06707907618519499, 'sharpe': -0.035845684393098376, 'avg_duration': 1.1627906976744187, 'exit_reasons': {'price_below_long_ma': 25, 'williams_overbought': 41, 'stop_loss': 20}, 'shortest_5_avg': 1.0, 'longest_5_avg': 3.6, 'median_return': -388.786, 'mad': 5795.938, 'mean_return': -496.85776744186035, 'std_return': 13861.025183946287, 'min_return': -46081.752, 'max_return': 41518.04}, {'param_id': 'Param_19', 'opt_method': 'Grid Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 40, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 20, 'will_sell_threshold_2': -40, 'stop_loss': 0.003}, 'trade_count': 85, 'final_capital': 935131.968, 'win_rate': 0.5058823529411764, 'msr': 0.02126081223804765, 'sharpe': -0.04982820108179725, 'avg_duration': 1.188235294117647, 'exit_reasons': {'price_below_long_ma': 32, 'williams_overbought': 42, 'stop_loss': 11}, 'shortest_5_avg': 1.0, 'longest_5_avg': 3.6, 'median_return': 114.636, 'mad': 5391.884, 'mean_return': -673.3355294117646, 'std_return': 13513.144794713604, 'min_return': -46081.752, 'max_return': 41518.04}, {'param_id': 'Param_20', 'opt_method': 'Grid Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 40, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 20, 'will_sell_threshold_2': -40, 'stop_loss': 0.004}, 'trade_count': 84, 'final_capital': 945523.644, 'win_rate': 0.5119047619047619, 'msr': 0.03974144944121897, 'sharpe': -0.04113550219609992, 'avg_duration': 1.2380952380952381, 'exit_reasons': {'price_below_long_ma': 35, 'williams_overbought': 43, 'stop_loss': 6}, 'shortest_5_avg': 1.0, 'longest_5_avg': 4.4, 'median_return': 210.582, 'mad': 5298.796, 'mean_return': -558.7831428571427, 'std_return': 13583.967125525649, 'min_return': -46081.752, 'max_return': 41518.04}, {'param_id': 'Param_21', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_1', 'params': {'ma_short': 34, 'ma_long': 35, 'will_period_1': 26, 'will_buy_threshold_1': -62, 'will_period_2': 26, 'will_sell_threshold_2': -48, 'stop_loss': 0.0034639878836228103}, 'trade_count': 35, 'final_capital': 900204.3399999996, 'win_rate': 0.5428571428571428, 'msr': 0.06844353842645857, 'sharpe': -0.10400142608683816, 'avg_duration': 2.7714285714285714, 'exit_reasons': {'death_cross': 24, 'williams_overbought': 7, 'stop_loss': 4}, 'shortest_5_avg': 1.0, 'longest_5_avg': 7.0, 'median_return': 507.08, 'mad': 7408.732, 'mean_return': -2759.911314285715, 'std_return': 26537.246505138653, 'min_return': -110890.516, 'max_return': 36109.808}, {'param_id': 'Param_22', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_1', 'params': {'ma_short': 24, 'ma_long': 26, 'will_period_1': 41, 'will_buy_threshold_1': -60, 'will_period_2': 48, 'will_sell_threshold_2': -35, 'stop_loss': 0.003666984526468434}, 'trade_count': 24, 'final_capital': 1102861.9520000003, 'win_rate': 0.5833333333333334, 'msr': 0.19385034283607364, 'sharpe': 0.14355707139404486, 'avg_duration': 4.333333333333333, 'exit_reasons': {'death_cross': 14, 'stop_loss': 7, 'williams_overbought': 3}, 'shortest_5_avg': 1.0, 'longest_5_avg': 11.0, 'median_return': 2209.556, 'mad': 11398.256, 'mean_return': 4376.246, 'std_return': 30484.362705624768, 'min_return': -28290.532, 'max_return': 122913.676}, {'param_id': 'Param_23', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_1', 'params': {'ma_short': 29, 'ma_long': 30, 'will_period_1': 37, 'will_buy_threshold_1': -52, 'will_period_2': 30, 'will_sell_threshold_2': -25, 'stop_loss': 0.0036022205550973923}, 'trade_count': 47, 'final_capital': 1095294.6919999998, 'win_rate': 0.574468085106383, 'msr': 0.048582894058235626, 'sharpe': 0.08612438830405632, 'avg_duration': 2.9361702127659575, 'exit_reasons': {'death_cross': 34, 'williams_overbought': 6, 'stop_loss': 7}, 'shortest_5_avg': 1.0, 'longest_5_avg': 9.8, 'median_return': 311.11199999999997, 'mad': 6403.732, 'mean_return': 2118.006553191489, 'std_return': 24592.41137420151, 'min_return': -65292.232, 'max_return': 85710.704}, {'param_id': 'Param_24', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_1', 'params': {'ma_short': 17, 'ma_long': 23, 'will_period_1': 50, 'will_buy_threshold_1': -55, 'will_period_2': 31, 'will_sell_threshold_2': -35, 'stop_loss': 0.0037928241502823822}, 'trade_count': 26, 'final_capital': 1220864.304, 'win_rate': 0.5384615384615384, 'msr': 0.33892305234115205, 'sharpe': 0.31544355185400025, 'avg_duration': 3.269230769230769, 'exit_reasons': {'death_cross': 10, 'williams_overbought': 12, 'stop_loss': 4}, 'shortest_5_avg': 1.0, 'longest_5_avg': 6.6, 'median_return': 4508.156, 'mad': 13301.414, 'mean_return': 8585.765230769231, 'std_return': 27218.07123220701, 'min_return': -23090.812, 'max_return': 114713.676}, {'param_id': 'Param_25', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_1', 'params': {'ma_short': 23, 'ma_long': 24, 'will_period_1': 39, 'will_buy_threshold_1': -51, 'will_period_2': 37, 'will_sell_threshold_2': -30, 'stop_loss': 0.0026008786510223407}, 'trade_count': 43, 'final_capital': 1055034.616, 'win_rate': 0.5813953488372093, 'msr': 0.11624446332736418, 'sharpe': 0.10174463415853474, 'avg_duration': 2.813953488372093, 'exit_reasons': {'death_cross': 29, 'stop_loss': 7, 'williams_overbought': 7}, 'shortest_5_avg': 1.0, 'longest_5_avg': 7.4, 'median_return': 906.72, 'mad': 7800.112, 'mean_return': 1370.1553488372087, 'std_return': 13466.608765191653, 'min_return': -26285.24, 'max_return': 37510.888}, {'param_id': 'Param_26', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_2', 'params': {'ma_short': 23, 'ma_long': 25, 'will_period_1': 42, 'will_buy_threshold_1': -53, 'will_period_2': 44, 'will_sell_threshold_2': -24, 'stop_loss': 0.0024984918912897922}, 'trade_count': 25, 'final_capital': 1150877.0759999997, 'win_rate': 0.48, 'msr': -0.09212215944773981, 'sharpe': 0.16568937917174476, 'avg_duration': 3.08, 'exit_reasons': {'price_below_long_ma': 17, 'williams_overbought': 3, 'stop_loss': 5}, 'shortest_5_avg': 1.0, 'longest_5_avg': 10.2, 'median_return': -295.328, 'mad': 3205.832, 'mean_return': 6125.47936, 'std_return': 36969.6550494283, 'min_return': -22091.036, 'max_return': 170516.1}, {'param_id': 'Param_27', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_2', 'params': {'ma_short': 17, 'ma_long': 22, 'will_period_1': 44, 'will_buy_threshold_1': -52, 'will_period_2': 60, 'will_sell_threshold_2': -26, 'stop_loss': 0.0028255511820897985}, 'trade_count': 26, 'final_capital': 1090882.208, 'win_rate': 0.34615384615384615, 'msr': -0.493694221555867, 'sharpe': 0.11544745943219935, 'avg_duration': 5.269230769230769, 'exit_reasons': {'price_below_long_ma': 14, 'stop_loss': 8, 'williams_overbought': 4}, 'shortest_5_avg': 1.0, 'longest_5_avg': 16.2, 'median_return': -4688.994000000001, 'mad': 9497.77, 'mean_return': 3586.159538461538, 'std_return': 31063.129404774572, 'min_return': -20891.036, 'max_return': 124309.244}, {'param_id': 'Param_28', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_2', 'params': {'ma_short': 23, 'ma_long': 25, 'will_period_1': 38, 'will_buy_threshold_1': -51, 'will_period_2': 43, 'will_sell_threshold_2': -23, 'stop_loss': 0.003383692550273637}, 'trade_count': 26, 'final_capital': 1071091.1079999995, 'win_rate': 0.4230769230769231, 'msr': -0.2732998811556401, 'sharpe': 0.08642416412855893, 'avg_duration': 3.1153846153846154, 'exit_reasons': {'price_below_long_ma': 20, 'williams_overbought': 2, 'stop_loss': 4}, 'shortest_5_avg': 1.0, 'longest_5_avg': 11.2, 'median_return': -1092.638, 'mad': 3997.946, 'mean_return': 2824.7998461538473, 'std_return': 32685.299394798814, 'min_return': -25290.616, 'max_return': 155316.404}, {'param_id': 'Param_29', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_2', 'params': {'ma_short': 20, 'ma_long': 22, 'will_period_1': 47, 'will_buy_threshold_1': -57, 'will_period_2': 51, 'will_sell_threshold_2': -25, 'stop_loss': 0.0023715465916692388}, 'trade_count': 33, 'final_capital': 1262180.147999999, 'win_rate': 0.45454545454545453, 'msr': -0.20254419567007514, 'sharpe': 0.1735058950658888, 'avg_duration': 4.0606060606060606, 'exit_reasons': {'price_below_long_ma': 22, 'williams_overbought': 4, 'stop_loss': 7}, 'shortest_5_avg': 1.0, 'longest_5_avg': 16.2, 'median_return': -1295.432, 'mad': 6395.8, 'mean_return': 8035.981575757575, 'std_return': 46315.32205888018, 'min_return': -17090.34, 'max_return': 247714.952}, {'param_id': 'Param_30', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_2', 'params': {'ma_short': 22, 'ma_long': 27, 'will_period_1': 42, 'will_buy_threshold_1': -52, 'will_period_2': 49, 'will_sell_threshold_2': -23, 'stop_loss': 0.003217537919217248}, 'trade_count': 16, 'final_capital': 953492.7440000001, 'win_rate': 0.1875, 'msr': -0.45458058579892885, 'sharpe': -0.13579731560232436, 'avg_duration': 4.25, 'exit_reasons': {'price_below_long_ma': 9, 'stop_loss': 5, 'williams_overbought': 2}, 'shortest_5_avg': 1.0, 'longest_5_avg': 10.2, 'median_return': -4091.036, 'mad': 8999.583999999999, 'mean_return': -2815.8244999999997, 'std_return': 20735.495795164818, 'min_return': -24084.992, 'max_return': 61309.688}, {'param_id': 'Param_31', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_3', 'params': {'ma_short': 35, 'ma_long': 37, 'will_period_1': 24, 'will_buy_threshold_1': -53, 'will_period_2': 27, 'will_sell_threshold_2': -45, 'stop_loss': 0.0038355950678861392}, 'trade_count': 65, 'final_capital': 715121.7800000003, 'win_rate': 0.5076923076923077, 'msr': 0.011598202922717503, 'sharpe': -0.22583558565937553, 'avg_duration': 3.4153846153846152, 'exit_reasons': {'death_cross': 17, 'stop_loss': 15, 'williams_overbought': 33}, 'shortest_5_avg': 1.0, 'longest_5_avg': 9.8, 'median_return': 106.72399999999999, 'mad': 9201.756, 'mean_return': -4291.328923076923, 'std_return': 19002.005716743588, 'min_return': -65292.232, 'max_return': 25908.78}, {'param_id': 'Param_32', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_3', 'params': {'ma_short': 34, 'ma_long': 40, 'will_period_1': 24, 'will_buy_threshold_1': -55, 'will_period_2': 22, 'will_sell_threshold_2': -48, 'stop_loss': 0.0032775014498060886}, 'trade_count': 45, 'final_capital': 683166.6440000006, 'win_rate': 0.4222222222222222, 'msr': -0.14945283415102747, 'sharpe': -0.32006249127525055, 'avg_duration': 3.7555555555555555, 'exit_reasons': {'death_cross': 11, 'stop_loss': 18, 'williams_overbought': 16}, 'shortest_5_avg': 1.0, 'longest_5_avg': 9.8, 'median_return': -2093.244, 'mad': 14006.052000000001, 'mean_return': -6949.190933333335, 'std_return': 21711.982157958544, 'min_return': -65292.232, 'max_return': 29909.808}, {'param_id': 'Param_33', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_3', 'params': {'ma_short': 34, 'ma_long': 35, 'will_period_1': 26, 'will_buy_threshold_1': -62, 'will_period_2': 26, 'will_sell_threshold_2': -48, 'stop_loss': 0.0034639878836228103}, 'trade_count': 21, 'final_capital': 783723.2080000004, 'win_rate': 0.38095238095238093, 'msr': -0.24588876839913715, 'sharpe': -0.4077590178897287, 'avg_duration': 3.9523809523809526, 'exit_reasons': {'death_cross': 7, 'stop_loss': 8, 'williams_overbought': 6}, 'shortest_5_avg': 1.0, 'longest_5_avg': 7.8, 'median_return': -3491.94, 'mad': 14201.300000000001, 'mean_return': -10206.489142857146, 'std_return': 25030.6893575165, 'min_return': -65292.232, 'max_return': 21904.044}, {'param_id': 'Param_34', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_3', 'params': {'ma_short': 29, 'ma_long': 57, 'will_period_1': 30, 'will_buy_threshold_1': -51, 'will_period_2': 45, 'will_sell_threshold_2': -21, 'stop_loss': 0.0031853608212271483}, 'trade_count': 56, 'final_capital': 857284.3720000001, 'win_rate': 0.5357142857142857, 'msr': 0.08932846732869944, 'sharpe': -0.13637841358657068, 'avg_duration': 2.5357142857142856, 'exit_reasons': {'death_cross': 37, 'stop_loss': 11, 'williams_overbought': 8}, 'shortest_5_avg': 1.0, 'longest_5_avg': 13.4, 'median_return': 812.8040000000001, 'mad': 9099.046, 'mean_return': -2458.1515714285706, 'std_return': 18024.492831740154, 'min_return': -67691.044, 'max_return': 42318.664}, {'param_id': 'Param_35', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_3', 'params': {'ma_short': 22, 'ma_long': 59, 'will_period_1': 26, 'will_buy_threshold_1': -53, 'will_period_2': 36, 'will_sell_threshold_2': -32, 'stop_loss': 0.0032766471523696552}, 'trade_count': 70, 'final_capital': 1004222.116, 'win_rate': 0.5285714285714286, 'msr': 0.14172653970371554, 'sharpe': 0.009076941986449427, 'avg_duration': 1.7857142857142858, 'exit_reasons': {'death_cross': 49, 'stop_loss': 9, 'williams_overbought': 12}, 'shortest_5_avg': 1.0, 'longest_5_avg': 8.2, 'median_return': 1006.262, 'mad': 7100.023999999999, 'mean_return': 151.58411428571458, 'std_return': 16699.89164250923, 'min_return': -67691.044, 'max_return': 59311.852}, {'param_id': 'Param_36', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_4', 'params': {'ma_short': 16, 'ma_long': 29, 'will_period_1': 58, 'will_buy_threshold_1': -59, 'will_period_2': 30, 'will_sell_threshold_2': -33, 'stop_loss': 0.0034789563525255635}, 'trade_count': 136, 'final_capital': 894414.2760000001, 'win_rate': 0.4852941176470588, 'msr': -0.08168025571332527, 'sharpe': -0.03595371491786686, 'avg_duration': 1.5220588235294117, 'exit_reasons': {'price_below_long_ma': 75, 'williams_overbought': 50, 'stop_loss': 10, 'end_of_data': 1}, 'shortest_5_avg': 0.8, 'longest_5_avg': 7.4, 'median_return': -490.256, 'mad': 6002.137999999999, 'mean_return': -685.9709705882352, 'std_return': 19079.283985589347, 'min_return': -97488.968, 'max_return': 73518.04}, {'param_id': 'Param_37', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_4', 'params': {'ma_short': 33, 'ma_long': 56, 'will_period_1': 20, 'will_buy_threshold_1': -70, 'will_period_2': 33, 'will_sell_threshold_2': -22, 'stop_loss': 0.003708610533670233}, 'trade_count': 20, 'final_capital': 1033394.02, 'win_rate': 0.45, 'msr': -0.27475550698271356, 'sharpe': 0.07213470722745725, 'avg_duration': 6.15, 'exit_reasons': {'williams_overbought': 11, 'price_below_long_ma': 4, 'stop_loss': 5}, 'shortest_5_avg': 1.0, 'longest_5_avg': 16.4, 'median_return': -3488.9700000000003, 'mad': 12698.454, 'mean_return': 1759.8319999999999, 'std_return': 24396.464628104477, 'min_return': -28688.22, 'max_return': 68711.852}, {'param_id': 'Param_38', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_4', 'params': {'ma_short': 15, 'ma_long': 29, 'will_period_1': 54, 'will_buy_threshold_1': -62, 'will_period_2': 22, 'will_sell_threshold_2': -21, 'stop_loss': 0.0032673173861978277}, 'trade_count': 124, 'final_capital': 1271508.1279999993, 'win_rate': 0.5403225806451613, 'msr': 0.1740385458758251, 'sharpe': 0.14945667520905395, 'avg_duration': 1.4435483870967742, 'exit_reasons': {'price_below_long_ma': 81, 'williams_overbought': 35, 'stop_loss': 7, 'end_of_data': 1}, 'shortest_5_avg': 0.8, 'longest_5_avg': 6.6, 'median_return': 1009.312, 'mad': 5799.358, 'mean_return': 2280.251, 'std_return': 15256.935363668506, 'min_return': -31681.12, 'max_return': 73518.04}, {'param_id': 'Param_39', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_4', 'params': {'ma_short': 19, 'ma_long': 25, 'will_period_1': 60, 'will_buy_threshold_1': -58, 'will_period_2': 33, 'will_sell_threshold_2': -41, 'stop_loss': 0.0035472835704916388}, 'trade_count': 113, 'final_capital': 1129199.7599999993, 'win_rate': 0.5221238938053098, 'msr': 0.08079308121198893, 'sharpe': 0.05983302244307219, 'avg_duration': 1.7345132743362832, 'exit_reasons': {'stop_loss': 13, 'price_below_long_ma': 42, 'williams_overbought': 58}, 'shortest_5_avg': 1.0, 'longest_5_avg': 9.8, 'median_return': 710.808, 'mad': 8797.880000000001, 'mean_return': 1233.614017699115, 'std_return': 20617.608816371656, 'min_return': -81679.488, 'max_return': 104517.816}, {'param_id': 'Param_40', 'opt_method': 'Bayesian Optimization', 'strategy': 'Strategy_4', 'params': {'ma_short': 17, 'ma_long': 34, 'will_period_1': 59, 'will_buy_threshold_1': -75, 'will_period_2': 53, 'will_sell_threshold_2': -20, 'stop_loss': 0.0034805756690683993}, 'trade_count': 54, 'final_capital': 1052582.9760000003, 'win_rate': 0.48148148148148145, 'msr': -0.06712104533812113, 'sharpe': 0.04366270294403862, 'avg_duration': 2.0, 'exit_reasons': {'price_below_long_ma': 50, 'stop_loss': 3, 'williams_overbought': 1}, 'shortest_5_avg': 1.0, 'longest_5_avg': 11.8, 'median_return': -389.39599999999996, 'mad': 5801.402, 'mean_return': 1064.6456296296296, 'std_return': 24383.40714562477, 'min_return': -125687.888, 'max_return': 76907.168}, {'param_id': 'Param_41', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -40, 'stop_loss': 0.004}, 'trade_count': 33, 'final_capital': 1178216.8519999995, 'win_rate': 0.45454545454545453, 'msr': -0.3256815491196416, 'sharpe': 0.2022384243668734, 'avg_duration': 4.696969696969697, 'exit_reasons': {'death_cross': 17, 'stop_loss': 7, 'williams_overbought': 9}, 'shortest_5_avg': 1.0, 'longest_5_avg': 14.6, 'median_return': -4689.508, 'mad': 14399.06, 'mean_return': 5491.108606060606, 'std_return': 27151.657537801613, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_42', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -60, 'will_period_2': 60, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 28, 'final_capital': 1125335.1119999993, 'win_rate': 0.4642857142857143, 'msr': -0.3302360054406824, 'sharpe': 0.17172608645223766, 'avg_duration': 4.071428571428571, 'exit_reasons': {'death_cross': 13, 'williams_overbought': 9, 'stop_loss': 6}, 'shortest_5_avg': 1.0, 'longest_5_avg': 13.6, 'median_return': -4689.896, 'mad': 14201.65, 'mean_return': 4566.651857142858, 'std_return': 26592.649869455436, 'min_return': -25492.584, 'max_return': 97516.92}, {'param_id': 'Param_43', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 60, 'will_buy_threshold_1': -50, 'will_period_2': 20, 'will_sell_threshold_2': -20, 'stop_loss': 0.002}, 'trade_count': 41, 'final_capital': 1144556.8799999997, 'win_rate': 0.5365853658536586, 'msr': 0.3375929677734388, 'sharpe': 0.21155652441896577, 'avg_duration': 2.073170731707317, 'exit_reasons': {'stop_loss': 10, 'death_cross': 11, 'williams_overbought': 20}, 'shortest_5_avg': 1.0, 'longest_5_avg': 5.2, 'median_return': 3309.316, 'mad': 9802.68, 'mean_return': 3616.5102439024386, 'std_return': 17094.76976504704, 'min_return': -25492.584, 'max_return': 47707.032}, {'param_id': 'Param_44', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -40, 'stop_loss': 0.003}, 'trade_count': 36, 'final_capital': 1210875.6679999996, 'win_rate': 0.5, 'msr': 0.14751670154771016, 'sharpe': 0.24043968590670062, 'avg_duration': 2.9722222222222223, 'exit_reasons': {'death_cross': 13, 'stop_loss': 7, 'williams_overbought': 16}, 'shortest_5_avg': 1.0, 'longest_5_avg': 7.6, 'median_return': 1607.636, 'mad': 10897.992000000002, 'mean_return': 5948.212777777778, 'std_return': 24738.896944904656, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_45', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_1', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 20, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -30, 'stop_loss': 0.003}, 'trade_count': 15, 'final_capital': 1132317.4440000004, 'win_rate': 0.5333333333333333, 'msr': 0.07026052487137266, 'sharpe': 0.27319071042800464, 'avg_duration': 3.066666666666667, 'exit_reasons': {'death_cross': 9, 'stop_loss': 4, 'williams_overbought': 2}, 'shortest_5_avg': 1.2, 'longest_5_avg': 5.8, 'median_return': 913.12, 'mad': 12996.199999999999, 'mean_return': 8910.491466666666, 'std_return': 32616.377350606246, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_46', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 20, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -30, 'stop_loss': 0.002}, 'trade_count': 15, 'final_capital': 1116117.768, 'win_rate': 0.5333333333333333, 'msr': 0.08003841281194522, 'sharpe': 0.24971889744953596, 'avg_duration': 1.5333333333333334, 'exit_reasons': {'stop_loss': 6, 'price_below_long_ma': 7, 'williams_overbought': 2}, 'shortest_5_avg': 1.0, 'longest_5_avg': 2.6, 'median_return': 913.12, 'mad': 11408.52, 'mean_return': 7830.513066666666, 'std_return': 31357.310079355993, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_47', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 20, 'will_buy_threshold_1': -50, 'will_period_2': 60, 'will_sell_threshold_2': -30, 'stop_loss': 0.004}, 'trade_count': 15, 'final_capital': 1115717.7759999998, 'win_rate': 0.5333333333333333, 'msr': 0.08003841281194522, 'sharpe': 0.24872326401002054, 'avg_duration': 2.3333333333333335, 'exit_reasons': {'price_below_long_ma': 11, 'stop_loss': 2, 'williams_overbought': 2}, 'shortest_5_avg': 1.0, 'longest_5_avg': 5.0, 'median_return': 913.12, 'mad': 11408.52, 'mean_return': 7803.846933333333, 'std_return': 31375.620602792773, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_48', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 50, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 32, 'final_capital': 1131388.7359999996, 'win_rate': 0.40625, 'msr': -0.1944613362781047, 'sharpe': 0.16964265440829648, 'avg_duration': 3.09375, 'exit_reasons': {'price_below_long_ma': 22, 'williams_overbought': 7, 'stop_loss': 3}, 'shortest_5_avg': 1.0, 'longest_5_avg': 12.2, 'median_return': -1692.286, 'mad': 8702.43, 'mean_return': 4196.6561249999995, 'std_return': 24738.21205504606, 'min_return': -25492.584, 'max_return': 102114.78}, {'param_id': 'Param_49', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 50, 'will_buy_threshold_1': -50, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 36, 'final_capital': 1158040.8440000003, 'win_rate': 0.6111111111111112, 'msr': 0.3090573836840017, 'sharpe': 0.2889140852227095, 'avg_duration': 1.7777777777777777, 'exit_reasons': {'price_below_long_ma': 15, 'williams_overbought': 19, 'stop_loss': 2}, 'shortest_5_avg': 1.0, 'longest_5_avg': 5.4, 'median_return': 2411.782, 'mad': 7803.67, 'mean_return': 4481.077111111112, 'std_return': 15510.06743402699, 'min_return': -25492.584, 'max_return': 43307.12}, {'param_id': 'Param_50', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_2', 'params': {'ma_short': 15, 'ma_long': 20, 'will_period_1': 40, 'will_buy_threshold_1': -60, 'will_period_2': 30, 'will_sell_threshold_2': -50, 'stop_loss': 0.004}, 'trade_count': 27, 'final_capital': 1116306.2399999998, 'win_rate': 0.5925925925925926, 'msr': 0.1996247374611413, 'sharpe': 0.2775155000694983, 'avg_duration': 2.037037037037037, 'exit_reasons': {'price_below_long_ma': 13, 'williams_overbought': 12, 'stop_loss': 2}, 'shortest_5_avg': 1.0, 'longest_5_avg': 5.4, 'median_return': 1914.72, 'mad': 9591.596000000001, 'mean_return': 4398.218814814815, 'std_return': 15848.551331535358, 'min_return': -25492.584, 'max_return': 41518.04}, {'param_id': 'Param_51', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 30, 'ma_long': 40, 'will_period_1': 50, 'will_buy_threshold_1': -60, 'will_period_2': 20, 'will_sell_threshold_2': -20, 'stop_loss': 0.003}, 'trade_count': 66, 'final_capital': 864921.6800000004, 'win_rate': 0.45454545454545453, 'msr': -0.22061885264020795, 'sharpe': -0.1170274773389586, 'avg_duration': 1.2121212121212122, 'exit_reasons': {'death_cross': 53, 'stop_loss': 10, 'williams_overbought': 3}, 'shortest_5_avg': 1.0, 'longest_5_avg': 3.6, 'median_return': -1190.986, 'mad': 5398.388, 'mean_return': -1956.6352727272729, 'std_return': 16719.453276145883, 'min_return': -65292.232, 'max_return': 41518.04}, {'param_id': 'Param_52', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 30, 'ma_long': 40, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 30, 'will_sell_threshold_2': -20, 'stop_loss': 0.003}, 'trade_count': 83, 'final_capital': 874653.192, 'win_rate': 0.4819277108433735, 'msr': -0.05392377060795981, 'sharpe': -0.08865739246555186, 'avg_duration': 1.2771084337349397, 'exit_reasons': {'death_cross': 65, 'stop_loss': 13, 'williams_overbought': 5}, 'shortest_5_avg': 1.0, 'longest_5_avg': 4.6, 'median_return': -291.224, 'mad': 5400.664, 'mean_return': -1420.1481927710843, 'std_return': 16018.386283913713, 'min_return': -65292.232, 'max_return': 41518.04}, {'param_id': 'Param_53', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 35, 'ma_long': 40, 'will_period_1': 50, 'will_buy_threshold_1': -60, 'will_period_2': 30, 'will_sell_threshold_2': -20, 'stop_loss': 0.004}, 'trade_count': 45, 'final_capital': 946091.18, 'win_rate': 0.4222222222222222, 'msr': -0.287898603997336, 'sharpe': -0.05600071562060354, 'avg_duration': 1.4, 'exit_reasons': {'death_cross': 36, 'stop_loss': 6, 'williams_overbought': 3}, 'shortest_5_avg': 1.0, 'longest_5_avg': 4.0, 'median_return': -1093.38, 'mad': 3797.7960000000003, 'mean_return': -1107.8656000000003, 'std_return': 19783.064455323958, 'min_return': -65292.232, 'max_return': 62507.716}, {'param_id': 'Param_54', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 15, 'ma_long': 50, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 30, 'will_sell_threshold_2': -20, 'stop_loss': 0.002}, 'trade_count': 161, 'final_capital': 1095297.6960000002, 'win_rate': 0.5031055900621118, 'msr': 0.02009750061370844, 'sharpe': 0.046205909089746984, 'avg_duration': 1.0062111801242235, 'exit_reasons': {'death_cross': 138, 'stop_loss': 20, 'williams_overbought': 2, 'end_of_data': 1}, 'shortest_5_avg': 0.8, 'longest_5_avg': 1.4, 'median_return': 108.50399999999999, 'mad': 5398.872, 'mean_return': 682.2832546583846, 'std_return': 14766.143582772089, 'min_return': -81679.488, 'max_return': 60910.28}, {'param_id': 'Param_55', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_3', 'params': {'ma_short': 15, 'ma_long': 50, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 20, 'will_sell_threshold_2': -20, 'stop_loss': 0.002}, 'trade_count': 161, 'final_capital': 1095297.6960000002, 'win_rate': 0.5031055900621118, 'msr': 0.02009750061370844, 'sharpe': 0.046205909089746984, 'avg_duration': 1.0062111801242235, 'exit_reasons': {'death_cross': 138, 'stop_loss': 20, 'williams_overbought': 2, 'end_of_data': 1}, 'shortest_5_avg': 0.8, 'longest_5_avg': 1.4, 'median_return': 108.50399999999999, 'mad': 5398.872, 'mean_return': 682.2832546583846, 'std_return': 14766.143582772089, 'min_return': -81679.488, 'max_return': 60910.28}, {'param_id': 'Param_56', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 60, 'will_period_1': 50, 'will_buy_threshold_1': -60, 'will_period_2': 50, 'will_sell_threshold_2': -20, 'stop_loss': 0.004}, 'trade_count': 67, 'final_capital': 952348.7120000002, 'win_rate': 0.43283582089552236, 'msr': -0.18865798255954666, 'sharpe': -0.03730059904775016, 'avg_duration': 1.462686567164179, 'exit_reasons': {'price_below_long_ma': 60, 'stop_loss': 4, 'williams_overbought': 3}, 'shortest_5_avg': 1.0, 'longest_5_avg': 6.6, 'median_return': -1093.38, 'mad': 5795.568, 'mean_return': -621.2729552238808, 'std_return': 16655.848371100637, 'min_return': -59887.732, 'max_return': 44308.448}, {'param_id': 'Param_57', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 40, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 30, 'will_sell_threshold_2': -20, 'stop_loss': 0.003}, 'trade_count': 67, 'final_capital': 983377.252, 'win_rate': 0.4626865671641791, 'msr': -0.15402855417426511, 'sharpe': -0.008594824580617258, 'avg_duration': 2.08955223880597, 'exit_reasons': {'price_below_long_ma': 33, 'williams_overbought': 22, 'stop_loss': 12}, 'shortest_5_avg': 1.0, 'longest_5_avg': 7.2, 'median_return': -1292.284, 'mad': 8389.9, 'mean_return': -158.37802985074643, 'std_return': 18427.158696709408, 'min_return': -46081.752, 'max_return': 67117.388}, {'param_id': 'Param_58', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 60, 'will_period_1': 60, 'will_buy_threshold_1': -60, 'will_period_2': 60, 'will_sell_threshold_2': -30, 'stop_loss': 0.002}, 'trade_count': 85, 'final_capital': 857512.4079999998, 'win_rate': 0.4588235294117647, 'msr': -0.12394672182768571, 'sharpe': -0.07342899693376602, 'avg_duration': 1.588235294117647, 'exit_reasons': {'price_below_long_ma': 61, 'stop_loss': 20, 'williams_overbought': 4}, 'shortest_5_avg': 1.0, 'longest_5_avg': 9.6, 'median_return': -892.208, 'mad': 7198.320000000001, 'mean_return': -1586.3826352941173, 'std_return': 21604.3098531187, 'min_return': -121282.936, 'max_return': 61305.4}, {'param_id': 'Param_59', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 40, 'will_period_1': 50, 'will_buy_threshold_1': -60, 'will_period_2': 40, 'will_sell_threshold_2': -40, 'stop_loss': 0.002}, 'trade_count': 54, 'final_capital': 906918.3720000001, 'win_rate': 0.42592592592592593, 'msr': -0.409355737009362, 'sharpe': -0.10674974181860172, 'avg_duration': 2.0185185185185186, 'exit_reasons': {'price_below_long_ma': 25, 'williams_overbought': 16, 'stop_loss': 13}, 'shortest_5_avg': 1.0, 'longest_5_avg': 7.6, 'median_return': -2988.318, 'mad': 7300.052, 'mean_return': -1634.0737037037038, 'std_return': 15307.52058536243, 'min_return': -46081.752, 'max_return': 43518.0}, {'param_id': 'Param_60', 'opt_method': 'Monte Carlo Search', 'strategy': 'Strategy_4', 'params': {'ma_short': 30, 'ma_long': 50, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 20, 'will_sell_threshold_2': -50, 'stop_loss': 0.002}, 'trade_count': 56, 'final_capital': 985412.1840000002, 'win_rate': 0.44642857142857145, 'msr': -0.15497123529647922, 'sharpe': -0.012701697169774073, 'avg_duration': 1.4107142857142858, 'exit_reasons': {'price_below_long_ma': 23, 'stop_loss': 16, 'williams_overbought': 17}, 'shortest_5_avg': 1.0, 'longest_5_avg': 4.6, 'median_return': -1286.726, 'mad': 8303.0, 'mean_return': -169.533285714286, 'std_return': 13347.307065735073, 'min_return': -25088.34, 'max_return': 55711.852}]\n"]}],"source":["import json\n","\n","with open('/content/drive/MyDrive/Colab Notebooks/test_results.json', 'r', encoding='utf-8') as f:\n","    test_results = json.load(f)\n","\n","print(test_results)\n","# 排序（根據 param_id 中的數字排序）\n","sorted_results = sorted(\n","    test_results,\n","    key=lambda x: int(x['param_id'].split('_')[1])\n",")\n","print(sorted_results)"]},{"cell_type":"code","source":["def calculate_group_averages(param_list):\n","    # 定義要計算平均值的欄位\n","    metrics = ['trade_count', 'final_capital', 'win_rate', 'median_return', 'msr', 'avg_duration']\n","\n","    # 定義三個區間\n","    groups = {\n","        '1-20': param_list[0:20],   # Param_1 到 Param_20\n","        '21-40': param_list[20:40], # Param_21 到 Param_40\n","        '41-60': param_list[40:60]  # Param_41 到 Param_60\n","    }\n","\n","    # 儲存結果\n","    results = {}\n","\n","    # 對每個區間計算平均值\n","    for group_name, group_data in groups.items():\n","        # 初始化每個區間的結果字典\n","        group_results = {metric: 0 for metric in metrics}\n","\n","        # 檢查區間是否有數據\n","        if not group_data:\n","            print(f\"警告：區間 {group_name} 無數據\")\n","            continue\n","\n","        # 對每個欄位計算平均值\n","        for metric in metrics:\n","            # 提取該欄位的所有值\n","            values = [item[metric] for item in group_data]\n","            # 計算平均值\n","            avg_value = sum(values) / len(values)\n","            group_results[metric] = avg_value\n","\n","        # 儲存該區間的結果\n","        results[group_name] = group_results\n","\n","    return results\n","\n","\n","# 計算結果\n","results = calculate_group_averages(sorted_results)\n","\n","# 格式化輸出結果\n","for group_name, group_results in results.items():\n","    print(f\"\\n區間 {group_name}:\")\n","    for metric, value in group_results.items():\n","        print(f\"  {metric}: {value:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xED9mF0fD0ZB","executionInfo":{"status":"ok","timestamp":1746626675909,"user_tz":-480,"elapsed":6,"user":{"displayName":"林家宏","userId":"04041535431236020406"}},"outputId":"4694e79d-2ea1-46e7-c7f0-4dc10a7d2caa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","區間 1-20:\n","  trade_count: 50.9500\n","  final_capital: 1001947.7184\n","  win_rate: 0.4874\n","  median_return: -956.0463\n","  msr: -0.0641\n","  avg_duration: 2.7244\n","\n","區間 21-40:\n","  trade_count: 50.2500\n","  final_capital: 1016370.0234\n","  win_rate: 0.4783\n","  median_return: -466.4350\n","  msr: -0.0536\n","  avg_duration: 3.2097\n","\n","區間 41-60:\n","  trade_count: 56.1500\n","  final_capital: 1049535.1846\n","  win_rate: 0.4878\n","  median_return: -450.0187\n","  msr: -0.0590\n","  avg_duration: 2.1064\n"]}]},{"cell_type":"markdown","source":["# XGBoost資料處理"],"metadata":{"id":"W1uJ2GLU8A4C"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"5RFnk4eGzU8c"},"outputs":[],"source":["sim_func_map = {\n","    'Strategy_1': simulate_strategy_1,\n","    'Strategy_2': simulate_strategy_2,\n","    'Strategy_3': simulate_strategy_3,\n","    'Strategy_4': simulate_strategy_4\n","}\n","\n","param_returns_train = {}\n","param_returns_val = {}\n","param_returns_test = {}\n","\n","param_trade_train = {}\n","param_trade_val = {}\n","param_trade_test = {}\n","\n","param_capital_val = {}\n","param_capital_test = {}\n","\n","for result in sorted_results:\n","  param_id = result['param_id']\n","  strategy = result['strategy']\n","  params = result['params']\n","  sim_func = sim_func_map[strategy]\n","\n","  trade_train, returns_train,_ = sim_func(train_data.copy(), **params)\n","  trade_val, returns_val, capital_val = sim_func(val_data.copy(), **params)\n","  trade_test, returns_test, capital_test = sim_func(test_data.copy(), **params)\n","\n","  param_returns_train[param_id] = returns_train\n","  param_returns_val[param_id] = returns_val\n","  param_returns_test[param_id] = returns_test\n","\n","  param_trade_train[param_id] = trade_train\n","  param_trade_val[param_id] = trade_val\n","  param_trade_test[param_id] = trade_test\n","\n","  param_capital_val[param_id] = capital_val\n","  param_capital_test[param_id] = capital_test"]},{"cell_type":"code","source":["# 假設 merged_train_data 已包含 'Datetime' 欄位 (型態為 Timestamp)\n","# 並且 trades 為交易紀錄的列表，每筆紀錄為一個字典\n","\n","# 先新增欄位，預設為 0（或其他值）\n","merged_train_data = train_data.copy()\n","merged_val_data = val_data.copy()\n","merged_test_data = test_data.copy()\n","for result in sorted_results:\n","  param_id = result['param_id']\n","  trades_train = param_trade_train[param_id]\n","  trades_val = param_trade_val[param_id]\n","  trades_test = param_trade_test[param_id]\n","  merged_train_data[param_id] = 0\n","  merged_val_data[param_id] = 0\n","  merged_test_data[param_id] = 0\n","  for trade in trades_train:\n","    entry_time = trade['entry_time']\n","    exit_time = trade['exit_time']\n","\n","    # 取得 entry_time 與 exit_time 之間的資料索引\n","    condition = (merged_train_data['Datetime'] >= entry_time) & (merged_train_data['Datetime'] <= exit_time)\n","\n","    # 取得這段期間的資料筆數\n","    num_points = merged_train_data.loc[condition].shape[0]\n","\n","    # 若該區間內有資料，計算平均 profit\n","    if num_points > 0 and trade['profit'] > 0:\n","        avg_profit = trade['profit'] / num_points\n","        # 將這個平均 profit 賦值給該區間內的資料\n","        merged_train_data.loc[condition, param_id] = avg_profit\n","\n","  for trade in trades_val:\n","    entry_time = trade['entry_time']\n","    exit_time = trade['exit_time']\n","\n","    # 取得 entry_time 與 exit_time 之間的資料索引\n","    condition = (merged_val_data['Datetime'] >= entry_time) & (merged_val_data['Datetime'] <= exit_time)\n","\n","    # 取得這段期間的資料筆數\n","    num_points = merged_val_data.loc[condition].shape[0]\n","\n","    # 若該區間內有資料，計算平均 profit\n","    if num_points > 0 and trade['profit'] > 0:\n","        avg_profit = trade['profit'] / num_points\n","        # 將這個平均 profit 賦值給該區間內的資料\n","        merged_val_data.loc[condition, param_id] = avg_profit\n","\n","  for trade in trades_test:\n","    entry_time = trade['entry_time']\n","    exit_time = trade['exit_time']\n","\n","    # 取得 entry_time 與 exit_time 之間的資料索引\n","    condition = (merged_test_data['Datetime'] >= entry_time) & (merged_test_data['Datetime'] <= exit_time)\n","\n","    # 取得這段期間的資料筆數\n","    num_points = merged_test_data.loc[condition].shape[0]\n","\n","    # 若該區間內有資料，計算平均 profit\n","    if num_points > 0 and trade['profit'] > 0:\n","        avg_profit = trade['profit'] / num_points\n","        # 將這個平均 profit 賦值給該區間內的資料\n","        merged_test_data.loc[condition, param_id] = avg_profit\n","\n","merged_train_data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"6-iIeBED6Bku","executionInfo":{"status":"ok","timestamp":1746617289885,"user_tz":-480,"elapsed":28544,"user":{"displayName":"林家宏","userId":"04041535431236020406"}},"outputId":"01e2bdc4-87d2-4966-8921-af94578ddadb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '164.30599999999998' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '137.918' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2952.148' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '164.30599999999998' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '137.918' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2952.148' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2382.117' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '137.918' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2952.148' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '3509.482666666667' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '137.918' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2952.148' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '3509.482666666667' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '137.918' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2952.148' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '7664.176' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '166.358' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2952.148' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '7664.176' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '166.358' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2952.148' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '7664.176' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '166.358' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2952.148' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '7664.176' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '166.358' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '10420.6744' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '7664.176' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '166.358' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '10420.6744' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '264.28' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '4365.398' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '264.28' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '4365.398' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '264.28' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '4365.398' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '264.28' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '4365.398' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '545.7992' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '732.852' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1352.208' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '264.28' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '4365.398' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '264.28' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '4365.398' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '864.718' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1165.414' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '864.718' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1165.414' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '864.718' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1165.414' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1364.322' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1264.922' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '3301.4906666666666' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '464.694' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1165.414' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '576.216' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '465.59' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1301.512' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1242.8746666666666' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '465.394' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '5152.236' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '504.2' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '465.11199999999997' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '568.148' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '264.318' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '18.698857142857143' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '11627.695' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1364.322' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1264.782' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '752.308' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '264.318' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '18.698857142857143' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '9136.25905882353' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1364.322' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '865.506' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2652.256' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '7664.176' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '364.3' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '4379.263428571428' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '264.28' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1865.712' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1352.208' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '732.081' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1865.712' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1352.208' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '3364.162' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '373.04679999999996' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1352.208' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '264.28' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '5910.205333333334' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '664.172' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '5682.681' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '452.044' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1764.742' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1110.276' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '452.044' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2364.18' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '65.424' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2356.256' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '464.312' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1626.136' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '452.044' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '625.8815999999999' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '465.438' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '4260.808800000001' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1764.742' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '465.414' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '752.24' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2382.117' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '137.918' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2952.148' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '3509.482666666667' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '510.1666666666667' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2952.148' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2382.117' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '137.918' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2952.148' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '3509.482666666667' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1376.936' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2952.148' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2382.117' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '137.918' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '51057.39' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '7664.176' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '166.358' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '51057.39' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '7664.176' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '166.358' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '51057.39' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '7664.176' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '166.358' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '10420.6744' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '164.30599999999998' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1165.422' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '4626.011' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '7664.176' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '2109.9706666666666' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '4626.011' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '864.718' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1165.414' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '864.718' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1165.414' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1064.732' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1165.414' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1352.208' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1764.742' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '465.438' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '452.044' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1764.742' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '465.438' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '452.044' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '864.718' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1165.414' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '864.718' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '3243.56' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '864.718' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1165.414' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '864.718' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '3243.56' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:30: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '864.718' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_train_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:46: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '4365.398' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_val_data.loc[condition, param_id] = avg_profit\n","<ipython-input-20-92615af344a7>:62: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value '1252.196' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n","  merged_test_data.loc[condition, param_id] = avg_profit\n"]},{"output_type":"execute_result","data":{"text/plain":["            Date      Time   Open   High    Low  Close            Datetime  \\\n","0      2021/12/1  08:45:00  17350  17384  17342  17356 2021-12-01 08:45:00   \n","1      2021/12/1  09:00:00  17357  17419  17333  17419 2021-12-01 09:00:00   \n","2      2021/12/1  09:15:00  17419  17425  17365  17375 2021-12-01 09:15:00   \n","3      2021/12/1  09:30:00  17375  17441  17367  17441 2021-12-01 09:30:00   \n","4      2021/12/1  09:45:00  17441  17457  17431  17435 2021-12-01 09:45:00   \n","...          ...       ...    ...    ...    ...    ...                 ...   \n","9423  2023/11/13  10:15:00  16905  16910  16873  16876 2023-11-13 10:15:00   \n","9424  2023/11/13  10:30:00  16878  16904  16876  16893 2023-11-13 10:30:00   \n","9425  2023/11/13  10:45:00  16893  16899  16863  16872 2023-11-13 10:45:00   \n","9426  2023/11/13  11:00:00  16872  16873  16847  16864 2023-11-13 11:00:00   \n","9427  2023/11/13  11:15:00  16864  16872  16857  16863 2023-11-13 11:15:00   \n","\n","      Param_1  Param_2  Param_3  ...  Param_51  Param_52  Param_53  Param_54  \\\n","0         0.0      0.0      0.0  ...       0.0       0.0       0.0       0.0   \n","1         0.0      0.0      0.0  ...       0.0       0.0       0.0       0.0   \n","2         0.0      0.0      0.0  ...       0.0       0.0       0.0       0.0   \n","3         0.0      0.0      0.0  ...       0.0       0.0       0.0       0.0   \n","4         0.0      0.0      0.0  ...       0.0       0.0       0.0       0.0   \n","...       ...      ...      ...  ...       ...       ...       ...       ...   \n","9423      0.0      0.0      0.0  ...       0.0       0.0       0.0       0.0   \n","9424      0.0      0.0      0.0  ...       0.0       0.0       0.0       0.0   \n","9425      0.0      0.0      0.0  ...       0.0       0.0       0.0       0.0   \n","9426      0.0      0.0      0.0  ...       0.0       0.0       0.0       0.0   \n","9427      0.0      0.0      0.0  ...       0.0       0.0       0.0       0.0   \n","\n","      Param_55  Param_56  Param_57  Param_58  Param_59  Param_60  \n","0          0.0       0.0       0.0       0.0       0.0       0.0  \n","1          0.0       0.0       0.0       0.0       0.0       0.0  \n","2          0.0       0.0       0.0       0.0       0.0       0.0  \n","3          0.0       0.0       0.0       0.0       0.0       0.0  \n","4          0.0       0.0       0.0       0.0       0.0       0.0  \n","...        ...       ...       ...       ...       ...       ...  \n","9423       0.0       0.0       0.0       0.0       0.0       0.0  \n","9424       0.0       0.0       0.0       0.0       0.0       0.0  \n","9425       0.0       0.0       0.0       0.0       0.0       0.0  \n","9426       0.0       0.0       0.0       0.0       0.0       0.0  \n","9427       0.0       0.0       0.0       0.0       0.0       0.0  \n","\n","[9428 rows x 67 columns]"],"text/html":["\n","  <div id=\"df-ef3050d6-e2a1-4a6f-9600-9332b2c32255\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Time</th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Datetime</th>\n","      <th>Param_1</th>\n","      <th>Param_2</th>\n","      <th>Param_3</th>\n","      <th>...</th>\n","      <th>Param_51</th>\n","      <th>Param_52</th>\n","      <th>Param_53</th>\n","      <th>Param_54</th>\n","      <th>Param_55</th>\n","      <th>Param_56</th>\n","      <th>Param_57</th>\n","      <th>Param_58</th>\n","      <th>Param_59</th>\n","      <th>Param_60</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2021/12/1</td>\n","      <td>08:45:00</td>\n","      <td>17350</td>\n","      <td>17384</td>\n","      <td>17342</td>\n","      <td>17356</td>\n","      <td>2021-12-01 08:45:00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2021/12/1</td>\n","      <td>09:00:00</td>\n","      <td>17357</td>\n","      <td>17419</td>\n","      <td>17333</td>\n","      <td>17419</td>\n","      <td>2021-12-01 09:00:00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2021/12/1</td>\n","      <td>09:15:00</td>\n","      <td>17419</td>\n","      <td>17425</td>\n","      <td>17365</td>\n","      <td>17375</td>\n","      <td>2021-12-01 09:15:00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2021/12/1</td>\n","      <td>09:30:00</td>\n","      <td>17375</td>\n","      <td>17441</td>\n","      <td>17367</td>\n","      <td>17441</td>\n","      <td>2021-12-01 09:30:00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2021/12/1</td>\n","      <td>09:45:00</td>\n","      <td>17441</td>\n","      <td>17457</td>\n","      <td>17431</td>\n","      <td>17435</td>\n","      <td>2021-12-01 09:45:00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>9423</th>\n","      <td>2023/11/13</td>\n","      <td>10:15:00</td>\n","      <td>16905</td>\n","      <td>16910</td>\n","      <td>16873</td>\n","      <td>16876</td>\n","      <td>2023-11-13 10:15:00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>9424</th>\n","      <td>2023/11/13</td>\n","      <td>10:30:00</td>\n","      <td>16878</td>\n","      <td>16904</td>\n","      <td>16876</td>\n","      <td>16893</td>\n","      <td>2023-11-13 10:30:00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>9425</th>\n","      <td>2023/11/13</td>\n","      <td>10:45:00</td>\n","      <td>16893</td>\n","      <td>16899</td>\n","      <td>16863</td>\n","      <td>16872</td>\n","      <td>2023-11-13 10:45:00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>9426</th>\n","      <td>2023/11/13</td>\n","      <td>11:00:00</td>\n","      <td>16872</td>\n","      <td>16873</td>\n","      <td>16847</td>\n","      <td>16864</td>\n","      <td>2023-11-13 11:00:00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>9427</th>\n","      <td>2023/11/13</td>\n","      <td>11:15:00</td>\n","      <td>16864</td>\n","      <td>16872</td>\n","      <td>16857</td>\n","      <td>16863</td>\n","      <td>2023-11-13 11:15:00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>9428 rows × 67 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ef3050d6-e2a1-4a6f-9600-9332b2c32255')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ef3050d6-e2a1-4a6f-9600-9332b2c32255 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ef3050d6-e2a1-4a6f-9600-9332b2c32255');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-3ad63f8a-ca8d-44c6-b6b2-89794616be6b\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3ad63f8a-ca8d-44c6-b6b2-89794616be6b')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-3ad63f8a-ca8d-44c6-b6b2-89794616be6b button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_28843244-4eba-4941-bbea-b39dc180b127\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('merged_train_data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_28843244-4eba-4941-bbea-b39dc180b127 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('merged_train_data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"merged_train_data"}},"metadata":{},"execution_count":20}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1549,"status":"ok","timestamp":1746617291444,"user":{"displayName":"林家宏","userId":"04041535431236020406"},"user_tz":-480},"id":"67vpMNoJXsNi","outputId":"b817a7a7-0d1e-41fe-f7e0-7251cdcf1643"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-21-c6e44c963b01>:6: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:7: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-21-c6e44c963b01>:11: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:12: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-21-c6e44c963b01>:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:17: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:18: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:6: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:11: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:18: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:6: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:11: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:18: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:6: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:7: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:11: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:12: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:17: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:18: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-21-c6e44c963b01>:7: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-21-c6e44c963b01>:12: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-21-c6e44c963b01>:17: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:18: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:7: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:12: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:17: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:18: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:6: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:11: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:18: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:18: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:7: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:12: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:17: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:18: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:18: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:7: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:12: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:17: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:18: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:7: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:12: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:17: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:18: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-21-c6e44c963b01>:6: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:7: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-21-c6e44c963b01>:11: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:12: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-21-c6e44c963b01>:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:17: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:18: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:6: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:7: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:11: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:12: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:17: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:18: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-21-c6e44c963b01>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-21-c6e44c963b01>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-21-c6e44c963b01>:18: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-21-c6e44c963b01>:6: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:7: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-21-c6e44c963b01>:11: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:12: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:3: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Short_{ma_short}\"] = df['Close'].rolling(window=ma_short).mean()\n","<ipython-input-21-c6e44c963b01>:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:17: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","<ipython-input-21-c6e44c963b01>:18: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:6: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:11: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-7-420d6cc4a10c>:4: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"MA_Long_{ma_long}\"] = df['Close'].rolling(window=ma_long).mean()\n","<ipython-input-7-420d6cc4a10c>:8: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_1_{will_period_1}\"] = -100 * (highest_high_buy - df['Close']) / (highest_high_buy - lowest_low_buy)\n","<ipython-input-7-420d6cc4a10c>:13: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  df[f\"Williams_2_{will_period_2}\"] = -100 * (highest_high_sell - df['Close']) / (highest_high_sell - lowest_low_sell)\n","<ipython-input-21-c6e44c963b01>:16: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","<ipython-input-21-c6e44c963b01>:18: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","<ipython-input-21-c6e44c963b01>:21: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_train_data['position'] = None\n","<ipython-input-21-c6e44c963b01>:21: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  merged_train_data['position'] = None\n","<ipython-input-21-c6e44c963b01>:24: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_val_data['position'] = None\n","<ipython-input-21-c6e44c963b01>:24: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  merged_val_data['position'] = None\n","<ipython-input-21-c6e44c963b01>:27: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n","  merged_test_data['position'] = None\n","<ipython-input-21-c6e44c963b01>:27: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  merged_test_data['position'] = None\n"]}],"source":["strategy_params = None\n","for result in sorted_results:\n","  strategy_params = result.get(\"params\")\n","  ind_params = {k: strategy_params[k] for k in ['ma_short', 'ma_long', 'will_period_1', 'will_period_2']}\n","  merged_train_data = add_indicators(merged_train_data, **ind_params)\n","  merged_train_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","  merged_train_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","  merged_train_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","\n","  merged_val_data = add_indicators(merged_val_data, **ind_params)\n","  merged_val_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","  merged_val_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","  merged_val_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","\n","  merged_test_data = add_indicators(merged_test_data, **ind_params)\n","  merged_test_data[f\"will_buy_threshold_1_{strategy_params['will_buy_threshold_1']}\"] = strategy_params['will_buy_threshold_1']\n","  merged_test_data[f\"will_sell_threshold_2_{strategy_params['will_sell_threshold_2']}\"] = strategy_params['will_sell_threshold_2']\n","  merged_test_data[f\"stop_loss_{strategy_params['stop_loss']}\"] = strategy_params['stop_loss']\n","# 然後利用字典拆包傳入函數\n","merged_train_data = merged_train_data.dropna()\n","merged_train_data['position'] = None\n","\n","merged_val_data = merged_val_data.dropna()\n","merged_val_data['position'] = None\n","\n","merged_test_data = merged_test_data.dropna()\n","merged_test_data['position'] = None"]},{"cell_type":"markdown","source":["# XGBoost建模"],"metadata":{"id":"lC_zP7HLK8xX"}},{"cell_type":"code","source":["# 假設我們有已定義好的 merged_train_data 與 merged_test_data\n","columns = [f\"Param_{i}\" for i in range(1, 61)]\n","\n","df_train = merged_train_data[columns]\n","df_val = merged_val_data[columns]\n","df_test = merged_test_data[columns]\n","\n","# 根據所有參數總和來決定是否交易，總和大於 22000 為 1，否則為 0\n","y_train = np.where(df_train.sum(axis=1) > 22000, 1, 0)\n","y_val = np.where(df_val.sum(axis=1) > 22000, 1, 0)\n","y_test = np.where(df_test.sum(axis=1) > 22000, 1, 0)\n","\n","X_train = (merged_train_data[columns] != 0).astype(int)\n","X_val = (merged_val_data[columns] != 0).astype(int)\n","X_test = (merged_test_data[columns] != 0).astype(int)\n","\n","# 1. 計算類別權重並分配樣本權重\n","classes = np.unique(y_train)\n","weights = compute_class_weight(class_weight='balanced', classes=classes, y=y_train)\n","class_weight_dict = dict(zip(classes, weights))\n","sample_weights = np.array([class_weight_dict[label] for label in y_train])\n","\n","# 2. 建立並訓練 XGBoost 模型\n","model = XGBClassifier(random_state=42, objective='binary:logistic', eval_metric='logloss')\n","model.fit(X_train, y_train, sample_weight=sample_weights)\n","\n","# 3. 預測與評估\n","y_val_pred = model.predict(X_val)\n","y_test_pred = model.predict(X_test)\n","\n","acc_val = accuracy_score(y_val, y_val_pred)\n","acc_test = accuracy_score(y_test, y_test_pred)\n","\n","print(\"驗證集準確率：\", acc_val)\n","print(\"分類報告：\")\n","print(classification_report(y_val, y_val_pred))\n","\n","print(\"測試集準確率：\", acc_test)\n","print(\"分類報告：\")\n","print(classification_report(y_test, y_test_pred))\n","\n","# 4. 建立 SHAP 解釋器並計算 SHAP 值\n","\n","explainer_val = shap.TreeExplainer(model)\n","shap_values_val = explainer_val.shap_values(X_val)\n","\n","explainer_test = shap.TreeExplainer(model)\n","shap_values_test = explainer_test.shap_values(X_test)\n","\n","# 5. 將每筆測試資料中 SHAP 絕對值最大的參數及其 SHAP 絕對值整理成 DataFrame\n","records_val = []\n","for i in range(len(X_val)):\n","    sample_shap_abs = abs(shap_values_val[i])\n","    best_idx = np.argmax(sample_shap_abs)\n","    best_feature = X_test.columns[best_idx]\n","    best_shap_value = sample_shap_abs[best_idx]\n","    records_val.append({\n","        \"Sample_Index\": i,\n","        \"Best_Feature\": best_feature,\n","        \"Best_SHAP_Abs_value\": best_shap_value\n","    })\n","\n","df_best_val = pd.DataFrame(records_val)\n","\n","records_test = []\n","for i in range(len(X_test)):\n","    sample_shap_abs = abs(shap_values_test[i])\n","    best_idx = np.argmax(sample_shap_abs)\n","    best_feature = X_test.columns[best_idx]\n","    best_shap_value = sample_shap_abs[best_idx]\n","    records_test.append({\n","        \"Sample_Index\": i,\n","        \"Best_Feature\": best_feature,\n","        \"Best_SHAP_Abs_value\": best_shap_value\n","    })\n","\n","df_best_test = pd.DataFrame(records_test)\n","\n","# 可選：繪製 SHAP summary plot\n","# shap.summary_plot(shap_values, X_test, plot_type=\"bar\")\n","\n","# 方式 2：重置 index 後合併\n","# df_test_reset = df_test.reset_index(drop=True)\n","# y_pred = pd.DataFrame(y_pred,columns=['Pred'])\n","# df_shap_best_reset = df_shap_best.set_index(\"Sample_Index\")\n","# combined_df = pd.concat([df_test_reset, y_pred], axis=1)\n","# combined_df = pd.concat([combined_df, df_shap_best_reset], axis=1)\n","# print(combined_df[combined_df['Pred']==1][['Param_39','Param_25','Best_Feature']])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SZs86xueTOEg","executionInfo":{"status":"ok","timestamp":1746617301805,"user_tz":-480,"elapsed":10352,"user":{"displayName":"林家宏","userId":"04041535431236020406"}},"outputId":"13d3f46c-964e-42b5-b7a9-f86e15a6638c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["驗證集準確率： 0.9400129701686122\n","分類報告：\n","              precision    recall  f1-score   support\n","\n","           0       0.99      0.95      0.97      2925\n","           1       0.45      0.77      0.57       159\n","\n","    accuracy                           0.94      3084\n","   macro avg       0.72      0.86      0.77      3084\n","weighted avg       0.96      0.94      0.95      3084\n","\n","測試集準確率： 0.9513618677042801\n","分類報告：\n","              precision    recall  f1-score   support\n","\n","           0       0.97      0.97      0.97      2878\n","           1       0.63      0.65      0.64       206\n","\n","    accuracy                           0.95      3084\n","   macro avg       0.80      0.81      0.81      3084\n","weighted avg       0.95      0.95      0.95      3084\n","\n"]}]},{"cell_type":"code","source":["# ---------------------------\n","# 回測函數（跨窗口持倉設計）\n","# 當回測資料中 Pred == 1 時，取出該筆資料的前一筆、當前筆、下一筆作為交易窗口，\n","# 若進場成功，該交易持倉 open_position 將跨窗口傳遞，直到策略觸發出場條件。\n","# ---------------------------\n","def run_backtest(df, param_dict_list, strategy_mapping, initial_capital=1000000):\n","    capital = initial_capital\n","    all_trades = []\n","    open_position = None       # 持倉資訊\n","    current_strategy = None    # 當前使用的策略名稱\n","    current_params = None      # 當前使用的交易參數（字典）\n","\n","    n = len(df)\n","    # 從索引1到 n-2 保證有前一筆與下一筆\n","    i = 1\n","    while i < n - 1:\n","        window_df = df.iloc[i-1:i+2].copy()\n","        # 如果目前沒有持倉，檢查 Pred 是否為1觸發進場\n","        if open_position is None:\n","            if df.loc[i, 'Pred'] == 1:\n","                best_feature = df.loc[i, 'Best_Feature']  # 例如 \"Param_1\"\n","                param_id = int(best_feature.split('_')[1])\n","                # 從參數字典列表中找出對應參數資訊\n","                param_info = param_dict_list[param_id-1]\n","                if param_info is None:\n","                    print(f\"無對應參數資訊: {best_feature}，索引 {i}\")\n","                    i += 1\n","                    continue\n","                current_strategy = param_info[\"strategy\"]\n","                current_params = param_info[\"params\"]\n","                strategy_func = strategy_mapping.get(current_strategy)\n","                ind_params = {k: current_params[k] for k in ['ma_short', 'ma_long', 'will_period_1', 'will_buy_threshold_1', 'will_period_2', 'will_sell_threshold_2', 'stop_loss']}\n","                features = ['Open', 'High', 'Low', 'Close', 'Datetime', f\"MA_Short_{ind_params['ma_short']}\", f\"MA_Long_{ind_params['ma_long']}\", f\"Williams_1_{ind_params['will_period_1']}\",\n","                            f\"Williams_2_{ind_params['will_period_2']}\", f\"will_buy_threshold_1_{ind_params['will_buy_threshold_1']}\",\n","                            f\"will_sell_threshold_2_{ind_params['will_sell_threshold_2']}\",f\"stop_loss_{ind_params['stop_loss']}\",'position']\n","                window_df = window_df[features]\n","                if strategy_func is None:\n","                    print(f\"無對應策略函數: {current_strategy}，索引 {i}\")\n","                    i += 1\n","                    continue\n","                # 嘗試進場（傳入 open_position=None）\n","                trades_local, returns, capital, new_position = strategy_func(window_df, features, initial_capital=capital, open_position=None, param_id = param_id)\n","                if new_position is not None:\n","                    open_position = new_position\n","                    # 進場成功後，記錄的交易尚未完成，持倉跨窗口傳遞\n","                i += 1\n","            else:\n","                i += 1\n","        else:\n","            # 如果已有持倉，則持續更新該交易\n","            strategy_func = strategy_mapping.get(current_strategy)\n","            # 在 window 的前一筆中覆寫持倉資訊\n","            window_df.at[window_df.index[0], 'position'] = open_position\n","            param_id = open_position['entry_id']\n","            param_info = param_dict_list[param_id-1]\n","            if param_info is None:\n","                print(f\"無對應參數資訊: {best_feature}，索引 {i}\")\n","                i += 1\n","                continue\n","            current_strategy = param_info[\"strategy\"]\n","            current_params = param_info[\"params\"]\n","            strategy_func = strategy_mapping.get(current_strategy)\n","            ind_params = {k: current_params[k] for k in ['ma_short', 'ma_long', 'will_period_1', 'will_buy_threshold_1', 'will_period_2', 'will_sell_threshold_2', 'stop_loss']}\n","            features = ['Open', 'High', 'Low', 'Close', 'Datetime', f\"MA_Short_{ind_params['ma_short']}\", f\"MA_Long_{ind_params['ma_long']}\", f\"Williams_1_{ind_params['will_period_1']}\",\n","                        f\"Williams_2_{ind_params['will_period_2']}\", f\"will_buy_threshold_1_{ind_params['will_buy_threshold_1']}\",\n","                        f\"will_sell_threshold_2_{ind_params['will_sell_threshold_2']}\",f\"stop_loss_{ind_params['stop_loss']}\",'position']\n","            window_df = window_df[features]\n","            trades_local, returns, capital, new_position = strategy_func(window_df, features, initial_capital=capital, open_position=open_position, param_id = param_id)\n","            if trades_local:\n","                all_trades.extend(trades_local)\n","            open_position = new_position\n","            i += 1\n","\n","    # 若迴圈結束時仍有持倉，則以最後一筆K棒強制平倉\n","    if open_position is not None and n > 0:\n","        last_candle = df.iloc[-1]\n","        entry_price = open_position['entry_price']\n","        entry_time = open_position['entry_time']\n","        exit_price = last_candle['Close']\n","        exit_time = last_candle['Datetime']\n","        trades_local = []\n","        trades_local, capital = execute_trade(trades_local, capital, entry_price, exit_price, entry_time, exit_time, exit_reason='end_of_data')\n","        all_trades.extend(trades_local)\n","        open_position = None\n","    return all_trades, capital"],"metadata":{"id":"GzyhOL6455eN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def run_backtest(df, param_dict_list, strategy_mapping, initial_capital=1000000):\n","    capital = initial_capital\n","    all_trades = []\n","    open_position = None       # 持倉資訊\n","    current_strategy = None    # 當前使用的策略名稱\n","    current_params = None      # 當前使用的交易參數（字典）\n","\n","    n = len(df)\n","    i = 1\n","    while i < n - 1:\n","        window_df = df.iloc[i-1:i+2].copy()\n","        # 如果目前沒有持倉，檢查 Pred 是否為1觸發進場\n","        if open_position is None:\n","            if df.loc[i, 'Pred'] == 1:\n","                best_feature = df.loc[i, 'Best_Feature']\n","                param_id = int(best_feature.split('_')[1])\n","                param_info = param_dict_list[param_id-1]\n","                if param_info is None:\n","                    print(f\"無對應參數資訊: {best_feature}，索引 {i}\")\n","                    i += 1\n","                    continue\n","                current_strategy = param_info[\"strategy\"]\n","                current_params = param_info[\"params\"]\n","                strategy_func = strategy_mapping.get(current_strategy)\n","                ind_params = {k: current_params[k] for k in ['ma_short', 'ma_long', 'will_period_1', 'will_buy_threshold_1', 'will_period_2', 'will_sell_threshold_2', 'stop_loss']}\n","                features = ['Open', 'High', 'Low', 'Close', 'Datetime', f\"MA_Short_{ind_params['ma_short']}\", f\"MA_Long_{ind_params['ma_long']}\", f\"Williams_1_{ind_params['will_period_1']}\",\n","                            f\"Williams_2_{ind_params['will_period_2']}\", f\"will_buy_threshold_1_{ind_params['will_buy_threshold_1']}\",\n","                            f\"will_sell_threshold_2_{ind_params['will_sell_threshold_2']}\",f\"stop_loss_{ind_params['stop_loss']}\",'position']\n","                window_df = window_df[features]\n","                if strategy_func is None:\n","                    print(f\"無對應策略函數: {current_strategy}，索引 {i}\")\n","                    i += 1\n","                    continue\n","                # 嘗試進場（傳入 open_position=None）\n","                trades_local, returns, capital, new_position = strategy_func(window_df, features, initial_capital=capital, open_position=None, param_id=param_id)\n","                if new_position is not None:\n","                    # 在新持倉中添加 current_strategy\n","                    new_position['strategy'] = current_strategy\n","                    open_position = new_position\n","                    # 進場成功後，記錄的交易尚未完成，持倉跨窗口傳遞\n","                i += 1\n","            else:\n","                i += 1\n","        else:\n","            # 如果已有持倉，則持續更新該交易\n","            strategy_func = strategy_mapping.get(current_strategy)\n","            window_df.at[window_df.index[0], 'position'] = open_position\n","            param_id = open_position['entry_id']\n","            param_info = param_dict_list[param_id-1]\n","            if param_info is None:\n","                print(f\"無對應參數資訊: {best_feature}，索引 {i}\")\n","                i += 1\n","                continue\n","            current_strategy = param_info[\"strategy\"]\n","            current_params = param_info[\"params\"]\n","            strategy_func = strategy_mapping.get(current_strategy)\n","            ind_params = {k: current_params[k] for k in ['ma_short', 'ma_long', 'will_period_1', 'will_buy_threshold_1', 'will_period_2', 'will_sell_threshold_2', 'stop_loss']}\n","            features = ['Open', 'High', 'Low', 'Close', 'Datetime', f\"MA_Short_{ind_params['ma_short']}\", f\"MA_Long_{ind_params['ma_long']}\", f\"Williams_1_{ind_params['will_period_1']}\",\n","                        f\"Williams_2_{ind_params['will_period_2']}\", f\"will_buy_threshold_1_{ind_params['will_buy_threshold_1']}\",\n","                        f\"will_sell_threshold_2_{ind_params['will_sell_threshold_2']}\",f\"stop_loss_{ind_params['stop_loss']}\",'position']\n","            window_df = window_df[features]\n","            trades_local, returns, capital, new_position = strategy_func(window_df, features, initial_capital=capital, open_position=open_position, param_id=param_id)\n","            if trades_local:\n","                # 為每筆交易記錄添加 current_strategy\n","                for trade in trades_local:\n","                    trade['strategy'] = current_strategy\n","                all_trades.extend(trades_local)\n","            # 更新持倉時保留 current_strategy\n","            if new_position is not None:\n","                new_position['strategy'] = current_strategy\n","            open_position = new_position\n","            i += 1\n","\n","    # 若迴圈結束時仍有持倉，則以最後一筆K棒強制平倉\n","    if open_position is not None and n > 0:\n","        last_candle = df.iloc[-1]\n","        entry_price = open_position['entry_price']\n","        entry_time = open_position['entry_time']\n","        exit_price = last_candle['Close']\n","        exit_time = last_candle['Datetime']\n","        trades_local = []\n","        # 調用 execute_trade\n","        trades_local, capital = execute_trade(trades_local, capital, entry_price, exit_price, entry_time, exit_time, exit_reason='end_of_data')\n","        # 為強制平倉的交易記錄添加 current_strategy\n","        for trade in trades_local:\n","            trade['strategy'] = open_position['strategy']  # 從 open_position 中獲取\n","        all_trades.extend(trades_local)\n","        open_position = None\n","    return all_trades, capital"],"metadata":{"id":"ps67Jsy1dz6l"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# XGBoost回測"],"metadata":{"id":"5cuvRbmLLaDI"}},{"cell_type":"code","source":["strategy_mapping = {\n","    \"Strategy_1\": simulate_strategy_1_3bars,\n","    \"Strategy_2\": simulate_strategy_2_3bars,\n","    \"Strategy_3\": simulate_strategy_3_3bars,\n","    \"Strategy_4\": simulate_strategy_4_3bars\n","}\n","\n","merged_val_data_reset = merged_val_data.reset_index(drop=True)\n","y_val_pred = pd.DataFrame(y_val_pred, columns=['Pred'])\n","df_best_val_reset = df_best_val.set_index(\"Sample_Index\")\n","combined_df_val = pd.concat([merged_val_data_reset, y_val_pred], axis=1)\n","combined_df_val = pd.concat([combined_df_val, df_best_val_reset], axis=1)\n","all_trades_val, capital_val = run_backtest(combined_df_val, sorted_results, strategy_mapping, initial_capital=1000000)\n","\n","merged_test_data_reset = merged_test_data.reset_index(drop=True)\n","y_test_pred = pd.DataFrame(y_test_pred, columns=['Pred'])\n","df_best_test_reset = df_best_test.set_index(\"Sample_Index\")\n","combined_df_test = pd.concat([merged_test_data_reset, y_test_pred], axis=1)\n","combined_df_test = pd.concat([combined_df_test, df_best_test_reset], axis=1)\n","all_trades_test, capital_test = run_backtest(combined_df_test, sorted_results, strategy_mapping, initial_capital=1000000)\n","\n","trade_count_val = len(all_trades_val)\n","win_rate_val = calculate_win_rate(all_trades_val)\n","returns_val = pd.Series([t['profit'] for t in all_trades_val], index=[t['exit_time'] for t in all_trades_val])\n","msr_val = calculate_msr(returns_val)\n","sharp_ration_val = calculate_sharpe_ratio(returns_val)\n","avg_duration_val, exit_reasons_val, shortest_5_avg_val, longest_5_avg_val = calculate_additional_metrics(all_trades_val)\n","median_return_val, mad_val = calculate_median_and_mad(returns_val)\n","mean_return_val, std_return_val, min_return_val, max_return_val = calculate_returns_stats(returns_val)\n","strategy_times_val = Counter(trade['strategy'] for trade in all_trades_val)\n","\n","print(f\"\\n  驗證集:\")\n","print(f\"   交易次數: {trade_count_val}\")\n","print(f\"   最終資金: {capital_val:.0f}\")  # 改為整數\n","print(f\"   勝率: {win_rate_val:.4f}\")\n","print(f\"   中位數回報 (Median Return): {median_return_val:.0f}\")  # 改為整數\n","print(f\"   中位數絕對偏差 (MAD): {mad_val:.0f}\")  # 改為整數\n","print(f\"   穩健夏普比率 (MSR): {msr_val:.4f}\")\n","print(f\"   夏普比率 (Sharpe Ratio): {sharp_ration_val:.4f}\")\n","print(f\"   回報分佈統計:\")\n","print(f\"     均值 (Mean): {mean_return_val:.0f}\")  # 改為整數\n","print(f\"     標準差 (Std): {std_return_val:.0f}\")  # 改為整數\n","print(f\"     最小值 (Min): {min_return_val:.0f}\")  # 改為整數\n","print(f\"     最大值 (Max): {max_return_val:.0f}\")  # 改為整數\n","print(f\"   平均交易時長 (K 棒數): {avg_duration_val:.2f}\")\n","print(f\"   5 筆最短持倉時間平均 (K 棒數): {shortest_5_avg_val:.2f}\")\n","print(f\"   5 筆最長持倉時間平均 (K 棒數): {longest_5_avg_val:.2f}\")\n","print(f\"   出場原因統計: {dict(exit_reasons_val)}\")\n","print(f\"   策略使用統計: {dict(strategy_times_val)}\")\n","\n","trade_count_test = len(all_trades_test)\n","win_rate_test = calculate_win_rate(all_trades_test)\n","returns_test = pd.Series([t['profit'] for t in all_trades_test], index=[t['exit_time'] for t in all_trades_test])\n","msr_test = calculate_msr(returns_test)\n","sharp_ration_test = calculate_sharpe_ratio(returns_test)\n","avg_duration_test, exit_reasons_test, shortest_5_avg_test, longest_5_avg_test = calculate_additional_metrics(all_trades_test)\n","median_return_test, mad_test = calculate_median_and_mad(returns_test)\n","mean_return_test, std_return_test, min_return_test, max_return_test = calculate_returns_stats(returns_test)\n","strategy_times_test = Counter(trade['strategy'] for trade in all_trades_test)\n","\n","print(f\"\\n  測試集:\")\n","print(f\"   交易次數: {trade_count_test}\")\n","print(f\"   最終資金: {capital_test:.0f}\")  # 改為整數\n","print(f\"   勝率: {win_rate_test:.4f}\")\n","print(f\"   中位數回報 (Median Return): {median_return_test:.0f}\")  # 改為整數\n","print(f\"   中位數絕對偏差 (MAD): {mad_test:.0f}\")  # 改為整數\n","print(f\"   穩健夏普比率 (MSR): {msr_test:.4f}\")\n","print(f\"   夏普比率 (Sharpe Ratio): {sharp_ration_test:.4f}\")\n","print(f\"   回報分佈統計:\")\n","print(f\"     均值 (Mean): {mean_return_test:.0f}\")  # 改為整數\n","print(f\"     標準差 (Std): {std_return_test:.0f}\")  # 改為整數\n","print(f\"     最小值 (Min): {min_return_test:.0f}\")  # 改為整數\n","print(f\"     最大值 (Max): {max_return_test:.0f}\")  # 改為整數\n","print(f\"   平均交易時長 (K 棒數): {avg_duration_test:.2f}\")\n","print(f\"   5 筆最短持倉時間平均 (K 棒數): {shortest_5_avg_test:.2f}\")\n","print(f\"   5 筆最長持倉時間平均 (K 棒數): {longest_5_avg_test:.2f}\")\n","print(f\"   出場原因統計: {dict(exit_reasons_test)}\")\n","print(f\"   策略使用統計: {dict(strategy_times_test)}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WVLKpFgh58wB","executionInfo":{"status":"ok","timestamp":1746617304197,"user_tz":-480,"elapsed":2376,"user":{"displayName":"林家宏","userId":"04041535431236020406"}},"outputId":"e3d3f844-892b-4ab7-aa8a-2a8137b99e75"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","  驗證集:\n","   交易次數: 50\n","   最終資金: 1245655\n","   勝率: 0.7400\n","   中位數回報 (Median Return): 3619\n","   中位數絕對偏差 (MAD): 4505\n","   穩健夏普比率 (MSR): 0.8033\n","   夏普比率 (Sharpe Ratio): 0.4261\n","   回報分佈統計:\n","     均值 (Mean): 4991\n","     標準差 (Std): 11711\n","     最小值 (Min): -27471\n","     最大值 (Max): 50320\n","   平均交易時長 (K 棒數): 2.74\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 9.00\n","   出場原因統計: {'price_below_long_ma': 12, 'death_cross': 9, 'williams_overbought': 27, 'stop_loss': 2}\n","   策略使用統計: {'Strategy_4': 25, 'Strategy_3': 25}\n","\n","  測試集:\n","   交易次數: 49\n","   最終資金: 1181506\n","   勝率: 0.6327\n","   中位數回報 (Median Return): 2707\n","   中位數絕對偏差 (MAD): 6604\n","   穩健夏普比率 (MSR): 0.4098\n","   夏普比率 (Sharpe Ratio): 0.2387\n","   回報分佈統計:\n","     均值 (Mean): 3795\n","     標準差 (Std): 15897\n","     最小值 (Min): -50093\n","     最大值 (Max): 42317\n","   平均交易時長 (K 棒數): 2.04\n","   5 筆最短持倉時間平均 (K 棒數): 1.00\n","   5 筆最長持倉時間平均 (K 棒數): 7.60\n","   出場原因統計: {'price_below_long_ma': 12, 'death_cross': 12, 'williams_overbought': 21, 'stop_loss': 4}\n","   策略使用統計: {'Strategy_4': 28, 'Strategy_3': 21}\n"]}]},{"cell_type":"markdown","source":["# 單一參數在訓練集與驗證集"],"metadata":{"id":"d8yK4Nx1ATWv"}},{"cell_type":"markdown","source":["訓練集第一與驗證集第一"],"metadata":{"id":"iEB2dacwAc9r"}},{"cell_type":"code","source":["val_res = []\n","test_res = []\n","for i in range(1,61):\n","  # 計算驗證集表現指標\n","  trade_count = len(param_trade_val[f\"Param_{i}\"])\n","  win_rate = calculate_win_rate(param_trade_val[f\"Param_{i}\"])\n","  msr = calculate_msr(param_returns_val[f\"Param_{i}\"])\n","  sharpe = calculate_sharpe_ratio(param_returns_val[f\"Param_{i}\"])\n","  avg_duration, exit_reasons, shortest_5_avg, longest_5_avg = calculate_additional_metrics(param_trade_val[f\"Param_{i}\"])\n","  median_return, mad = calculate_median_and_mad(param_returns_val[f\"Param_{i}\"])\n","  mean_return, std_return, min_return, max_return = calculate_returns_stats(param_returns_val[f\"Param_{i}\"])\n","  opt_method = sorted_results[i-1].get('opt_method')\n","  strategy = sorted_results[i-1].get('strategy')\n","  # 儲存驗證集結果\n","  val_res.append({\n","      'param_id': f\"Param_{i}\",\n","      'opt_method': opt_method,\n","      'strategy': strategy,\n","      'params': params,\n","      'trade_count': trade_count,\n","      'final_capital': param_capital_val[f\"Param_{i}\"],\n","      'win_rate': win_rate,\n","      'msr': msr,\n","      'sharpe': sharpe,\n","      'avg_duration': avg_duration,\n","      'exit_reasons': exit_reasons,\n","      'shortest_5_avg': shortest_5_avg,\n","      'longest_5_avg': longest_5_avg,\n","      'median_return': median_return,\n","      'mad': mad,\n","      'mean_return': mean_return,\n","      'std_return': std_return,\n","      'min_return': min_return,\n","      'max_return': max_return\n","  })\n","\n","  # 計算測試集表現指標\n","  trade_count = len(param_trade_test[f\"Param_{i}\"])\n","  win_rate = calculate_win_rate(param_trade_test[f\"Param_{i}\"])\n","  msr = calculate_msr(param_returns_test[f\"Param_{i}\"])\n","  sharpe = calculate_sharpe_ratio(param_returns_test[f\"Param_{i}\"])\n","  avg_duration, exit_reasons, shortest_5_avg, longest_5_avg = calculate_additional_metrics(param_trade_test[f\"Param_{i}\"])\n","  median_return, mad = calculate_median_and_mad(param_returns_test[f\"Param_{i}\"])\n","  mean_return, std_return, min_return, max_return = calculate_returns_stats(param_returns_test[f\"Param_{i}\"])\n","\n","  # 儲存測試集結果\n","  test_res.append({\n","      'param_id': f\"Param_{i}\",\n","      'opt_method': opt_method,\n","      'strategy': strategy,\n","      'params': params,\n","      'trade_count': trade_count,\n","      'final_capital': param_capital_test[f\"Param_{i}\"],\n","      'win_rate': win_rate,\n","      'msr': msr,\n","      'sharpe': sharpe,\n","      'avg_duration': avg_duration,\n","      'exit_reasons': exit_reasons,\n","      'shortest_5_avg': shortest_5_avg,\n","      'longest_5_avg': longest_5_avg,\n","      'median_return': median_return,\n","      'mad': mad,\n","      'mean_return': mean_return,\n","      'std_return': std_return,\n","      'min_return': min_return,\n","      'max_return': max_return\n","  })\n","\n","\n","# 按 MSR 排序結果\n","val_res_sorted = sorted(val_res, key=lambda x: x['msr'], reverse=True)\n","\n","# 輸出結果\n","print(\"\\n=== 驗證集績效比較（按穩健夏普比率從高到低排序） ===\")\n","result = val_res_sorted[0]\n","print(f\"\\n參數組 ID: {result['param_id']}\")\n","print(f\"優化方法: {result['opt_method']}\")\n","print(f\"策略: {result['strategy']}\")\n","print(f\"參數組合: {result['params']}\")\n","print(f\"交易次數: {result['trade_count']}\")\n","print(f\"最終資金: {result['final_capital']:.2f}\")\n","print(f\"勝率: {result['win_rate']:.4f}\")\n","print(f\"中位數回報 (Median Return): {result['median_return']:.2f}\")\n","print(f\"中位數絕對偏差 (MAD): {result['mad']:.2f}\")\n","print(f\"穩健夏普比率 (MSR): {result['msr']:.4f}\")\n","print(f\"夏普比率 (Sharpe Ratio): {result['sharpe']:.4f}\")\n","print(f\"回報分佈統計:\")\n","print(f\"  均值 (Mean): {result['mean_return']:.2f}\")\n","print(f\"  標準差 (Std): {result['std_return']:.2f}\")\n","print(f\"  最小值 (Min): {result['min_return']:.2f}\")\n","print(f\"  最大值 (Max): {result['max_return']:.2f}\")\n","print(f\"平均交易時長 (K 棒數): {result['avg_duration']:.2f}\")\n","print(f\"5 筆最短持倉時間平均 (K 棒數): {result['shortest_5_avg']:.2f}\")\n","print(f\"5 筆最長持倉時間平均 (K 棒數): {result['longest_5_avg']:.2f}\")\n","print(f\"出場原因統計: {dict(result['exit_reasons'])}\")\n","\n","\n","# 按 MSR 排序結果\n","test_res_sorted = sorted(test_res, key=lambda x: x['msr'], reverse=True)\n","\n","# 輸出結果\n","print(\"\\n=== 測試集績效比較（按穩健夏普比率從高到低排序） ===\")\n","result = test_res_sorted[0]\n","print(f\"\\n參數組 ID: {result['param_id']}\")\n","print(f\"優化方法: {result['opt_method']}\")\n","print(f\"策略: {result['strategy']}\")\n","print(f\"參數組合: {result['params']}\")\n","print(f\"交易次數: {result['trade_count']}\")\n","print(f\"最終資金: {result['final_capital']:.2f}\")\n","print(f\"勝率: {result['win_rate']:.4f}\")\n","print(f\"中位數回報 (Median Return): {result['median_return']:.2f}\")\n","print(f\"中位數絕對偏差 (MAD): {result['mad']:.2f}\")\n","print(f\"穩健夏普比率 (MSR): {result['msr']:.4f}\")\n","print(f\"夏普比率 (Sharpe Ratio): {result['sharpe']:.4f}\")\n","print(f\"回報分佈統計:\")\n","print(f\"  均值 (Mean): {result['mean_return']:.2f}\")\n","print(f\"  標準差 (Std): {result['std_return']:.2f}\")\n","print(f\"  最小值 (Min): {result['min_return']:.2f}\")\n","print(f\"  最大值 (Max): {result['max_return']:.2f}\")\n","print(f\"平均交易時長 (K 棒數): {result['avg_duration']:.2f}\")\n","print(f\"5 筆最短持倉時間平均 (K 棒數): {result['shortest_5_avg']:.2f}\")\n","print(f\"5 筆最長持倉時間平均 (K 棒數): {result['longest_5_avg']:.2f}\")\n","print(f\"出場原因統計: {dict(result['exit_reasons'])}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uSF3GqfQNtSD","executionInfo":{"status":"ok","timestamp":1743773729085,"user_tz":-480,"elapsed":95,"user":{"displayName":"陳昭如","userId":"12388700631515663339"}},"outputId":"e901431a-dbc1-4c01-f7e0-f9650f09f950"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","=== 驗證集績效比較（按穩健夏普比率從高到低排序） ===\n","\n","參數組 ID: Param_1\n","優化方法: Grid Search\n","策略: Strategy_1\n","參數組合: {'ma_short': 30, 'ma_long': 50, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 20, 'will_sell_threshold_2': -50, 'stop_loss': 0.002}\n","交易次數: 35\n","最終資金: 1116760.28\n","勝率: 0.7143\n","中位數回報 (Median Return): 4317.43\n","中位數絕對偏差 (MAD): 4211.04\n","穩健夏普比率 (MSR): 1.0253\n","夏普比率 (Sharpe Ratio): 0.3870\n","回報分佈統計:\n","  均值 (Mean): 3413.68\n","  標準差 (Std): 8821.77\n","  最小值 (Min): -15678.10\n","  最大值 (Max): 26119.09\n","平均交易時長 (K 棒數): 4.06\n","5 筆最短持倉時間平均 (K 棒數): 1.00\n","5 筆最長持倉時間平均 (K 棒數): 13.60\n","出場原因統計: {'death_cross': 11, 'williams_overbought': 21, 'stop_loss': 3}\n","\n","=== 測試集績效比較（按穩健夏普比率從高到低排序） ===\n","\n","參數組 ID: Param_24\n","優化方法: Bayesian Optimization\n","策略: Strategy_1\n","參數組合: {'ma_short': 30, 'ma_long': 50, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 20, 'will_sell_threshold_2': -50, 'stop_loss': 0.002}\n","交易次數: 26\n","最終資金: 1220864.30\n","勝率: 0.5385\n","中位數回報 (Median Return): 4508.16\n","中位數絕對偏差 (MAD): 13301.41\n","穩健夏普比率 (MSR): 0.3389\n","夏普比率 (Sharpe Ratio): 0.3154\n","回報分佈統計:\n","  均值 (Mean): 8585.77\n","  標準差 (Std): 27218.07\n","  最小值 (Min): -23090.81\n","  最大值 (Max): 114713.68\n","平均交易時長 (K 棒數): 3.27\n","5 筆最短持倉時間平均 (K 棒數): 1.00\n","5 筆最長持倉時間平均 (K 棒數): 6.60\n","出場原因統計: {'death_cross': 10, 'williams_overbought': 12, 'stop_loss': 4}\n"]}]},{"cell_type":"markdown","source":["# 訓練集第一在驗證集"],"metadata":{"id":"2AsQGqEnAeW4"}},{"cell_type":"code","source":["val_res = []\n","test_res = []\n","\n","# 計算所有參數組的驗證集和測試集結果\n","for i in range(1, 61):\n","    # 計算驗證集表現指標\n","    trade_count = len(param_trade_val[f\"Param_{i}\"])\n","    win_rate = calculate_win_rate(param_trade_val[f\"Param_{i}\"])\n","    msr = calculate_msr(param_returns_val[f\"Param_{i}\"])\n","    sharpe = calculate_sharpe_ratio(param_returns_val[f\"Param_{i}\"])\n","    avg_duration, exit_reasons, shortest_5_avg, longest_5_avg = calculate_additional_metrics(param_trade_val[f\"Param_{i}\"])\n","    median_return, mad = calculate_median_and_mad(param_returns_val[f\"Param_{i}\"])\n","    mean_return, std_return, min_return, max_return = calculate_returns_stats(param_returns_val[f\"Param_{i}\"])\n","    opt_method = sorted_results[i-1].get('opt_method')\n","    strategy = sorted_results[i-1].get('strategy')\n","\n","    val_res.append({\n","        'param_id': f\"Param_{i}\",\n","        'opt_method': opt_method,\n","        'strategy': strategy,\n","        'params': params,\n","        'trade_count': trade_count,\n","        'final_capital': param_capital_val[f\"Param_{i}\"],\n","        'win_rate': win_rate,\n","        'msr': msr,\n","        'sharpe': sharpe,\n","        'avg_duration': avg_duration,\n","        'exit_reasons': exit_reasons,\n","        'shortest_5_avg': shortest_5_avg,\n","        'longest_5_avg': longest_5_avg,\n","        'median_return': median_return,\n","        'mad': mad,\n","        'mean_return': mean_return,\n","        'std_return': std_return,\n","        'min_return': min_return,\n","        'max_return': max_return\n","    })\n","\n","    # 計算測試集表現指標\n","    trade_count = len(param_trade_test[f\"Param_{i}\"])\n","    win_rate = calculate_win_rate(param_trade_test[f\"Param_{i}\"])\n","    msr = calculate_msr(param_returns_test[f\"Param_{i}\"])\n","    sharpe = calculate_sharpe_ratio(param_returns_test[f\"Param_{i}\"])\n","    avg_duration, exit_reasons, shortest_5_avg, longest_5_avg = calculate_additional_metrics(param_trade_test[f\"Param_{i}\"])\n","    median_return, mad = calculate_median_and_mad(param_returns_test[f\"Param_{i}\"])\n","    mean_return, std_return, min_return, max_return = calculate_returns_stats(param_returns_test[f\"Param_{i}\"])\n","\n","    test_res.append({\n","        'param_id': f\"Param_{i}\",\n","        'opt_method': opt_method,\n","        'strategy': strategy,\n","        'params': params,\n","        'trade_count': trade_count,\n","        'final_capital': param_capital_test[f\"Param_{i}\"],\n","        'win_rate': win_rate,\n","        'msr': msr,\n","        'sharpe': sharpe,\n","        'avg_duration': avg_duration,\n","        'exit_reasons': exit_reasons,\n","        'shortest_5_avg': shortest_5_avg,\n","        'longest_5_avg': longest_5_avg,\n","        'median_return': median_return,\n","        'mad': mad,\n","        'mean_return': mean_return,\n","        'std_return': std_return,\n","        'min_return': min_return,\n","        'max_return': max_return\n","    })\n","\n","# 按 MSR 排序驗證集結果\n","val_res_sorted = sorted(val_res, key=lambda x: x['msr'], reverse=True)\n","\n","# 取得驗證集最佳參數組的索引\n","best_val_param_idx = val_res.index(val_res_sorted[0])\n","\n","# 輸出結果\n","print(\"\\n=== 驗證集最佳參數組績效 ===\")\n","result = val_res_sorted[0]\n","print(f\"\\n參數組 ID: {result['param_id']}\")\n","print(f\"優化方法: {result['opt_method']}\")\n","print(f\"策略: {result['strategy']}\")\n","print(f\"參數組合: {result['params']}\")\n","print(f\"交易次數: {result['trade_count']}\")\n","print(f\"最終資金: {result['final_capital']:.0f}\")  # 改為整數\n","print(f\"勝率: {result['win_rate']:.4f}\")\n","print(f\"中位數回報 (Median Return): {result['median_return']:.0f}\")  # 改為整數\n","print(f\"中位數絕對偏差 (MAD): {result['mad']:.0f}\")  # 改為整數\n","print(f\"穩健夏普比率 (MSR): {result['msr']:.4f}\")\n","print(f\"夏普比率 (Sharpe Ratio): {result['sharpe']:.4f}\")\n","print(f\"回報分佈統計:\")\n","print(f\"  均值 (Mean): {result['mean_return']:.0f}\")  # 改為整數\n","print(f\"  標準差 (Std): {result['std_return']:.0f}\")  # 改為整數\n","print(f\"  最小值 (Min): {result['min_return']:.0f}\")  # 改為整數\n","print(f\"  最大值 (Max): {result['max_return']:.0f}\")  # 改為整數\n","print(f\"平均交易時長 (K 棒數): {result['avg_duration']:.2f}\")\n","print(f\"5 筆最短持倉時間平均 (K 棒數): {result['shortest_5_avg']:.2f}\")\n","print(f\"5 筆最長持倉時間平均 (K 棒數): {result['longest_5_avg']:.2f}\")\n","print(f\"出場原因統計: {dict(result['exit_reasons'])}\")\n","\n","# 使用驗證集最佳參數組的測試集結果\n","print(\"\\n=== 使用驗證集最佳參數組的測試集績效 ===\")\n","result = test_res[best_val_param_idx]  # 使用相同參數組的測試集結果\n","print(f\"\\n參數組 ID: {result['param_id']}\")\n","print(f\"優化方法: {result['opt_method']}\")\n","print(f\"策略: {result['strategy']}\")\n","print(f\"參數組合: {result['params']}\")\n","print(f\"交易次數: {result['trade_count']}\")\n","print(f\"最終資金: {result['final_capital']:.0f}\")  # 改為整數\n","print(f\"勝率: {result['win_rate']:.4f}\")\n","print(f\"中位數回報 (Median Return): {result['median_return']:.0f}\")  # 改為整數\n","print(f\"中位數絕對偏差 (MAD): {result['mad']:.0f}\")  # 改為整數\n","print(f\"穩健夏普比率 (MSR): {result['msr']:.4f}\")\n","print(f\"夏普比率 (Sharpe Ratio): {result['sharpe']:.4f}\")\n","print(f\"回報分佈統計:\")\n","print(f\"  均值 (Mean): {result['mean_return']:.0f}\")  # 改為整數\n","print(f\"  標準差 (Std): {result['std_return']:.0f}\")  # 改為整數\n","print(f\"  最小值 (Min): {result['min_return']:.0f}\")  # 改為整數\n","print(f\"  最大值 (Max): {result['max_return']:.0f}\")  # 改為整數\n","print(f\"平均交易時長 (K 棒數): {result['avg_duration']:.2f}\")\n","print(f\"5 筆最短持倉時間平均 (K 棒數): {result['shortest_5_avg']:.2f}\")\n","print(f\"5 筆最長持倉時間平均 (K 棒數): {result['longest_5_avg']:.2f}\")\n","print(f\"出場原因統計: {dict(result['exit_reasons'])}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M_h23pxmAemI","executionInfo":{"status":"ok","timestamp":1743773729229,"user_tz":-480,"elapsed":141,"user":{"displayName":"陳昭如","userId":"12388700631515663339"}},"outputId":"7fa4e207-3fe9-44f0-b18f-999d0ad07697"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","=== 驗證集最佳參數組績效 ===\n","\n","參數組 ID: Param_1\n","優化方法: Grid Search\n","策略: Strategy_1\n","參數組合: {'ma_short': 30, 'ma_long': 50, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 20, 'will_sell_threshold_2': -50, 'stop_loss': 0.002}\n","交易次數: 35\n","最終資金: 1116760\n","勝率: 0.7143\n","中位數回報 (Median Return): 4317\n","中位數絕對偏差 (MAD): 4211\n","穩健夏普比率 (MSR): 1.0253\n","夏普比率 (Sharpe Ratio): 0.3870\n","回報分佈統計:\n","  均值 (Mean): 3414\n","  標準差 (Std): 8822\n","  最小值 (Min): -15678\n","  最大值 (Max): 26119\n","平均交易時長 (K 棒數): 4.06\n","5 筆最短持倉時間平均 (K 棒數): 1.00\n","5 筆最長持倉時間平均 (K 棒數): 13.60\n","出場原因統計: {'death_cross': 11, 'williams_overbought': 21, 'stop_loss': 3}\n","\n","=== 使用驗證集最佳參數組的測試集績效 ===\n","\n","參數組 ID: Param_1\n","優化方法: Grid Search\n","策略: Strategy_1\n","參數組合: {'ma_short': 30, 'ma_long': 50, 'will_period_1': 30, 'will_buy_threshold_1': -50, 'will_period_2': 20, 'will_sell_threshold_2': -50, 'stop_loss': 0.002}\n","交易次數: 36\n","最終資金: 1242675\n","勝率: 0.4722\n","中位數回報 (Median Return): -2891\n","中位數絕對偏差 (MAD): 14099\n","穩健夏普比率 (MSR): -0.2051\n","夏普比率 (Sharpe Ratio): 0.2270\n","回報分佈統計:\n","  均值 (Mean): 6832\n","  標準差 (Std): 30092\n","  最小值 (Min): -25493\n","  最大值 (Max): 102115\n","平均交易時長 (K 棒數): 3.83\n","5 筆最短持倉時間平均 (K 棒數): 1.00\n","5 筆最長持倉時間平均 (K 棒數): 13.60\n","出場原因統計: {'death_cross': 13, 'williams_overbought': 14, 'stop_loss': 9}\n"]}]},{"cell_type":"markdown","source":["步驟 1：載入與排序參數組合結果\n","\n","首先，從一個 JSON 檔案中載入前述參數優化階段（網格搜索、貝葉斯優化、蒙地卡羅模擬）得到的最佳參數組合結果。這些結果包含 60 組參數組合（Param_1 至 Param_60），每組包括參數編號（param_id，例如 \"Param_1\"）、交易策略名稱（strategy，例如 \"Strategy_1\"）和具體參數值（params，例如 ma_short, stop_loss 等）。為了確保後續處理的順序一致，將這些參數組合按 param_id 中的數字部分（例如 \"Param_1\" 的 1）進行排序。\n"],"metadata":{"id":"CTpSmtz2eUhG"}},{"cell_type":"markdown","source":["步驟 2：模擬交易並儲存結果\n","\n","針對每組參數組合，使用對應的交易策略（Strategy_1 至 Strategy_4）在訓練集、驗證集和測試集上模擬交易。模擬過程中，根據參數值（例如 ma_short, stop_loss）執行交易策略，生成以下結果：\n","\n","*   交易紀錄（trades）：包含每筆交易的進場時間、離場時間和利潤等資訊。\n","\n","*   回報序列（returns）：記錄每次交易的回報。\n","\n","\n","*   最終資金（capital）：計算模擬交易後的最終資金（僅記錄驗證集和測試集）。 這些結果分別儲存在訓練集、驗證集和測試集的獨立字典中，例如 param_trade_train 儲存訓練集的交易紀錄，param_capital_test 儲存測試集的最終資金。"],"metadata":{"id":"HARRHLlnelNv"}},{"cell_type":"markdown","source":["步驟 3：生成特徵矩陣\n","\n","根據模擬交易的結果，生成特徵矩陣，為後續 XGBoost 模型準備輸入數據。具體做法是：\n","*   對訓練集、驗證集和測試集的數據表，新增 60 個欄位（Param_1 至 Param_60），初始值設為 0。\n","\n","*   針對每組參數組合，遍歷其交易紀錄，找出每筆交易的期間（從進場時間到離場時間）。\n","\n","*   若某筆交易的利潤為正，將該利潤平均分配到交易期間的每根 K 線，記錄在對應的欄位中。例如，若 Param_1 在某段時間內有一筆利潤為正的交易，則該段時間的 K 線在 Param_1 欄位中記錄平均利潤；若無交易或利潤為負，則保持為 0。 此步驟生成的特徵矩陣表示每根 K 線是否屬於某參數組合的盈利交易期間。"],"metadata":{"id":"zQqCh_D7ewd-"}},{"cell_type":"markdown","source":["步驟 4：添加技術指標與參數值\n","\n","為數據表添加技術指標和參數值，以供後續回測使用。具體做法是：\n","\n","*  針對每組參數組合，提取其技術指標相關參數（短期移動平均線周期 ma_short、長期移動平均線周期 ma_long、第一威廉指標周期 will_period_1、第二威廉指標周期 will_period_2）。\n","*   根據這些參數，計算對應的技術指標（例如移動平均線 MA_Short_15、Williams %R Williams_1_40），並添加到訓練集、驗證集和測試集的數據表中。\n","*   將參數值（第一威廉指標買入閾值 will_buy_threshold_1、第二威廉指標賣出閾值 will_sell_threshold_2、止損比例 stop_loss）作為新欄位添加到數據表中，例如 stop_loss_0.003。 此步驟確保數據表包含所有必要的技術指標和參數值，以便在回測時直接使用。"],"metadata":{"id":"4Tg277lSe7by"}},{"cell_type":"markdown","source":["步驟 5：數據清洗與標籤生成\n","\n","對數據表進行清洗並生成 XGBoost 模型的輸入特徵和標籤，具體做法是：\n","\n","*  移除數據表中的缺失值，確保數據完整。\n","*  在數據表中新增一個欄位 position，初始值設為空，用於後續回測記錄持倉資訊。\n","*  提取特徵欄位（Param_1 至 Param_60），生成特徵矩陣 X 和標籤 y：\n","\n","特徵矩陣 X：將 Param_1 至 Param_60 欄位轉為二元變量，若某欄\n","\n","> 特徵矩陣 X：將 Param_1 至 Param_60 欄位轉為二元變量，若某欄值不為 0（表示該 K 線屬於某參數組合的交易期間），則設為 1，否則為 0。\n","\n","> 標籤 y：計算每根 K 線的所有 Param_1 至 Param_60 欄位的利潤總和，若總和大於 22000，則標記為 1（表示應進場），否則為 0（不進場）。 此步驟為訓練集、驗證集和測試集分別生成特徵矩陣（X_train, X_val, X_test）和標籤（y_train, y_val, y_test）。\n","\n"],"metadata":{"id":"asgExbh0fDg8"}},{"cell_type":"markdown","source":["步驟 6：訓練 XGBoost 模型\n","\n","使用訓練集數據（X_train, y_train）訓練 XGBoost 分類模型，具體做法是：\n","\n","*  計算類別權重，解決正樣本（進場）數量較少的問題，確保模型對少數類別給予更多關注。\n","*  建立 XGBoost 分類器，設置目標函數為二元分類（binary:logistic），評估指標為 logloss。\n","*  使用訓練集數據和類別權重進行模型訓練，生成一個能夠預測是否應進場的模型。"],"metadata":{"id":"ucE4pUNNftkb"}},{"cell_type":"markdown","source":["步驟 7：模型評估\n","\n","使用訓練好的 XGBoost 模型，在驗證集和測試集上進行預測，並評估模型表現，具體做法是：\n","\n","*  在驗證集（X_val）和測試集（X_test）上進行預測，生成預測標籤（y_val_pred, y_test_pred）。\n","*  計算驗證集和測試集的準確率，並生成分類報告，包含 Precision、Recall 和 F1-Score 等指標。 結果顯示，模型在驗證集和測試集上的準確率分別為 0.94 和 0.95，但對於進場（類別 1）的預測表現較弱，Precision 較低（驗證集 0.45，測試集 0.63），可能因正樣本數量較少。"],"metadata":{"id":"2Vvwx5f2fwbX"}},{"cell_type":"markdown","source":["步驟 8：SHAP 解釋\n","\n","使用 SHAP 解釋器分析 XGBoost 模型的預測結果，找出對每筆資料預測貢獻最大的參數組合，具體做法是：\n","\n","*  建立 SHAP 解釋器，針對驗證集和測試集計算 SHAP 值。\n","\n","*  對每筆資料，計算 SHAP 值的絕對值，找出貢獻最大的特徵（即最佳參數組合，例如 Param_1），並記錄其 SHAP 絕對值。\n","\n","*  將結果整理成表格，包含每筆資料的索引、最佳特徵（Best_Feature）和對應的 SHAP 絕對值。 此步驟為後續回測提供依據，確保選擇的參數組合是對模型預測最重要的。"],"metadata":{"id":"E7ZMS9XPfy8e"}},{"cell_type":"markdown","source":["步驟 9：回測\n","\n","根據 XGBoost 的預測結果和 SHAP 選擇的最佳參數組合，執行回測，模擬交易並計算最終資金，具體做法是：\n","\n","*  遍歷測試集數據，使用滑動窗口（前一筆、當前筆、下一筆）模擬交易。\n","*  若模型預測為進場（Pred = 1），則根據 SHAP 選擇的最佳特徵（Best_Feature，例如 Param_1），提取對應的參數組合和交易策略（Strategy_1 至 Strategy_4）。\n","*  使用該參數組合和策略執行進場交易，並記錄持倉資訊（open_position）。\n","*  若已有持倉，則繼續執行該策略，直到觸發離場條件（由策略決定，例如價格觸及止損）。\n","*  若回測結束時仍有持倉，則以最後一筆 K 線的收盤價強制平倉。\n","*  最終記錄所有交易紀錄和最終資金，用於後續與單一參數組合的比較。"],"metadata":{"id":"ddm8TtkHf3Xn"}},{"cell_type":"markdown","metadata":{"id":"ypvuFon14KVm"},"source":["# 紀錄參數組合\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"g-ftbBaRFujd"},"outputs":[],"source":["import json\n","import numpy as np\n","from collections import Counter\n","# 處理numpy類型和Counter型態的特殊轉換\n","class NumpyEncoder(json.JSONEncoder):\n","    def default(self, obj):\n","        if isinstance(obj, (np.integer, np.int64)):\n","            return int(obj)\n","        elif isinstance(obj, (np.floating, np.float64)):\n","            return float(obj)\n","        elif isinstance(obj, np.ndarray):\n","            return obj.tolist()\n","        elif isinstance(obj, Counter):\n","            return dict(obj)\n","        else:\n","            return super(NumpyEncoder, self).default(obj)\n","\n","# 輸出成json檔案\n","with open('/content/drive/MyDrive/Colab Notebooks/test_results.json', 'w', encoding='utf-8') as f:\n","    json.dump(test_results, f, ensure_ascii=False, indent=4, cls=NumpyEncoder)"]}],"metadata":{"colab":{"provenance":[{"file_id":"1qLYfLKkA0JUDCJgkYxuhgZFS28szbJSk","timestamp":1743165701005}],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}